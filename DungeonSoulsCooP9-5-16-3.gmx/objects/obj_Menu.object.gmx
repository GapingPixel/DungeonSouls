<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
globalvar quick_saved;
ini_open("DGSC.ds");
quick_saved = ini_read_real(GENERAL_SECTION,QUICK_SAVED_KEY,false);
quick_saved=false;
ini_close();

if instance_exists(obj_HUD)with obj_HUD instance_destroy();
if instance_exists(obj_Hero)with obj_Hero instance_destroy();
if instance_exists(obj_Corpse)with obj_Corpse instance_destroy();

//r
option = 0;
menu_index = MENU_MAIN;
alpha = 1;
maxOption = 3;

//Text vertical position
for ( var i = 10; i &gt;= 0; i-- ) {
    yy[i] = 120+(16*i); 
}

//Text
text[6] = "Exit";
text[5] = "Credits";
text[4] = "Options";
text[3] = "Arcane Forge";
text[2] = "Tutorial";
text[1] = "Co-Op";
text[0] = "Single Player";

 /*
text[5] = "Exit";
text[4] = "Credits";
text[3] = "Options";
text[2] = "Tutorial";
text[1] = "Co-Op";
text[0] = "Single Player";*/

//text[0] = Text[? "Single Player"]

up = true;
scale = 1;

//Options text
/*
Controls
Gameplay
Settings
Stats
Reset Data
back
*/
//Settings
scr_init_menu_shared_text();

//Option selection
xxx = 220;
//Settings
xxxx = 80; 
for ( var i = 10; i &gt;= 0; i--) {
    yyyy[i] = 48+(20*i) 
}

//Volume Position
vol_x = view_xview+view_wview/1.77;
vol_y = view_yview+view_hview/2.45;

//Credits
target_credits_scroll = 0;
max_credits_scroll = 80;
credits_scroll = 0;
//Wait
alarm[0] = room_speed *.4;
alarm[1] = room_speed *.25;
//Fade Start
instance_create(x,y,obj_fade_start);

//Blink
blink = true;
//Selection
character_selection[1] = false;
character_selection[0] = false;
char_option[1] = 0;
char_option[0] = 0;

//Part FX
//PARTICLE
part_sys = part_system_create();

part = part_type_create();
part_type_shape(part,pt_shape_pixel);
part_type_color2(part,c_white,c_aqua);
part_type_alpha2(part,0.3,0);
part_type_size(part,0.2,.5,false,true);
part_type_blend(part,true);
part_type_speed(part,0.4/2,0.8/2,false,true);
part_type_direction(part,80,100,false,true);
part_type_life(part,300,500);

emitter = part_emitter_create(part_sys);
part_emitter_region(part_sys,emitter,0,320,240,240,ps_shape_rectangle,ps_distr_gaussian);
part_emitter_stream(part_sys,emitter,part,-1);

//Arcane forge
arcane_forge_char=0;
arcane_item_angle=0;
selected_recipe=0;
arcane_forge_cost_complete=false;
arcane_forge_requirements[0]=false;
arcane_forge_ingredients[0]=0;
arcane_forge_all_ingredients=false;
loaded_forge_ingredients=false;
arcane_forge_base_radius= 32//128;
arcane_forge_item_slot=0;
arcane_forge_ing_slot=0;
arcane_forge_ing_base_line=0;
arcane_forge_item_base_line=0;
arcane_forge_mode=1; //Default
arcane_forge_display_box=false; //Selection box when interacting with forge inventory

///Menu background fx
myy = 0;
malpha = 1;
n = 0;
background_vspeed[0] = -0.3;
background_vspeed[1] = -0.3;

menu_yy = 0;
menu_yyB = 0;
menu_yyC = 0;
menu_yyD = 0;
menu_yyE = 0;
menu_part = 0;
ctr = 0;
kbScale = 1;
cntScale = 1;

wait_gamepad= false;//OLD
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(part_sys);
part_type_destroy(part);
part_emitter_destroy(part_sys,emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop vibration
gamepad_set_vibration(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard wait

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Volume wait
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait for option, Pad 2

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink &amp;&amp; Can Select
blink = !blink;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait to start 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait for option
wait_gamepad=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(part_sys);
part_type_destroy(part);
part_emitter_destroy(part_sys,emitter);

if (room = Game) {
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy
if (room = Game) {
    instance_destroy();
    part_system_destroy(part_sys);
    part_type_destroy(part);
    part_emitter_destroy(part_sys,emitter);

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( menu_index != MENU_FORGE ) then exit;

display_set_gui_size(view_wview,view_hview);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

//draw_set_font(font1);
var baseX=160,baseY= 30//baseY=120;
//var baseX=0,baseY=0;
var mmyForge = -160
var halfMYY= myy / 2;

var using_gamepad = global.pad[GAMEPAD_1];
    var _desc="";
    var scroll_info="",forge_info="",hero_info="",inv_info="",switch_info="";
    var prev_key,next_key;
    if (using_gamepad) {
        switch (arcane_forge_mode)
        {
            case 2:
                scroll_info="LS-UP/LS-DOWN -vertical slot movement";
                forge_info = Return_ContKey(ds_map_find_value(global.ckeys,'left'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'right'))+"-horizontal slot movement";
                hero_info = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+"-switch menu";
                switch_info = "";
                prev_key=Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
                next_key=Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));
            break;
            case 1:
                scroll_info="LS-UP/LS-DOWN -scroll recipes";
                forge_info = Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"-forge item";
                hero_info = Return_ContKey(ds_map_find_value(global.ckeys,'left'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'right'))+"-switch hero";
                switch_info = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+"-switch menu";
                prev_key=Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
                next_key=Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));
            break;
        
            case 0:
                scroll_info="LS-UP/LS-DOWN -vertical slot movement";
                forge_info = Return_ContKey(ds_map_find_value(global.ckeys,'left'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'right'))+"-horizontal slot movement";
                hero_info = Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"-equip item";
                switch_info = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+"-switch menu";
                prev_key=Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
                next_key=Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));
            break;
        }
    }
    else
    {
        switch (arcane_forge_mode)
        {
            case 2:
 scroll_info=Return_Key(ds_map_find_value(global.keys,'up'))+"/"+
                Return_Key(ds_map_find_value(global.keys,'down'))+"-vertical slot movement";
                forge_info = Return_Key(ds_map_find_value(global.keys,'left'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'right'))+"-horizontal slot movement";
                hero_info = Return_Key(ds_map_find_value(global.keys,'sskill'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'tskill'))+"-switch menu";
                switch_info = "";
                prev_key=Return_Key(ds_map_find_value(global.keys,'sskill'));
                next_key=Return_Key(ds_map_find_value(global.keys,'tskill'));
            break;
            case 1:
                scroll_info=Return_Key(ds_map_find_value(global.keys,'up'))+"/"+
                Return_Key(ds_map_find_value(global.keys,'down'))+"-scroll recipes";
                forge_info = Return_Key(ds_map_find_value(global.keys,'pick'))+"-forge item";
                hero_info = Return_Key(ds_map_find_value(global.keys,'left'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'right'))+"-switch hero";
                switch_info = Return_Key(ds_map_find_value(global.keys,'sskill'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'tskill'))+"-switch menu";
                prev_key=Return_Key(ds_map_find_value(global.keys,'sskill'));
                next_key=Return_Key(ds_map_find_value(global.keys,'tskill'));
            break;
        
            case 0:
                scroll_info=Return_Key(ds_map_find_value(global.keys,'up'))+"/"+
                Return_Key(ds_map_find_value(global.keys,'down'))+"-vertical slot movement";
                forge_info = Return_Key(ds_map_find_value(global.keys,'left'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'right'))+"-horizontal slot movement";
                hero_info = Return_Key(ds_map_find_value(global.keys,'pick'))+"-equip item";
                switch_info = Return_Key(ds_map_find_value(global.keys,'sskill'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'tskill'))+"-switch menu";
                prev_key=Return_Key(ds_map_find_value(global.keys,'sskill'));
                next_key=Return_Key(ds_map_find_value(global.keys,'tskill'));
            break;
        }
    }
    draw_set_colour(c_gray);
        draw_set_halign(false);
        draw_set_valign(false);
        draw_text(baseX-156,baseY+halfMYY-20,scroll_info);
        draw_text(baseX-156,baseY+halfMYY-10,forge_info);
        draw_text(baseX-156,baseY+halfMYY,hero_info);
        draw_text(baseX-156,baseY+halfMYY+10,switch_info);

        var wear_types_x=baseX-124;
        draw_text(wear_types_x,baseY+halfMYY+43,"Can Equip:");
        switch (arcane_forge_char)
        {
            case 0:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe");
            break;
            case 1:
                draw_text(wear_types_x,baseY+halfMYY+51,"Bow");
            break;
            case 2:
                draw_text(wear_types_x,baseY+halfMYY+51,"Dagger#Knife");
            break;
            case 3:
                draw_text(wear_types_x,baseY+halfMYY+51,"Sword");
            break;
            case 4:
                draw_text(wear_types_x,baseY+halfMYY+51,"Staff");
            break;
            case 5:
                draw_text(wear_types_x,baseY+halfMYY+51,"Scepter#Staff");
            break;
            case 6:
                draw_text(wear_types_x,baseY+halfMYY+51,"Scepter#Staff");
            break;
            case 7:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe");
            break;
            case 8:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe#Sword");
            break;
            case 9:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe");
            break;
        }
    
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
    draw_set_color(c_white);
    //draw_set_font(font2);
    //draw_text(baseX,baseY+halfMYY+24,"Arcane Forge");
    //draw_set_font(font0);
    
    var coinOffset = string_width(string(global.total_coins))*0.5;
    
    draw_sprite(spr_Frame,arcane_forge_char,baseX-150,baseY+halfMYY+44);
    
    //DRAW TOTAL MOMEY
    draw_text(baseX-148,baseY+halfMYY+36,string(global.total_coins));
    draw_sprite(spr_Coin,0,baseX-144+coinOffset,baseY+halfMYY+35);
    
    if (arcane_forge_mode==1)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    var wtag,itag,rtag,ftag;
    switch (arcane_forge_mode)
    {
        case 0:
            wtag="["+next_key+"]";
            rtag="["+next_key+"]";
            itag="["+prev_key+"]";
            ftag="";
        break;
        case 1:
            wtag="";
            rtag="";
            itag="["+next_key+"]";
            ftag="["+prev_key+"]";
        break;
        case 2:
            wtag="["+prev_key+"]";
            rtag="["+prev_key+"]";
            itag="";
            ftag="["+next_key+"]";
        break;
    }
    draw_text(baseX-142,baseY+halfMYY+66,"Weapon"+wtag);
    draw_set_color(c_white);
    draw_set_color(c_gray);
    var forgeX=baseX,forgeY=90;
    draw_sprite(spr_Inventory_Slot,0,baseX-154,baseY+halfMYY+70);
    if (arcane_forge_cost_complete)
    {
        draw_set_colour(DS_BLUE);
        //draw_circle(forgeX,forgeY,arcane_forge_base_radius+64+(2*halfMYY),true);
         draw_circle(forgeX,forgeY,arcane_forge_base_radius+32+(2*halfMYY),true);
        draw_set_colour(c_gray);
    }
    else
    {
        //draw_circle(forgeX,forgeY,arcane_forge_base_radius+64+(2*halfMYY),true);
         draw_circle(forgeX,forgeY,arcane_forge_base_radius+24+(2*halfMYY),true);
    }
    if (arcane_forge_cost_complete &amp;&amp; arcane_forge_all_ingredients)
    {
        draw_set_colour(make_colour_rgb(140,150,230));
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+8+(1.5*halfMYY),true);
        draw_set_colour(c_gray);
    }
    else
    {
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+8+(1.5*halfMYY),true);
    }
    if (arcane_forge_all_ingredients)
    {
        draw_set_colour(make_colour_rgb(40,60,128));
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+halfMYY,true);
        draw_set_colour(c_gray);
    }
    else
    {
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+halfMYY,true);
        
    }
    if (arcane_forge_mode==2)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    
    var extraOffset=1;
    draw_text(baseX-30,baseY+134+halfMYY,"Ingredients"+itag);
    draw_set_color(c_white);
    var ing_ind = 0;
    for (var i=0;i&lt;2;i++)
    {
        for (var j=0;j&lt;4;j++)
        {
            var __ind = ing_ind+arcane_forge_ing_base_line*4;
            if (j==(arcane_forge_ing_slot%4) &amp;&amp; i==0)
            {
                draw_sprite_ext(spr_Inventory_Slot,0,baseX-54+j*28,baseY+140+halfMYY+i*28,1,1,0,c_aqua,1);
                if (arcane_forge_mode==2)
                {
                    if (arcane_forge_ing_slot&lt;global.ingredients_amount)
                    {
                        _desc="["+global.ingredient_name[arcane_forge_ing_slot]+"]#"+global.ingredient_description[arcane_forge_ing_slot];
                    }
                }
            }
            else
            {
                draw_sprite(spr_Inventory_Slot,0,baseX-54+j*28,baseY+140+halfMYY+i*28);
            }
            if (__ind&lt;global.ingredients_amount)
            {
                draw_sprite(global.ingredient_type[__ind],0,baseX-42+j*28,baseY+152+halfMYY+i*28);
                draw_text_outlined(baseX-48+j*28,baseY+160+halfMYY+i*28,string(global.ingredient_count[__ind]),c_black,c_white);
            }
            ing_ind++;
        }
    }
    if (arcane_forge_mode==0)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    draw_text(baseX-114,baseY+halfMYY+110,"Forge Inventory"+ftag);
    draw_set_color(c_white);
    //var stop_condition = ceil(max(global.forge_item_amount,9)/3);
    var fg_it_count=0;
    for (var i=0;i&lt;3;i++)
    {
        for (var j=0;j&lt;3;j++)
        {
            var it_i = arcane_forge_item_base_line*3;
            if (arcane_forge_item_slot%3 == j &amp;&amp; i==0)
            {
                draw_sprite_ext(spr_Inventory_Slot,0,baseX-150+(j*24),baseY+halfMYY+120+(i*24),1,1,0,c_aqua,1);
                if (arcane_forge_item_slot&lt;global.forge_item_amount &amp;&amp; arcane_forge_mode==0)
                {
                    _desc="["+global.forge_item_name[arcane_forge_item_slot]+"]#"+global.forge_item_description[arcane_forge_item_slot];
                }
            }
            else
            {
                draw_sprite(spr_Inventory_Slot,0,baseX-150+(j*24),baseY+halfMYY+120+(i*24));
            }
            if (fg_it_count+it_i&lt;global.forge_item_amount)
            {
                draw_sprite_stretched(global.forge_item_sprite[fg_it_count+it_i],0,
                baseX-150+(j*24),baseY+halfMYY+120+(i*24),24,24);
            }
            fg_it_count++;
        }
    }
    if (arcane_forge_mode==1)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    draw_text(baseX+116,baseY+halfMYY,"Recipe List"+rtag);
    draw_set_color(make_colour_rgb(47,32,47));
    draw_set_alpha(0.5);
    draw_rectangle(baseX+90,baseY+halfMYY+10,baseX+160,baseY+halfMYY+90,false);
    draw_set_alpha(1);
    draw_set_color(make_colour_rgb(47,16,47));
    draw_rectangle(baseX+89,baseY+halfMYY+9,baseX+160,baseY+halfMYY+90,true);
    draw_set_color(c_white);
    draw_sprite_stretched(global.arcane_forge_weapon_sprite[arcane_forge_char],0,baseX-153,baseY+halfMYY+71,20,20);
    if (global.number_recipes&gt;0)
    {
        var forge_text = "Forge ("+string(global.recipe_forge_cost[global.recipe[selected_recipe]]);
        if (arcane_forge_cost_complete &amp;&amp; arcane_forge_all_ingredients)
        {
            draw_set_colour(DS_BLUE);
            draw_rectangle(baseX-20-string_width(forge_text)*0.5,baseY+halfMYY+112,
                baseX+20+string_width(forge_text)*0.5,baseY+halfMYY+124,false);
            draw_set_colour(c_white);
        }
        draw_sprite(spr_Coin,0,baseX-1+string_width(forge_text)*0.5,baseY+halfMYY+119);
        draw_text(baseX,baseY+halfMYY+120,forge_text+"   )");
        extraOffset=global.recipe_ingredient_number[global.recipe[selected_recipe]];
        arcane_item_angle-=1/extraOffset;
        if (arcane_item_angle&lt;0)
        {
            arcane_item_angle+=360;
        }
        var hover_angle;
        var angle_offset=360/extraOffset;
        var ing_x,ing_y;
        for (var i=0;i&lt;extraOffset;i++)
        {
            hover_angle = degtorad(arcane_item_angle+(angle_offset*i));
            ing_x=forgeX+(arcane_forge_base_radius+halfMYY)*cos(hover_angle);
            ing_y=forgeY-(arcane_forge_base_radius+halfMYY)*sin(hover_angle);
            draw_sprite(global.recipe_ingredient_type[global.recipe[selected_recipe],i],0,ing_x,ing_y);
            var forge_index = i;
            if (!loaded_forge_ingredients)
            {
                forge_index=0;
            }
            draw_text_outlined(ing_x,ing_y+4,
                string(min(arcane_forge_ingredients[forge_index],
                global.recipe_ingredient_amount[global.recipe[selected_recipe],i]))+"/"+string(global.recipe_ingredient_amount[global.recipe[selected_recipe],i]),c_black,c_white);
        }
        hover_angle = degtorad(arcane_item_angle*extraOffset);
    
        draw_set_colour(c_white);
        draw_set_halign(false);
        draw_set_valign(false);
        if (selected_recipe==0)
        {
            draw_set_color(make_colour_rgb(63,48,63));
        }
        else
        {
            draw_set_colour(c_yellow);
        }
        draw_primitive_begin(pr_trianglelist);
            draw_vertex(baseX+125,baseY+halfMYY+14);
            draw_vertex(baseX+135,baseY+halfMYY+18);
            draw_vertex(baseX+115,baseY+halfMYY+18);
        draw_primitive_end();
        if (selected_recipe&gt;=global.number_recipes-1)
        {
            draw_set_color(make_colour_rgb(63,48,63));
        }
        else
        {
            draw_set_colour(c_yellow);
        }
        draw_primitive_begin(pr_trianglelist);
            draw_vertex(baseX+125,baseY+halfMYY+88);
            draw_vertex(baseX+135,baseY+halfMYY+84);
            draw_vertex(baseX+115,baseY+halfMYY+84);
        draw_primitive_end();
        draw_set_color(make_colour_rgb(47,16,47));
        draw_line(baseX+90,baseY+halfMYY+22,baseX+160,baseY+halfMYY+22);
        draw_line(baseX+90,baseY+halfMYY+78,baseX+160,baseY+halfMYY+78);
        draw_set_colour(c_white);
        {
            if (selected_recipe&lt;global.number_recipes)
            {
                draw_sprite_stretched(global.recipe_sprite[global.recipe[selected_recipe]],0,baseX+92,baseY+halfMYY+24,12,12);
                draw_text_ext(baseX+92,baseY+halfMYY+40,global.recipe_name[global.recipe[selected_recipe]],-1,128);
                draw_text_ext(baseX+92,baseY+halfMYY+56,"Type: "+string(global.recipe_type[global.recipe[selected_recipe]]),-1,128);
            }
            if (arcane_forge_mode==1)
            {
                _desc=global.recipe_description[global.recipe[selected_recipe]];
            }
            draw_sprite_stretched_ext(global.recipe_result[global.recipe[selected_recipe]],0,forgeX-12,-12+forgeY-4*sin(hover_angle),24,24,c_white,0.2);
        }
    }
    else
    {
        draw_text(baseX+122,baseY+halfMYY+60,"You have#no recipes");
    }
    draw_set_color(c_white);
    if (_desc!="")
    {
        draw_set_halign(false);
        draw_set_valign(false);
        draw_text(baseX+94,baseY+104+halfMYY,"Description");
        draw_text_ext(baseX+94,baseY+116+halfMYY,_desc,-1,64);
    }
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    //draw_sprite(spr_Mouse_Cursor,0,mouse_x,mouse_y);
    //draw_text(baseX,baseY+186+halfMYY,"Back"); 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Menus
scr_menu_options();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
