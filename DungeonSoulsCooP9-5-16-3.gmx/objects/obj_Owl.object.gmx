<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Owl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0.5;
owl_angle=0;
emotion=-1;
move_timer=0;
create_shield_surface(16,make_colour_rgb(0,255,255));
draw_shield=false;
close_for_kill=false;
has_shield=true;
denied_death=false;
killed=false;
chose_action=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!killed)
{
    instance_create(x,y,obj_Beam);
    if (owl_nice_value&gt;0)
    {
        repeat (1)
        {
            var ing = choose(obj_Metal_Scrap,obj_Fire_Shard,obj_Magic_Dust,obj_Magic_Essence,obj_Ice_Shard);
            ing_val=choose(1,2,3);
            
            with (instance_create(x,y,ing))
            {
                speed = 2+random(2)/2;
                direction = random(360);
                friction = 0.2;
                value = other.ing_val
            }
        }
        if (owl_nice_value&gt;=5)
        {
            Item_Init();
            with (instance_create(x,y,Drop_Common()))
            {
                item_price = 0;
                speed = 3;
                direction = random(360);
                friction = 0.2;
            }
        }
    }
}
else
{
    Play_Sound(snd_bat_dead,1.3,0.7,0,7000,true,false);
    just_killed_owl=true;
    with instance_create(x,y,obj_Corpse)
    {
        sprite_index = spr_Owl_Dead;
        image_xscale = other.image_xscale;
        friction = other.friction;
        image_blend = other.image_blend+c_gray;
    }
    repeat(Random(1,4))
    {
        with instance_create(x+choose(-random(16),random(16)),y+choose(-random(16),random(16)),obj_Blood_Stain)
        {
            image_xscale = other.image_xscale;
            friction = other.friction;
        }
    }
    ini_open("DGSC.ds");
    ini_write_real(CUTSCENE_SYSTEM,OWL_KILLER,global.choice);
    ini_write_real(CUTSCENE_SYSTEM,KILLER_DATE,date_current_datetime());
    killed_owl=true;
    ini_write_real(CUTSCENE_SYSTEM,KILLED_OWL,killed_owl);
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_shield=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (check_within_player_range(x,y,32,32))
{
    var dist = distance_to_object(obj_Hero);
    if (dist&lt;48)
    {
        if (!close_for_kill)
        {
            move_timer=0;
            if (owl_nice_value&lt;5)
            {
                emotion=2;
                direction = point_direction(obj_Hero.x,obj_Hero.y,x,y);
            }
            else
            {
                emotion=0;
                direction = point_direction(x,y,obj_Hero.x,obj_Hero.y);
            }
            speed=1.5;
        }
        else if (dist&gt;24 &amp;&amp; !instance_exists(obj_Question_Owl1) &amp;&amp; !instance_exists(obj_Question_Owl2) &amp;&amp; chose_action)
        {
            speed=0;
            if (owl_nice_value&gt;0)
            {
                emotion=0;
            }
            if (alarm[1]&lt;=0)
            {
                alarm[1]=1*room_speed;
                display_ingame_message(x,y,"Hoot!",1,false,id);
            }
        }
        var distEnemy = distance_to_object(instance_nearest(x,y,obj_Enemy));
        if (dist&lt;24 &amp;&amp; distEnemy&gt;128)
        {
            if (!instance_exists(obj_Question_Owl1) &amp;&amp; !instance_exists(obj_Question_Owl2) 
            &amp;&amp; !denied_death)
            {
                var o = instance_create(x,y,obj_Question_Owl1);
                o.target=id;
                chose_action=true;
            }
            if (has_shield)
            {
                if (owl_nice_value&lt;5)
                {
                    emotion=1;
                }
                else
                {
                    emotion=0;
                }
            }
            else
            {
                emotion=2;
            }
            speed=0;
            close_for_kill=true;;
            if (obj_Hero.x&lt;x)
            {
                image_xscale=-1;
            }
            else
            {
                image_xscale=1;
            }
        }
    }
    else
    {
        emotion=-1;
        if (move_timer&gt;0)
        {
            move_timer--;
        }
        else
        {
            move_timer=random_range(0.5,2.5)*room_speed;
            hspeed=irandom_range(-1,1);
            vspeed=irandom_range(-1,1);
        }
    }
}
else
{
    emotion=-1;
    if (move_timer&gt;0)
    {
        move_timer--;
    }
    else
    {
        move_timer=random_range(0.5,2.5)*room_speed;
        hspeed=irandom_range(-1,1);
        vspeed=irandom_range(-1,1);
    }
}
if (hspeed&lt;0)
{
    image_xscale=-1;
}
else if (hspeed&gt;0)
{
    image_xscale=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_shield=true;
alarm[0]=0.3*room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_bounce_solid(false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Makes owl "float"
if (!surface_exists(shield_surface))
{
    create_shield_surface(16,make_colour_rgb(0,255,255));
}
owl_angle+=2;
var angle = degtorad(owl_angle);
if (has_shield)
{
    draw_sprite_ext(sprite_index,image_index,x,y+4*sin(angle),image_xscale,image_yscale,image_angle,image_blend,image_alpha);
}
else
{
    draw_sprite_ext(sprite_index,image_index,x+4*cos(4*angle),y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
}
if (emotion!=-1)
{
    draw_sprite(spr_Owl_Emotion,emotion,x-4*image_xscale,y-16);
}
if (has_shield)
{
    if (draw_shield)
    {
        draw_surface(shield_surface,x-8,y+4*sin(angle)-8);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
