<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_gamepad_joystick(4);
//alienware_init();
//globalvar enabled_gamepad,
globalvar door_wait;
globalvar is_alienware,is_logitech;
globalvar last_player_health,lastChoice,low_health,gamepad_last_update;
globalvar potion_color,potion_obj; //The color of the potion effect.
dead=false;
ini_open("DGSC.ds"); //File that contains system configurations (not vital to the game, therefore should
//not be kept in the same file as gameplay data).
enabled_gamepad = ini_read_real(GAMEPAD_SYSTEM,ENABLED_GAMEPAD,true);
ini_close();
door_wait= false;

triggerGamepadInit=true;

gamepad_last_update=0;
//Logitech vars:
globalvar broken_heart_map,skull1_map;
broken_heart_map=-1;
skull1_map=-1;
display_map=true;

potion_color=-1;
last_player_health=-1;
low_health=false;
lastChoice=-1;
potion_obj=-1;
blink=false;
/*if (os_type!=os_windows)
{
    is_alienware=false;
    is_logitech=false;
}
else
{
    var dll_init = alienware_initialize_dll();
    logger_write("DLL_Initialize="+string(dll_init));
    if (dll_init==2)
    {
        var alien = alienware_lfx_initialize();
        
        var LFX_FULL_BRIGHTNESS = $FF000000,LFX_ALL = $07FFFFFF;
        
        is_alienware = (alien==0);
        if (is_alienware)
        {
            alienware_lfx_reset();
            alienware_lfx_action_color(LFX_ALL,$00000003);
            alienware_lfx_update();
        }
        logger_write("Alien_init:"+string(alien));
        show_debug_message("Alien_init:"+string(alien));
        logger_write("Is_alienware:"+string(is_alienware));
    }
    else
    {
        is_alienware=false;
    }
    
    dll_init = logiled_initialize_dll();
    logger_write("Logi_DLL_Initialize="+string(dll_init));
    if (dll_init==2)
    {
        var logi = logiled_init();
        
        is_logitech = (logi==1);
        if (is_logitech)
        {
            logiled_set_target_device(6); //Bits 1 and 2 turned on.
            logiled_set_lighting(100,0,0);
        }
        logger_write("Logi_init:"+string(logi));
        logger_write("Is_logitech:"+string(is_logitech));
        broken_heart_map=load_led_map("broken_heart.lled");
        skull1_map=load_led_map("skull_1.lled");
        //logger_write("Broken heart: "+string(broken_heart_map));
        //logger_write("Skull: "+string(skull1_map));
    }
    else
    {
        is_logitech=false;
    }
}*/
alarm[0]=1;
alarm[1]=1;
instance_overlay=false;
instance_index[0]=-1;
instance_amount[0]=-1;
max_index_count=0;
/*var _c = color_fix(c_purple) | $FF000000;
show_message("Color: "+string(_c));*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Door Wait
door_wait=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alienwarer
/*
var r,g,b;
if (is_alienware)
{
    var LFX_FULL_BRIGHTNESS = $FF000000,LFX_ALL = $07FFFFFF;
    if (instance_exists(obj_Hero))
    {
        if (low_health)
        {
            if (!blink)
            {
                /*alienware_lfx_reset();
                alienware_lfx_light(ALIENWARE_LFX_POS_BIT_4,0);
                alienware_lfx_update();*/
            /*    alarm[2]=0.25*room_speed;
           }
            else
            {
                var ratio = obj_Hero.hp/obj_Hero.hpmax[obj_Hero.char];
                var color = color_fix(make_colour_hsv(85*(ratio),255,255));
                    
                color = color | $FF000000; //Because gms is a special flower, you must convert before
                //You invoke the dll. YOu also must use the absolute value for | elsewise, doubles will get in the way
                /*alienware_lfx_reset();
                alienware_lfx_light(ALIENWARE_LFX_POS_BIT_4,color);
                alienware_lfx_update();*/
            /*    alarm[2] = 0.5*room_speed;
            }
            blink=!blink;
        }
    }
}
/*if (is_logitech)
{
    if (instance_exists(obj_Hero))
    {
        if (low_health)
        {
            if (!blink)
            {
                logiled_set_lighting(0,0,0);
                alarm[2]=0.25*room_speed;
            }
            else
            {
                var ratio = obj_Hero.hp/obj_Hero.hpmax[obj_Hero.char];
                var color = color_fix(make_colour_hsv(85*(ratio),255,255));
                    
                color = color | $FF000000; //Because gms is a special flower, you must convert before
                //You invoke the dll. YOu also must use the absolute value for | elsewise, doubles will get in the way
                r=(colour_get_red(color)/255)*100;
                g=(colour_get_green(color)/255)*100;
                b=(colour_get_blue(color)/255)*100;
                logiled_set_lighting(r,g,b);
                alarm[2] = 0.5*room_speed;
            }
            blink=!blink;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAMEPAD SUPPORT LISTENER EVENT:
if (enabled_gamepad)
{
    //joystick_listen();
}
alarm[0]=1*room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (enabled_gamepad)
{
    /*gamepad_detect_update();
    gamepad_update();
    update_joysticks();
    triggerGamepadInit=true;
    gamepad_last_update++;*/
}
else
{
    if (triggerGamepadInit)
    {
        /*init_gamepad_joystick(4);
        triggerGamepadInit=false;
        gamepad_detected=false;
        joystick_detected=false;*/
    }
}
var LFX_FULL_BRIGHTNESS = $FF000000,LFX_ALL = $07FFFFFF;
var healthTrigger,ranTrigger;
var r,g,b;
healthTrigger=false;
ranTrigger=false;
var reset=false;

if (instance_exists(obj_Hero))
{
    if (last_player_health==-1)
    {
        last_player_health=obj_Hero.hp;
    }
    if (last_player_health!=obj_Hero.hp)
    {
        healthTrigger=true;
        last_player_health=obj_Hero.hp;
    }
}

if (room==Char_Select)
{
    if (lastChoice!=obj_Char_Select.ran_col &amp;&amp; obj_Char_Select.ran_col!=-1)
    {
        ranTrigger=true;
        lastChoice = obj_Char_Select.ran_col;
    }
}



/*
if (is_alienware)
{
    //alienware_lfx_reset();
    if (room==Game)
    {
        if (instance_exists(obj_Hero) || global.pause)
        {
            dead=false;
            if (healthTrigger)
            {
                var ratio = obj_Hero.hp/obj_Hero.hpmax[obj_Hero.char];
                var color = color_fix(make_colour_hsv(85*(ratio),255,255));
                
                logger_write("Color Before Mask= "+string(color));
                color = color | $FF000000; //Because gms is a special flower, you must convert before
                //You invoke the dll. YOu also must use the absolute value for | elsewise, doubles will get in the way
                
                //alienware_lfx_reset();
                reset=true;
                var resB;
                resB=alienware_lfx_light(ALIENWARE_LFX_POS_BIT_4,color);
                
                if (ratio&lt;=0.25)
                {
                    if (!low_health)
                    {
                        low_health=true;
                        alarm[2]=0.5*room_speed;
                        logger_write("Alien: Has entered low_health");
                    }
                }
                else
                {
                    low_health=false;
                    blink=false;
                }
            }
            
            if (!global.pause)
            {
                if (instance_exists(potion_obj))
                {
                    if (potion_obj.alarm[1]!=-1)
                    {
                        if (potion_color!=-1)
                        {
                            var c_potion = color_fix(potion_color);
                            c_potion = c_potion | $FF000000;
                            if (!reset)
                            {
                                alienware_lfx_reset();
                                reset=true;
                            }
                            alienware_lfx_light(ALIENWARE_LFX_POS_BIT_19,c_potion);
                        }
                    }
                    else
                    {
                        potion_color=-1;
                    }
                }
                else
                {
                    switch (obj_Hero.status)
                    {
                        case "rage":
                            var c_status = color_fix(c_red);
                            c_status = c_status | $FF000000;
                            if (!reset)
                            {
                                alienware_lfx_reset();
                                reset=true;
                            }
                            alienware_lfx_light(ALIENWARE_LFX_POS_BIT_19,c_status);
                        break;
                        case "invisible":
                            var c_status = color_fix(c_gray);
                            c_status = c_status | $FF000000;
                            if (!reset)
                            {
                                alienware_lfx_reset();
                                reset=true;
                            }
                            alienware_lfx_light(ALIENWARE_LFX_POS_BIT_19,c_status);
                        break;
                    }
                }
            }            
        }
        else
        {
            if (!dead)
            {
                logger_write("Player dead.");
                var c_death = color_fix(c_red);
                c_death = c_death | $FF000000;
                if (!reset)
                {
                    alienware_lfx_reset();
                    reset=true;
                }
                alienware_lfx_light(ALIENWARE_LFX_POS_BIT_4,c_death);
                low_health=false;
                blink=false;
                dead=true;
            }
        }
    }
    else if (room==Char_Select)
    {
        if (ranTrigger)
        {
            var c_choice = color_fix(obj_Char_Select.color[obj_Char_Select.ran_col])
            c_choice = c_choice | $FF000000;
            if (!reset)
            {
                alienware_lfx_reset();
                reset=true;
            }
            alienware_lfx_light(ALIENWARE_LFX_POS_BIT_4,c_choice);
        }
    }
    if (reset)
    {
        alienware_lfx_update();
    }
}
if (is_logitech)
{
    if (room==Game)
    {
        if (instance_exists(obj_Hero) || global.pause)
        {
            display_map=true;
            if (healthTrigger)
            {
                var ratio = obj_Hero.hp/obj_Hero.hpmax[obj_Hero.char];
                var color = make_colour_hsv(85*(ratio),255,255);
                
                r=(colour_get_red(color)/255)*100;
                g=(colour_get_green(color)/255)*100;
                b=(colour_get_blue(color)/255)*100;
                logiled_set_lighting(r,g,b);
                
                if (ratio&lt;=0.25)
                {
                    if (!low_health)
                    {
                        low_health=true;
                        alarm[2]=0.5*room_speed;
                        logger_write("Logi: Has entered low_health");
                    }
                }
                else
                {
                    low_health=false;
                    blink=false;
                }
            }
            
            if (!global.pause)
            {
                if (instance_exists(potion_obj))
                {
                    if (potion_obj.alarm[1]!=-1)
                    {
                        if (potion_color!=-1)
                        {
                            var c_potion = potion_color;
                            //c_potion = c_potion | $FF000000;
                            r=(colour_get_red(c_potion)/255)*100;
                            g=(colour_get_green(c_potion)/255)*100;
                            b=(colour_get_blue(c_potion)/255)*100;
                            logiled_set_lighting(r,g,b);
                        }
                    }
                    else
                    {
                        potion_color=-1;
                    }
                }
                else
                {
                    switch (obj_Hero.status)
                    {
                        case "rage":
                            var c_status = color_fix(c_red);
                            c_status = c_status | $FF000000;
                            //logiled_set_lighting((colour_get_red(c_potion)/255)*100,(colour_get_green(c_potion)/255)*100,(colour_get_blue(c_potion)/255)*100);
                        break;
                        case "invisible":
                            var c_status = color_fix(c_gray);
                            c_status = c_status | $FF000000;
                            //logiled_set_lighting((colour_get_red(c_potion)/255)*100,(colour_get_green(c_potion)/255)*100,(colour_get_blue(c_potion)/255)*100);
                        break;
                    }
                }
            }
        }
        else
        {
            if (display_map)
            {
                logger_write("Logi: Player dead.");
                var temp = choose("broken_heart.lled","skull_1.lled","rip.lled");
                //logger_write("Map: "+string(temp));
                logiled_set_lighting_from_map_file(temp);
                low_health=false;
                blink=false;
                display_map=false;
            }
        }
    }
    else if (room==Char_Select)
    {
        if (ranTrigger)
        {
            var c_choice = obj_Char_Select.color[obj_Char_Select.ran_col];
            //c_choice = c_choice | $FF000000;
            r=(colour_get_red(c_choice)/255)*100;
            g=(colour_get_green(c_choice)/255)*100;
            b=(colour_get_blue(c_choice)/255)*100;
            logiled_set_lighting(r,g,b);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("DGSC.ds"); //File that contains system configurations (not vital to the game, therefore should
//not be kept in the same file as gameplay data).
ini_write_real(GAMEPAD_SYSTEM,ENABLED_GAMEPAD,enabled_gamepad);
ini_close();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var r,g,b;
healthTrigger=false;
ranTrigger=false;
var reset=false;

if (instance_exists(obj_Hero))
{
    if (last_player_health==-1)
    {
        last_player_health=obj_Hero.hp;
    }
    if (last_player_health!=obj_Hero.hp)
    {
        healthTrigger=true;
        last_player_health=obj_Hero.hp;
    }
}
/*
r=(colour_get_red(color)/255)*100;
                g=(colour_get_green(color)/255)*100;
                b=(colour_get_blue(color)/255)*100;
                logiled_set_lighting(r,g,b);
*/
/*if (is_alienware)
{
    var LFX_FULL_BRIGHTNESS = $FF000000,LFX_ALL = $07FFFFFF;
    var _color; 
    if (room==Menu)
    {
        _color = color_fix(c_blue)|$FF000000; //Gms require for OR to be done
        //BEFORE alienware_lfx_light
        logger_write("START_MENU_COLOR="+string(_color));
        //alienware_lfx_reset();
        //alienware_lfx_light(LFX_ALL,_color);
        //alienware_lfx_update();
    }
    else if (room==Game)
    {
        if (instance_exists(obj_Hero))
        {
            if (healthTrigger)
            {
                var _color = color_fix(make_colour_hsv(85*(obj_Hero.hp/obj_Hero.hpmax[obj_Hero.char]),255,255));
                
                _color = _color|$FF000000;
                
                //alienware_lfx_reset();
                //alienware_lfx_light(ALIENWARE_LFX_POS_BIT_4,_color);
                //alienware_lfx_update();
            }
        }
    }
}
if (is_logitech)
{
    var _color; 
    if (room==Menu)
    {
        _color = c_blue;
        logger_write("LOGI: START_MENU_COLOR="+string(_color));
        r=(colour_get_red(_color)/255)*100;
        g=(colour_get_green(_color)/255)*100;
        b=(colour_get_blue(_color)/255)*100;
        //logiled_set_lighting(r,g,b);
    }
    else if (room==Game)
    {
        if (instance_exists(obj_Hero))
        {
            if (healthTrigger)
            {
                var _color = color_fix(make_colour_hsv(85*(obj_Hero.hp/obj_Hero.hpmax[obj_Hero.char]),255,255));
                
                
                r=(colour_get_red(_color)/255)*100;
                g=(colour_get_green(_color)/255)*100;
                b=(colour_get_blue(_color)/255)*100;
                //logiled_set_lighting(r,g,b);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (is_alienware)
{
    alienware_lfx_release();
}
if (is_logitech)
{
    logiled_shutdown();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_overlay)
{
    draw_set_font(font0);
    draw_set_color(c_white);
    max_index_count = 0;
    with (all)
    {
        var present=false;
        var i;
        for (i=0;i&lt;other.max_index_count &amp;&amp; !present;i++)
        {
            if (object_index==other.instance_index[i])
            {
                present = true;
            }
        }
        i--;
        if (!present)
        {
            other.instance_index[other.max_index_count]=object_index;
            other.instance_amount[other.max_index_count]=1;
            other.max_index_count++;
        }
        else
        {
            other.instance_amount[i]++;
        }
    }
    var str;
    for (var i=0;i&lt;max_index_count;i++)
    {
        str=string(i)+"="+object_get_name(instance_index[i])+"("+string(instance_amount[i])+")";
        draw_text(floor(i*0.033)*128,(i*8)-floor(i/30)*view_hview[0],str);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Item_Init();
/*repeat (3)
{
    var ing = choose(obj_Metal_Scrap,obj_Fire_Shard,obj_Magic_Dust,obj_Magic_Essence,obj_Ice_Shard);
    ing_val=1;
    switch (ing)
    {
        case obj_Metal_Scrap:
            ing_val=irandom_range(10,20);
        break;
        case obj_Fire_Shard:
            ing_val=irandom_range(2,3);
        break;
        case obj_Ice_Shard:
            ing_val=irandom_range(2,3);
        break;
        case obj_Magic_Dust:
            ing_val=irandom_range(10,20);
        break;
        case obj_Magic_Essence:
            ing_val=irandom_range(5,10);
        break;
    }
    
    ing_val*=global.loop;
    
    with (instance_create(mouse_x,mouse_y,ing))
    {
        speed = 2+random(2)/2;
        direction = random(360);
        friction = 0.2;
        value = other.ing_val
    }
}*/
/*if (room!=Game)
{
    for (var i=0;i&lt;10;i++)
    {
        unlocked[i]=true;
        rank[i]=0;
    }
    var mess = "All Characters Unlocked (Press Cheat)";
    //display_message(view_wview[0]*0.5,view_hview[0]*0.5,mess,3*room_speed,false);
    add_notification(spr_Lamina_Studios_Logo,57,"All Characters Unlocked (Press Cheat)",3);
}*/
//instance_create(mouse_x,mouse_y,obj_Cursed_Chest);
with (instance_create(mouse_x,mouse_y,obj_Potion_Pouch))
{
    item_price = 0;
    speed = 3;
    direction = random(360);
    friction = 0.2;
}
/*with (instance_create(mouse_x,mouse_y,Drop_Common()))
{
    item_price = 0;
    speed = 3;
    direction = random(360);
    friction = 0.2;
}*/
//instance_create(mouse_x,mouse_y,obj_Golden_Shelf);
/*var cangle = irandom(360);
spawn_lightning_position(mouse_x,mouse_y,mouse_x+64*cos(cangle),mouse_y-64*sin(cangle),0.05,4,8,true,DS_LBLUE,c_black);*/
/*with (instance_create(mouse_x,mouse_y,Drop_Rare_Recipe()))
{
    item_price = 0;
    speed = 3;
    direction = random(360);
    friction = 0.2;
}*/
/*var ing_type = get_random_ingredient();
var amount = irandom_range(10,20);
add_ingredient(ing_type,amount);
PopupB("Spawned "+string(amount)+"x"+get_ingredient_name(ing_type)+"!",c_aqua);*/

//instance_create(mouse_x,mouse_y,obj_Explosive_Slime);obj_Hero.atk_dam[global.choice]      = 999;
obj_Hero.atk_dam[global.choice]      = 9999;
obj_Hero.mag_dam[global.choice]      = 9999;
obj_Hero.defense[global.choice]      = 9999;
obj_Hero.mresist[global.choice]      = 9999;
//Spawn(mouse_x,mouse_y,obj_Skeleton);
//obj_Hero.wlk_spd[global.choice]      += 0.5;
//instance_create(mouse_x,mouse_y,obj_Saw_Blade);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
