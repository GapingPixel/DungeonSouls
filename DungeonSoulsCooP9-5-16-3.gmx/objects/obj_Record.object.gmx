<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar fixedBackupMechanism,arcaneReset,hardReset,backup_file_name,desync_time,max_desync_time,base_max_desync_time; //The amount of time that the backup is not in-sync with the current
//save file.
hardReset=true;
arcaneReset=true;
fixedBackupMechanism=true;
base_max_desync_time=120;
max_desync_time=base_max_desync_time; //Max desync time allowed (in seconds)
desync_time=-1;
backup_file_name="DGS.back.ds";
max_autosave_time = 240; //Max autosave time in seconds.
autosave_time = max_autosave_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (desync_time!=-1)
{
    if (desync_time&lt;max_desync_time)
    {
        desync_time+=1/room_speed;
    }
    else
    {
        desync_time=-1;
        max_desync_time=base_max_desync_time; //Reset to normal waiting time.
        //The more times someone saves, the more frequent the next backup will be
        backUpData(backup_file_name);
    }
}
if (room==Game)
{
    if (autosave_time&gt;0)
    {
        autosave_time-=1/room_speed;
    }
    else
    {
        Save_Stats();
        save_ingredients();
        autosave_time=max_autosave_time;
        //display_message(view_xview[0]+view_wview[0]*0.5,view_yview[0]+view_hview[0]*0.9,"Autosaving complete",3,false);
    }
}
else
{
    autosave_time=max_autosave_time;
}

if (global.en_kills&gt;500)
{
    if (!unlocked[8])
    {
        unlocked[8]=1;
        rank[8]=0;
        add_notification(spr_Frame,8,"Brawler unlocked!",3);
        Save_Stats();
    }
}

///Steam Achievement
if  (global.coins = 1000000) {
    if ( global.steam_api) {
       if (!steam_get_achievement("Gold Swimming ")) then steam_set_achievement("Gold Swimming");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.TYPE = choose(1,2);
if room != Game
{
    global.coin = 0;
    global.kills = 0;
}else
{
    global.mark = 0;
    if global.tutorial == false
    {
        if global.dungeon_name != SECRET1
        {
            global.dungeon+=1;    
        }
            global.boss_rm += 1;    
        if global.boss_rm &gt; 3
        {
            global.boss_rm = 1;
        }
    }else
    {
        global.tutorial_lvl += 1;
    }            
    
    if global.dungeon &gt; global.highest_levelB
    {
        global.highest_level = global.dungeon_name;
        global.highest_levelB = global.dungeon;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Char_Stats();
Save_Settings();
Save_Stats();
save_ingredients();
save_forge_items();
save_hero_weapons();
save_recipes();
ds_map_destroy(global.keys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.version = "";
global.dungeon = 0;
global.boss_rm = 0;
global.tutorial = false;
global.tutorial_lvl = 0;
global.tutorial_lvl_max = 9;
global.loop = 1;
global.difficulty = "Normal";
global.choice = 0;
global.choiceb = 0;
global.coins = 0;
global.props_destroyed = 0;
global.light = true;
global.kills = 0;
global.LVLMUSIC = snd_back1;
//CONTROLLER
global.xbsensitivity = 48;
global.xbIndex = 0;
global.xbconnected = false;

globalvar rank,unlocked;
fix_broken_arcane_forge();
Load_Stats();
//
forge_init_items();
init_ingredients();
init_recipes();
init_hero_weapons();

global.keys = ds_map_create();
global.ckeys = ds_map_create();
Load_Settings();
window_set_fullscreen(global.full_screen);
switch(global.screen_size)
{
    case 0:
        window_set_size(640,480);
        break;
    case 1:
        window_set_size(800,600);
        break;
    case 2:
        window_set_size(1024,768);            
        break;
    case 3:   
        window_set_size(1280,720);
        break;
    case 4:   
        window_set_size(1360,768);                         
        break;
    case 5:
        window_set_size(1366,768);            
        break;
    case 6:
        window_set_size(1920,1080);
        break;
    case 7:
        window_set_size(2560,1440);
        break;
    default:
        window_set_size(640,480);
        break;        
}
load_ingredients();
load_known_recipes();
load_forge_inventory();
display_reset(display_aa,global.vertical_sync);
//cursor_sprite = spr_Mouse_Cursor

//keyboard_set_map(ord("Y"),ord("Z"));
//keyboard_set_map(ord("W"),ord("Z"));
//keyboard_set_map(ord("Z"),ord("W"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="120">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_save(working_directory + "\Screens\Screen_"+string(global.image_num)+".png")
global.image_num += 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
