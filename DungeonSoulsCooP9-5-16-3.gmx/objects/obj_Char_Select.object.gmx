<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Vars
Char_Stats();
n=0;
hero_name = "";
choice = 0;
falpha = 1;
arry[0] = 0;
arry[1] = 0;
arry[2] = 0;
rank_cost = 1;
passive = false;
pas_alpha = 0;
pas_yy = -240;
hctr = 0;
hh = 0;
size = 1; //Controller Sprites
state = 1;
depth = -room_height*20;
global.gp_cur = 0;

//GAME CONTROLLER SUPPORT SECTION
wait_gamepad=true; //Due to the way the joystick/gamepad pressed mechanic is made, the
//character select must wait 1 tick for the event to refresh.
alarm[0]=2;
ran_col=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The gamepad event can be used now.
wait_gamepad=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Single Player /Coop Select
n+=1;
background_alpha[0] = 0.5;

if ( instance_exists(obj_Char_Select_FO) ) {
    if ( falpha &gt; 0 ) {
        falpha -= 0.02;
        background_y[1] += .5;
    } else {
        falpha = 0;
    }
}

/*Single Player*/ 
scr_char_sel_single_player();
/*CooP*/

//Arry
if ( arry[0] &gt; 0 ) then arry[0] -= 1;
if ( arry[1] &gt; 0 ) then arry[1] -= 1;
if ( arry[2] &gt; 0 ) then arry[2] -= 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wview,view_hview);
draw_set_alpha(falpha);
draw_set_font(font0);
draw_set_color(c_gray);
draw_set_halign(fa_center);

if ( choice != -1 ) {
    ran_col=choice;       
    if ( unlocked[choice] == true ) { 
        //RANK
        draw_text(view_wview/2-120,view_hview/2-32+48+8,"RANK");
        
        if (mouse_x &gt; view_wview/2 - 32 &amp;&amp; mouse_x &lt; view_wview/2 + 32) &amp;&amp; (mouse_y &gt; 40 - 32 &amp;&amp; mouse_y &lt; 40 + 32) {   
            Rank_Grant();
        }else {
            draw_sprite(spr_Rank_Icons,rank[choice],view_wview/2,40+(sin(n/30)*2));
            draw_text(view_wview/2,8,"CHOOSE YOUR HERO");
        } 
                
        draw_set_halign(false)
        if rank[choice] != 5
            draw_text(view_wview/2-128,view_hview/2-32+64,string((rank_title[rank[choice]]))+" ["+string(floor(global.rank_cur_point[choice]))+"/"+string(rank_point[rank[choice]])+"]")
        else
            draw_text(view_wview/2-128,view_hview/2-32+64,string((rank_title[rank[choice]])));
        var sx = -2;var sxx = -2;
        repeat(5){draw_sprite(spr_Star,1,view_wview/2-110+24+(sxx*8),(view_hview/2)-32+60);sxx += 1;}        
        repeat(rank[choice]){draw_sprite(spr_Star,0,view_wview/2-110+24+(sx*8),(view_hview/2)-32+60);sx += 1;}

        draw_set_halign(fa_center);
        draw_set_color(color[choice]);
        draw_text(view_wview/2,55,name[choice]);
        draw_set_color(c_gray);
        draw_text(view_wview/2,62,bio[choice]);  
          
        draw_set_alpha(1);   
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_walk[choice],0/*(n/2)*/,view_wview/2,(view_hview/2)-16-8+sin(n/10)*3,1,1,0,c_aqua,0.6);
        draw_set_blend_mode(bm_normal);
        draw_sprite(spr_dead[choice],sprite_get_number(spr_dead[choice])-1/*(n/2)*/,view_wview/2,(view_hview/2)-8);
        draw_set_alpha(falpha)
                
        //SKILLS
        draw_set_halign(fa_left)
        draw_text(view_wview/2-110,(view_hview/2-8)-32,"SKILLS")
        
        draw_set_color(color[choice]);
        draw_text(view_wview/2-110,view_hview/2-32,sk_name[choice]);
        draw_text(view_wview/2-110,view_hview/2-32+16,sk_nameB[choice]);
        draw_text(view_wview/2-110,view_hview/2-32+32,sk_nameC[choice]);
        
        draw_set_color(c_gray)
        draw_text(view_wview/2-110,view_hview/2-32+8,"CD: "+string(cooldown[choice]/60)+"sec");
        draw_text(view_wview/2-110,view_hview/2-32+16+8,"CD: "+string(cooldownB[choice]/60)+"sec");
        draw_text(view_wview/2-110,view_hview/2-32+32+8,"CD: "+string(cooldownC[choice]/60)+"sec");
    
        draw_sprite(spr_Skill_Border,choice,view_wview/2-128,view_hview/2-32);
        draw_sprite(spr_Skill_Border,choice,view_wview/2-128,view_hview/2-32+16);
        draw_sprite(spr_Skill_Border,choice,view_wview/2-128,view_hview/2-32+32);
                
        draw_sprite(spr_Skill_A_New,choice,view_wview/2-128,view_hview/2-32);
        draw_sprite(spr_Skill_B_New,choice,view_wview/2-128,view_hview/2-32+16);
        draw_sprite(spr_Skill_C,choice,view_wview/2-128,view_hview/2-32+32);   
        if ( passive == false ) then Skill_Desc_Display();
        draw_set_color(c_gray);
        draw_set_alpha(falpha); 
            
        //STATS
        draw_text(view_wview/2+40,(view_hview/2-8)-32,"STATS")
        draw_text(view_wview/2+40,(view_hview/2)-32+2,"HP")
        draw_text(view_wview/2+40,(view_hview/2)-32+8+5,"ATK");   draw_text(view_wview/2+90,(view_hview/2)-32+8+5,"MAG")
        draw_text(view_wview/2+40,(view_hview/2)-32+16+8,"DEF");  draw_text(view_wview/2+90,(view_hview/2)-32+16+8,"RES")
        draw_text(view_wview/2+40,(view_hview/2)-32+24+11,"SPD"); draw_text(view_wview/2+90,(view_hview/2)-32+24+11,"ACC")
        
        draw_set_color(c_gray);
        draw_sprite(spr_StatsB,0,view_wview/2+56,(view_hview/2)-32);       
        if dam_bon[choice] &gt; 0 var attack = string(atk_dam[choice])+"+"+string(dam_bon[choice]) else var attack = string(atk_dam[choice])
        if def_bon[choice] &gt; 0 var def = string(defense[choice])+"+"+string(def_bon[choice]) else var def = string(defense[choice])
        if mag_bon[choice] &gt; 0 var magic = string(mag_dam[choice])+"+"+string(mag_bon[choice]) else var magic = string(mag_dam[choice])
        if mr_bon[choice] &gt; 0 var resist = string(mresist[choice])+"+"+string(mr_bon[choice]) else var resist = string(mresist[choice])        
        if acc_bon[choice] &gt; 0 var acc = string(accuracy[choice])+"+"+string(acc_bon[choice]) else var acc = string(accuracy[choice])
        
        draw_text(view_wview/2+52+16,view_hview/2-32+2,string(hpmax[choice]));    
        draw_text(view_wview/2+52+16,view_hview/2-32+8+5,attack);                             draw_text(view_wview/2+90+28,view_hview/2-32+8+5,magic);
        draw_text(view_wview/2+52+16,view_hview/2-32+16+8,def);                               draw_text(view_wview/2+90+28,view_hview/2-32+16+8,resist);
        draw_text(view_wview/2+52+16,view_hview/2-32+24+11,string(min((wlk_spd[choice]),3))); draw_text(view_wview/2+90+28,view_hview/2-32+24+11,string(acc)+"%");
        
    } else {
        //LOCKED!!!!
        draw_set_color(color[choice]);
        draw_text(view_wview/2,48,"UNKNOWN HERO");
        draw_set_color(c_gray);
        draw_text(view_wview/2,55,unlock_text[choice]);  
          
        draw_set_alpha(1);   
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_walk[choice],0/*(n/2)*/,view_wview/2,(view_hview/2)-16-8+sin(n/10)*3,1,1,0,c_black,0.6);
        draw_set_blend_mode(bm_normal);
        draw_sprite_ext(spr_dead[choice],sprite_get_number(spr_dead[choice])-1/*(n/2)*/,view_wview/2,(view_hview/2)-8,1,1,0,c_black,1);
        if ( global.soul_orb &gt; 0 ) then draw_sprite(spr_Soul_Orb_Main,0,view_wview/2,(view_hview/2)-8+(sin(n/20)*2));
        draw_set_alpha(falpha)

        //RANK
        draw_text(view_wview/2-120,view_hview/2-32+48+8,"RANK");
        var sx = -2;var sxx = -2;
        repeat(5){draw_sprite(spr_Star,1,view_wview/2-110+24+(sxx*8),(view_hview/2)-32+60);sxx += 1;}        
                    
        //SKILLS
        draw_set_halign(fa_left)
        draw_text(view_wview/2-110,(view_hview/2-8)-32,"SKILLS")
        
        draw_set_color(color[choice]);
        draw_text(view_wview/2-110,view_hview/2-32,"???");
        draw_text(view_wview/2-110,view_hview/2-32+16,"???");
        draw_text(view_wview/2-110,view_hview/2-32+32,"???");
        
        draw_set_color(c_gray)
        draw_text(view_wview/2-110,view_hview/2-32+8,"CD: ??? sec");
        draw_text(view_wview/2-110,view_hview/2-32+16+8,"CD: ??? sec");
        draw_text(view_wview/2-110,view_hview/2-32+32+8,"CD: ??? sec");
    
        draw_sprite(spr_Skill_Border,choice,view_wview/2-128,view_hview/2-32)
        draw_sprite(spr_Skill_Border,choice,view_wview/2-128,view_hview/2-32+16)
        draw_sprite(spr_Skill_Border,choice,view_wview/2-128,view_hview/2-32+32)
                
        draw_sprite(spr_Skill_Unknown,0,view_wview/2-128,view_hview/2-32)
        draw_sprite(spr_Skill_Unknown,0,view_wview/2-128,view_hview/2-32+16)
        draw_sprite(spr_Skill_Unknown,0,view_wview/2-128,view_hview/2-32+32)    
        draw_set_color(c_gray)
        draw_set_alpha(falpha);
     
            
        //STATS
        draw_text(view_wview/2+40,(view_hview/2-8)-32,"STATS")
        draw_text(view_wview/2+40,(view_hview/2)-32+2,"HP")
        draw_text(view_wview/2+40,(view_hview/2)-32+8+5,"ATK");   draw_text(view_wview/2+90,(view_hview/2)-32+8+5,"MAG")
        draw_text(view_wview/2+40,(view_hview/2)-32+16+8,"DEF");  draw_text(view_wview/2+90,(view_hview/2)-32+16+8,"RES")
        draw_text(view_wview/2+40,(view_hview/2)-32+24+11,"SPD"); draw_text(view_wview/2+90,(view_hview/2)-32+24+11,"ACC")
        
        draw_set_color(c_gray);
        draw_sprite(spr_StatsB,0,view_wview/2+56,(view_hview/2)-32);        
        draw_text(view_wview/2+52+16,view_hview/2-32+2,"???");    
        draw_text(view_wview/2+52+16,view_hview/2-32+8+5,"???");   draw_text(view_wview/2+90+28,view_hview/2-32+8+5,"???");
        draw_text(view_wview/2+52+16,view_hview/2-32+16+8,"???");  draw_text(view_wview/2+90+28,view_hview/2-32+16+8,"???");
        draw_text(view_wview/2+52+16,view_hview/2-32+24+11,"???"); draw_text(view_wview/2+90+28,view_hview/2-32+24+11,"???");   
    }
       
} else {
    var ran = Random(0,maxchar);
    ran = Random(0,maxchar);
    while(unlocked[ran] == false)
        ran = Random(0,maxchar);    
    ran_col=ran;
    if ( unlocked[ran] == true ) {    
        draw_set_color(c_gray);
        draw_text(view_wview/2,48,"RANDOM");
        draw_set_color(c_gray);
        draw_text(view_wview/2,55,"???");
        
        //HERO
        draw_set_alpha(1)
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_walk[ran],0/*(n/2)*/,view_wview/2,(view_hview/2)-16-8+sin(n/10)*3,1,1,0,c_aqua,0.6);
        draw_set_blend_mode(bm_normal);
        draw_sprite(spr_dead[ran],sprite_get_number(spr_dead[ran])-1/*(n/2)*/,view_wview/2,(view_hview/2)-8);    
        draw_set_alpha(falpha)

        //RANK
        draw_text(view_wview/2-120,view_hview/2-32+48+8,"RANK");
        //draw_sprite(spr_RankUp,0,view_wview/2-128,view_hview/2-32+56)    
        var sx = -2;var sxx = -2;
        repeat(5){draw_sprite(spr_Star,1,view_wview/2-110+24+(sxx*8),(view_hview/2)-32+60);sxx += 1;}        
        repeat(rank[ran]){draw_sprite(spr_Star,0,view_wview/2-110+24+(sx*8),(view_hview/2)-32+60);sx += 1;}         
                    
        //SKILLS
        draw_set_halign(fa_left)
        draw_text(view_wview/2-110,(view_hview/2-8)-32,"SKILLS")
        
        draw_set_color(color[ran]);
        draw_text(view_wview/2-110,view_hview/2-32,sk_name[ran]);
        draw_text(view_wview/2-110,view_hview/2-32+16,sk_nameB[ran]);
        draw_text(view_wview/2-110,view_hview/2-32+32,sk_nameC[ran]);    
        
        draw_set_color(c_gray)
        draw_text(view_wview/2-110,view_hview/2-32+8,"CD: "+string(cooldown[ran]/60)+"sec");
        draw_text(view_wview/2-110,view_hview/2-32+16+8,"CD: "+string(cooldownB[ran]/60)+"sec");
        draw_text(view_wview/2-110,view_hview/2-32+32+8,"CD: "+string(cooldownC[ran]/60)+"sec");    
        
        draw_sprite(spr_Skill_Border,ran,view_wview/2-128,view_hview/2-32)
        draw_sprite(spr_Skill_Border,ran,view_wview/2-128,view_hview/2-32+16)
        draw_sprite(spr_Skill_Border,ran,view_wview/2-128,view_hview/2-32+32)
            
        draw_sprite(spr_Skill_A_New,ran,view_wview/2-128,view_hview/2-32)
        draw_sprite(spr_Skill_B_New,ran,view_wview/2-128,view_hview/2-32+16)
        draw_sprite(spr_Skill_C,ran,view_wview/2-128,view_hview/2-32+32)
    
        //STATS
        draw_text(view_wview/2+40,(view_hview/2-8)-32,"STATS")
        draw_text(view_wview/2+40,(view_hview/2)-32+2,"HP")
        draw_text(view_wview/2+40,(view_hview/2)-32+8+5,"ATK");   draw_text(view_wview/2+90,(view_hview/2)-32+8+5,"MAG")
        draw_text(view_wview/2+40,(view_hview/2)-32+16+8,"DEF");  draw_text(view_wview/2+90,(view_hview/2)-32+16+8,"RES")
        draw_text(view_wview/2+40,(view_hview/2)-32+24+11,"SPD"); draw_text(view_wview/2+90,(view_hview/2)-32+24+11,"ACC")
        
        draw_set_color(c_gray);
        draw_sprite(spr_StatsB,0,view_wview/2+56,(view_hview/2)-32);
        if dam_bon[ran] &gt; 0 var attack = string(atk_dam[ran])+"+"+string(dam_bon[ran]) else var attack = string(atk_dam[ran])
        if def_bon[ran] &gt; 0 var def = string(defense[ran])+"+"+string(def_bon[ran]) else var def = string(defense[ran])
        if mag_bon[ran] &gt; 0 var magic = string(mag_dam[ran])+"+"+string(mag_bon[ran]) else var magic = string(mag_dam[ran])
        if mr_bon[ran] &gt; 0 var resist = string(mresist[ran])+"+"+string(mr_bon[ran]) else var resist = string(mresist[ran])         
        if acc_bon[ran] &gt; 0 var acc = string(accuracy[ran])+"+"+string(acc_bon[ran]) else var acc = string(accuracy[ran])
        
        draw_text(view_wview/2+52+16,view_hview/2-32+2,string(hpmax[ran]));    
        draw_text(view_wview/2+52+16,view_hview/2-32+8+5,attack);                          draw_text(view_wview/2+90+28,view_hview/2-32+8+5,magic);
        draw_text(view_wview/2+52+16,view_hview/2-32+16+8,def);                            draw_text(view_wview/2+90+28,view_hview/2-32+16+8,resist);
        draw_text(view_wview/2+52+16,view_hview/2-32+24+11,string(min((wlk_spd[ran]),3))); draw_text(view_wview/2+90+28,view_hview/2-32+24+11,string(acc)+"%");
        draw_set_halign(fa_center);
    } else {
        //LOCKED!!!!
        draw_set_color(color[ran]);
        draw_text(view_wview/2,48,"UNKNOWN HERO");
        draw_set_color(c_gray);
        draw_text(view_wview/2,55,"Locked");  
          
        draw_set_alpha(1);   
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_walk[ran],0/*(n/2)*/,view_wview/2,(view_hview/2)-16-8+sin(n/10)*3,1,1,0,c_black,0.6);
        draw_set_blend_mode(bm_normal);
        draw_sprite_ext(spr_dead[ran],sprite_get_number(spr_dead[ran])-1/*(n/2)*/,view_wview/2,(view_hview/2)-8,1,1,0,c_black,1);        
        draw_set_alpha(falpha)
    
        //SKILLS
        draw_set_halign(fa_left)
        draw_text(view_wview/2-110,(view_hview/2-8)-32,"SKILLS")
        
        draw_set_color(color[ran]);
        draw_text(view_wview/2-110,view_hview/2-32,"???");
        draw_text(view_wview/2-110,view_hview/2-32+16,"???");
        draw_text(view_wview/2-110,view_hview/2-32+32,"???");
        
        draw_set_color(c_gray)
        draw_text(view_wview/2-110,view_hview/2-32+8,"CD: ??? sec");
        draw_text(view_wview/2-110,view_hview/2-32+16+8,"CD: ??? sec");
        draw_text(view_wview/2-110,view_hview/2-32+32+8,"CD: ??? sec");
    
        draw_sprite(spr_Skill_Border,ran,view_wview/2-128,view_hview/2-32)
        draw_sprite(spr_Skill_Border,ran,view_wview/2-128,view_hview/2-32+16)
        draw_sprite(spr_Skill_Border,ran,view_wview/2-128,view_hview/2-32+32)
                
        draw_sprite(spr_Skill_Unknown,0,view_wview/2-128,view_hview/2-32)
        draw_sprite(spr_Skill_Unknown,0,view_wview/2-128,view_hview/2-32+16)
        draw_sprite(spr_Skill_Unknown,0,view_wview/2-128,view_hview/2-32+32)    
        draw_set_color(c_gray)
        draw_set_alpha(falpha);
        //RANK
        draw_text(view_wview/2-120,view_hview/2-32+48+8,"RANK");
        //draw_sprite(spr_RankUp,0,view_wview/2-128,view_hview/2-32+56)    
        var sx = -2;var sxx = -2;
        repeat(5){draw_sprite(spr_Star,1,view_wview/2-110+16+(sxx*8),(view_hview/2)-32+60+8);sxx += 1;}        
        repeat(rank[ran]){draw_sprite(spr_Star,0,view_wview/2-110+16+(sx*8),(view_hview/2)-32+60+8);sx += 1;} 
            
        
        //STATS
        draw_text(view_wview/2+40,(view_hview/2-8)-32,"STATS")
        draw_text(view_wview/2+40,(view_hview/2)-32+2,"HP")
        draw_text(view_wview/2+40,(view_hview/2)-32+8+5,"ATK");   draw_text(view_wview/2+120,(view_hview/2)-32+8+5,"MAG")
        draw_text(view_wview/2+40,(view_hview/2)-32+16+8,"DEF");  draw_text(view_wview/2+120,(view_hview/2)-32+16+8,"RES")
        draw_text(view_wview/2+40,(view_hview/2)-32+24+11,"SPD"); draw_text(view_wview/2+120,(view_hview/2)-32+32+11,"ACC")        
        
        draw_set_color(c_gray);
        draw_sprite(spr_StatsB,0,view_wview/2+64,(view_hview/2)-32);        
        draw_text(view_wview/2+64+16,view_hview/2-32+2,"???");    
        draw_text(view_wview/2+64+16,view_hview/2-32+8+5,"???");
        draw_text(view_wview/2+64+16,view_hview/2-32+16+8,"???");
        draw_text(view_wview/2+64+16,view_hview/2-32+24+11,"???");
        draw_text(view_wview/2+64+16,view_hview/2-32+32+14,"???");    
    }
    
      
}

draw_set_color(c_yellow);
draw_set_halign(fa_left);
//draw_text(0,0,choice);
//draw_text(view_wview/2+64+18,view_hview/2-32+40+17,string(floor(global.total_coins)));
//draw_text(view_wview/2,view_hview/2+64,"Coins: "+string(global.total_coins))
draw_sprite(spr_Passives_Button,0,view_wview/2+56,view_hview/2+14)
//draw_sprite(spr_Passives_Button,1,view_wview/2+64,view_hview/2+48)
draw_sprite(spr_Difficulty_Flag,0,view_wview/2-96,view_hview-32);
draw_sprite(spr_Difficulty_Flag,1,view_wview/2-72,view_hview-32);
draw_sprite(spr_Difficulty_Flag,2,view_wview/2-48,view_hview-32);
draw_sprite(spr_Difficulty_Flag,3,view_wview/2-24,view_hview-32);
if global.difficulty == "Easy" draw_sprite(spr_Difficulty_Icon_Highlight,0,view_wview/2-96,view_hview-32);
else if global.difficulty == "Normal" draw_sprite(spr_Difficulty_Icon_Highlight,1,view_wview/2-72,view_hview-32);
else if global.difficulty == "Nightmare" draw_sprite(spr_Difficulty_Icon_Highlight,2,view_wview/2-48,view_hview-32);
else if global.difficulty == "Impossible" draw_sprite(spr_Difficulty_Icon_Highlight,3,view_wview/2-24,view_hview-32);
Difficulty_Draw_Desc();
draw_set_halign(fa_center);
draw_sprite(spr_Difficulty_Icon,0,view_wview/2-96,view_hview-32);
draw_sprite(spr_Difficulty_Icon,1,view_wview/2-72,view_hview-32);
draw_sprite(spr_Difficulty_Icon,2,view_wview/2-48,view_hview-32);
draw_sprite(spr_Difficulty_Icon,3,view_wview/2-24,view_hview-32);

//LOCKED
if !global.easy then draw_sprite(spr_Difficulty_Flag_Lock,0,view_wview/2-96,view_hview-32);
if !global.normal then draw_sprite(spr_Difficulty_Flag_Lock,1,view_wview/2-72,view_hview-32);
if !global.nightmare then draw_sprite(spr_Difficulty_Flag_Lock,2,view_wview/2-48,view_hview-32);
if !global.impossible then draw_sprite(spr_Difficulty_Flag_Lock,3,view_wview/2-24,view_hview-32);

if !global.easy then draw_sprite(spr_Difficulty_Icon_Lock,0,view_wview/2-96,view_hview-32);
if !global.normal then draw_sprite(spr_Difficulty_Icon_Lock,1,view_wview/2-72,view_hview-32);
if !global.nightmare then draw_sprite(spr_Difficulty_Icon_Lock,2,view_wview/2-48,view_hview-32);
if !global.impossible then draw_sprite(spr_Difficulty_Icon_Lock,3,view_wview/2-24,view_hview-32);

draw_set_color(c_gray)
draw_text(view_wview/2-64,view_hview/2-32+64+32,"DIFFICULTY");
draw_set_halign(false);
with ( obj_Circle_Part ) {
    event_perform(ev_draw,0);
}

        
//PASSIVES
draw_set_alpha(pas_alpha/1.2)
draw_set_color(c_black);
draw_rectangle(0,0,view_wview,view_hview,false)
draw_set_alpha(1);
draw_set_alpha(pas_alpha)
draw_sprite(spr_Passives_Tab,0,view_wview/2,view_hview/2)

draw_sprite_stretched(spr_Passive_Fill,0,136,123,       ((min(global.passive[0],PASSIVE_MAX))/PASSIVE_MAX)*14,3);
draw_sprite_stretched(spr_Passive_Fill,0,136+(15+1),123,((min(global.passive[1],PASSIVE_MAX))/PASSIVE_MAX)*14,3);
draw_sprite_stretched(spr_Passive_Fill,0,136+(30+2),123,((min(global.passive[2],PASSIVE_MAX))/PASSIVE_MAX)*14,3);

draw_sprite_stretched(spr_Passive_Fill,0,136,142,       ((min(global.passive[3],PASSIVE_MAX))/PASSIVE_MAX)*14,3);
draw_sprite_stretched(spr_Passive_Fill,0,136+(15+1),142,((min(global.passive[4],PASSIVE_MAX))/PASSIVE_MAX)*14,3);
draw_sprite_stretched(spr_Passive_Fill,0,136+(30+2),142,((min(global.passive[5],PASSIVE_MAX))/PASSIVE_MAX)*14,3);

draw_sprite_stretched(spr_Passive_Fill,0,136,161,       ((min(global.passive[6],PASSIVE_MAX))/PASSIVE_MAX)*14,3);
draw_sprite_stretched(spr_Passive_Fill,0,136+(15+1),161,((min(global.passive[7],PASSIVE_MAX))/PASSIVE_MAX)*14,3);
draw_sprite_stretched(spr_Passive_Fill,0,136+(30+2),161,((min(global.passive[8],PASSIVE_MAX))/PASSIVE_MAX)*14,3);

draw_set_color(c_black)
draw_text(136+8+1,123-8+1,string(min(global.passive[0],PASSIVE_MAX)))
draw_text(136+(15+1)+8+1,123-8+1,string(min(global.passive[1],PASSIVE_MAX)))
draw_text(136+(30+2)+8+1,123-8+1,string(min(global.passive[2],PASSIVE_MAX)))
draw_text(136+8+1,142-8+1,string(min(global.passive[3],PASSIVE_MAX)))
draw_text(136+(15+1)+8+1,142-8+1,string(min(global.passive[4],PASSIVE_MAX)))
draw_text(136+(30+2)+8+1,142-8+1,string(min(global.passive[5],PASSIVE_MAX)))
draw_text(136+8+1,161-8+1,string(min(global.passive[6],PASSIVE_MAX)))
draw_text(136+(15+1)+8+1,161-8+1,string(min(global.passive[7],PASSIVE_MAX)))
draw_text(136+(30+2)+8+1,161-8+1,string(min(global.passive[8],PASSIVE_MAX)))
draw_set_color(c_white)
draw_text(136+8,123-8,string(min(global.passive[0],PASSIVE_MAX)))
draw_text(136+(15+1)+8,123-8,string(min(global.passive[1],PASSIVE_MAX)))
draw_text(136+(30+2)+8,123-8,string(min(global.passive[2],PASSIVE_MAX)))
draw_text(136+8,142-8,string(min(global.passive[3],PASSIVE_MAX)))
draw_text(136+(15+1)+8,142-8,string(min(global.passive[4],PASSIVE_MAX)))
draw_text(136+(30+2)+8,142-8,string(min(global.passive[5],PASSIVE_MAX)))
draw_text(136+8,161-8,string(min(global.passive[6],PASSIVE_MAX)))
draw_text(136+(15+1)+8,161-8,string(min(global.passive[7],PASSIVE_MAX)))
draw_text(136+(30+2)+8,161-8,string(min(global.passive[8],PASSIVE_MAX)))
if ( passive ) then Passives_Desc();
draw_set_halign(fa_center)
draw_text(view_wview/2,(view_hview/2)+64,"Coins: "+string(floor(global.total_coins)))
draw_set_halign(false)
draw_set_alpha(1);

if ( !global.xbconnected ) {
    if ( mouse_x &lt; 6 ) {
        draw_sprite(spr_Mouse_Cursor,0,6,mouse_y); //CURSOR
    } else if ( mouse_x &gt; view_wview-6 ) {
        draw_sprite(spr_Mouse_Cursor,0,view_wview-6,mouse_y); //CURSOR
    } else
        draw_sprite(spr_Mouse_Cursor,0,mouse_x,mouse_y) //CURSOR
}

///Coop
if (global.coop) {
    switch (state) {

           case 1:
           size += 0.05;
           if ( size &gt;= 1.5 ) then state = 2;
           break;
 
           case 2:
           size -= 0.025;
           if ( size &lt;= 1 ) then state = 1;
           break;
    }
    
    if ( room == Char_Select ) {
       draw_sprite_ext(spr_KbOpt,0,82,20,size,size,0,image_blend,image_alpha);
       draw_text_colour(65,30,"Player 1",c_gray,c_gray,c_gray,c_gray,1);
    } else if ( room == char_Select_CooP ) {
      draw_sprite_ext(spr_CntOpt,0,240,20,size,size,0,image_blend,image_alpha);
      draw_text_colour(225,30,"Player 2",c_gray,c_gray,c_gray,c_gray,1);
    }
    //draw_text_ext_transformed_colour(20,20,"Player 1",2,15,2,2,0,c_aqua,c_aqua,c_aqua,c_aqua,1);
    //draw_sprite(spr_CntOpt,0,20,20);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw 
draw_set_blend_mode(bm_add);
draw_set_color(c_yellow);
draw_set_alpha(0.1);
draw_circle(16,16,32+random(1),0);
draw_set_alpha(0.19);
draw_sprite(spr_Lantern,0,16,16)
draw_circle(16,16,24+random(1),0);
draw_set_alpha(0.1);
draw_circle(320-16,16,32+random(1),0);
draw_set_alpha(0.19);
draw_sprite(spr_Lantern,0,320-16,16)
draw_circle(320-16,16,24+random(1),0);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
draw_set_alpha(falpha);

if (mouse_y &gt; view_hview/2+40 and mouse_y &lt; view_hview/2+56) and (mouse_x &gt; 320/2-48-8 and mouse_x &lt; 320/2-48+8) and passive == false then draw_sprite(spr_Char_Select_Button,0,320/2-48,view_hview/2+48+arry[0]-2) else draw_sprite(spr_Char_Select_Button,0,320/2-48,view_hview/2+48+arry[0])
if ( choice != -1 ) {
    if unlocked[choice] == true        
        if  (mouse_y &gt; view_hview/2+40 and mouse_y &lt; view_hview/2+56) and (mouse_x &gt; 320/2-sprite_get_width(spr_Char_Select_Button)/2 and mouse_x &lt; 320/2+sprite_get_width(spr_Char_Select_Button)/2) and passive == false then draw_sprite(spr_Char_Select_Button,1,320/2,view_hview/2+48+arry[2]-2) else draw_sprite(spr_Char_Select_Button,1,320/2,view_hview/2+48+arry[2])
    else
        if  (mouse_y &gt; view_hview/2+40 and mouse_y &lt; view_hview/2+56) and (mouse_x &gt; 320/2-sprite_get_width(spr_Char_Unlock_Button)/2 and mouse_x &lt; 320/2+sprite_get_width(spr_Char_Unlock_Button)/2) and passive == false then draw_sprite(spr_Char_Unlock_Button,1,320/2,view_hview/2+48+arry[2]-2) else draw_sprite(spr_Char_Unlock_Button,1,320/2,view_hview/2+48+arry[2])
}else
{
    if  (mouse_y &gt; view_hview/2+40 and mouse_y &lt; view_hview/2+56) and (mouse_x &gt; 320/2-sprite_get_width(spr_Char_Select_Button)/2 and mouse_x &lt; 320/2+sprite_get_width(spr_Char_Select_Button)/2) and passive == false then draw_sprite(spr_Char_Select_Button,1,320/2,view_hview/2+48+arry[2]-2) else draw_sprite(spr_Char_Select_Button,1,320/2,view_hview/2+48+arry[2])
}
if (mouse_y &gt; view_hview/2+40 and mouse_y &lt; view_hview/2+56) and (mouse_x &gt; 320/2+48-8 and mouse_x &lt; 320/2+48+8) and passive == false then draw_sprite(spr_Char_Select_Button,2,320/2+48,view_hview/2+48+arry[1]-2) else draw_sprite(spr_Char_Select_Button,2,320/2+48,view_hview/2+48+arry[1])
draw_set_alpha(1);

/*if mouse_y &gt; view_hview/2+40 and mouse_y &lt; view_hview/2+56
{
    if mouse_x &gt; 320/2-sprite_get_width(spr_Char_Select_Button)/2 and mouse_x &lt; 320/2+sprite_get_width(spr_Char_Select_Button)/2
    {
        draw_set_alpha(1);
        draw_set_color(c_white);
        draw_rectangle(mouse_x,mouse_y,mouse_x+16,mouse_y+8,false);
        draw_set_alpha(1);
    }
}*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room_goto(Game);
passive = false;
room_goto(Menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
