<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Merlin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy</parentName>
  <maskName>spr_Red_Devil_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = "DARK MERLIN";
Enemy_Stats();



spr_idle = spr_Dark_Merlin
spr_walk = spr_Merlin_Walk
spr_hurt = spr_Dark_Merlin_Hit
spr_dead = spr_Dark_Merlin_Corpse
sound_hit = snd_skeleton_hit;
sound_dead = snd_devil_dead;
event_inherited()

//behavior
walk = 0
gunangle = random(360)
wepangle = choose(-140,140)
alarm[1] = 1*room_speed;
wepflip = 1
dash = 0;
ammo = 0;
pos = 0;
spawn =0;
attack_index=-1;
set_light_properties(spr_Light,0,0,.4,.4,0,merge_colour(c_white,c_gray,0.5),image_alpha/4)

if audio_is_playing(global.LVLMUSIC)
    audio_stop_sound(global.LVLMUSIC);
Play_Music(snd_boss1,1,1,1,0,true,true);


has_shield=true;
draw_shield=false;
create_shield_surface(32,make_colour_rgb(49,38,68));
room_w = 256;
room_h=256;
phase=0;
sangle=0;
max_shield=500;
shield_amount=max_shield;
overrides_knockback=true;
regenerate_shield=false;
shield_timer=0;
animation_timer=0;
animation_type=0;
animation_refresh=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Play_Sound(sound_dead,random_range(0.8,1),0.7,0,7000,true,false);
Add_Rank_Point(10)
repeat(Random(10,40))
{
    with instance_create(x+choose(-random(16),random(16)),y+choose(-random(16),random(16)),obj_Blood_Stain)
    {
        image_xscale = other.image_xscale;
        friction = other.friction;
    }
}

with instance_create(x,y,obj_Boss_Corpse)
{
    explode=40;
    var o = instance_create(x,y,obj_Merlin_Essence_Spawner);
    o.owner=id;
    sprite_index = other.spr_dead;
    image_xscale = other.image_xscale;
    friction = other.friction;
    image_blend = other.image_blend+c_gray;
}

repeat(coin)
{
    with instance_create(x,y,obj_Coin)
    {
        speed = 2+random(2)/2;
        direction = random(360);
        friction = 0.2;
        value = global.dungeon+1;
    }
}


repeat (6)
{
    var ing = choose(obj_Ice_Shard,obj_Metal_Scrap,obj_Fire_Shard,obj_Magic_Dust,obj_Magic_Essence);
    ing_val=1;
    switch (ing)
    {
        case obj_Metal_Scrap:
            ing_val=irandom_range(10,20);
        break;
        case obj_Fire_Shard:
            ing_val=irandom_range(1,3);
        break;
        case obj_Ice_Shard:
            ing_val=irandom_range(2,3);
        break;
        case obj_Magic_Dust:
            ing_val=irandom_range(10,20);
        break;
        case obj_Magic_Essence:
            ing_val=irandom_range(5,10);
        break;
    }
    
    ing_val*=global.loop;
    
    with (instance_create(x,y,ing))
    {
        speed = 2+random(2)/2;
        direction = random(360);
        friction = 0.2;
        value = other.ing_val
    }
}

with obj_Hero
{
    //drop items
    if random(100) &lt; 10
    {
        if random(hpmax[char]) &gt; hp and random(3) &lt; 2
            with other
            {
                obj = instance_create(x,y,obj_Potion);
                obj.item_price = 0;
            }
    }
    //exp
    expcur += other.expdrop;
    global.exp_col += other.expdrop;
    global.exp_ctr = 120
    //Popup("+"+string(floor(other.expdrop))+" exp",merge_colour(c_purple,c_white,0.4))    
}
if instance_number(obj_Dark_Merlin) == 1 &amp;&amp; global.dungeon_name==SECRET1_STORY
{
    with instance_create(x,y,obj_Blood_Stone) item_price = 0;
    if audio_is_playing(snd_boss1)
        audio_sound_gain(snd_boss1,0,5000);
    killed_dark_merlin=true;
    ini_open("DGSC.ds");
    ini_write_real(CUTSCENE_SYSTEM,KILLED_DARK_MERLIN,killed_dark_merlin);
    ini_close();
}


global.boss_kill += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (attack_index)
{
    case 1:
        var ang;
        for (var i=0;i&lt;4;i++)
        {
            ang = degtorad(45*i);
            var attack = instance_create(target.x+48*cos(ang),target.y+48*sin(ang),obj_Lightning_Strike_Emitter);
            attack.ammo=10;
            attack.owner=id;
            attack.target=target;
            attack.refresh_rate=0.25*room_speed;
        }
        if (phase&gt;=1)
        {
            if (random(1)&lt;0.5)
            {
                dark_merlin_lightning_pattern_b()
            }
            else
            {
                dark_merlin_lightning_pattern_a();
            }
        }
    break;
    case 2:
        if (ammo&gt;0)
        {
            ammo--;
            var side = ammo div 8;
            var offset = room_h/8;
            if (ammo mod 8 != 0)
            {
                if (side==0)
                {
                    var attack = instance_create(room_w-16,room_h-32-offset*(ammo mod 8),obj_Dark_Beam_Charger);
                    attack.ammo=1;
                    attack.owner=id;
                    attack.target=target;
                    attack.refresh_rate=0.25*room_speed;
                    attack.spd=0;
                    attack.angle=180;
                    if (phase&gt;=1)
                    {
                        Create_Projectile_Ext(room_w-16,room_h-32-offset*(ammo mod 8),obj_Shock_Ball,
                        team,2,0,damage,dam_bon,mg_dam,mg_bon,1,180,100,0,c_white,false);
                    }
                }
                else
                {
                    var attack = instance_create(16,32+offset*(ammo mod 8),obj_Dark_Beam_Charger);
                    attack.ammo=1;
                    attack.owner=id;
                    attack.target=target;
                    attack.refresh_rate=0.25*room_speed;
                    attack.spd=0;
                    attack.angle=0;
                    if (phase&gt;=1)
                    {
                        Create_Projectile_Ext(16,32+offset*(ammo mod 8),obj_Shock_Ball,
                        team,2,0,damage,dam_bon,mg_dam,mg_bon,1,0,100,0,c_white,false);
                    }
                }
            }
            if (ammo mod 8 == 0)
            {
                alarm[3]=0.75*room_speed;
            }
            else
            {
                alarm[3]=0.25*room_speed;
            }
        }
    break;
    case 3:
        if (ammo&gt;0)
        {
            var ang=18*(ammo mod 10);
            var fireAng;
            for (var i=0;i&lt;10;i++)
            {
                fireAng = degtorad(ang+i*36);
                if (phase==2)
                {
                    Create_Projectile_Ext(x+16*cos(fireAng),y+16*sin(fireAng),obj_Super_Dark_Ball,team,1,0,damage,dam_bon,mg_dam,mg_bon,1,radtodeg(fireAng),100,0,c_white,false);
                }
                else if (phase==0)
                {
                    Create_Projectile_Ext(x+16*cos(fireAng),y+16*sin(fireAng),obj_Purple_Ball,team,1,0,damage,dam_bon,mg_dam,mg_bon,1,radtodeg(fireAng),100,0,c_white,false);
                }
                else if (phase==1)
                {
                    Create_Projectile_Ext(x+16*cos(fireAng),y+16*sin(fireAng),obj_Red_Laser_Beam,team,1,0,damage,dam_bon,mg_dam,mg_bon,1,radtodeg(fireAng),100,0,c_white,false);
                }
            }
            ammo--;
            if (phase==2)
            {
                alarm[3]=2*room_speed;
            }
            else if (phase==1)
            {
                alarm[3]=0.75*room_speed;
            }
            else if (phase==0)
            {
                alarm[3]=0.5*room_speed;
            }
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_shield=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Target()
alarm[1] = 10+random(10)
if target &gt; 0
{
    if collision_line(x,y,target.x,target.y,obj_Wall,0,0) &lt; 0
    {
        /*if point_distance(x,y,target.x,target.y) &lt; sight_range
        {                       
            wepangle = -wepangle
            gunangle = point_direction(x,y,target.x,target.y)
            if elite
                ammo = 8;
            else
                ammo = 4;            
            alarm[2] = 1;
            alarm[1] = 60*5
            motion_add(random(360),0.4)
            walk = 40+random(15)
            alarm[1] = walk+20+random(60)            
        }else */
        if random(1)&lt;0.3 // 0.3
        {
            attack_index=1; //Lightning
            alarm[3]=0.25*room_speed;
            alarm[1]=4*room_speed;
            animation_timer=0.25*room_speed;
            animation_type=1;
        }
        else if (random(1)&lt;0.2) // 0.2
        {
            
            alarm[3]=0.25*room_speed;
            ammo=16;
            attack_index=2; //Laser up and down
            alarm[1]=6*room_speed;
            animation_timer=0.25*room_speed;
            animation_type=2;
        }
        else if (random(1)&lt;0.4)
        {
            alarm[3]=0.25*room_speed;
            if (phase==2)
            {
                ammo=3;
            }
            else if (phase==1)
            {
                ammo=10;
            }
            else if (phase==0)
            {
                ammo=12;
            }
            attack_index=3; //Fireball circular attack
            alarm[1]=10*room_speed;
            animation_timer=0.25*room_speed;
            animation_type=3;
        }
        //sprite_index=choose(spr_Dark_Merlin_Charge1,spr_Dark_Merlin_Charge2);
        /*else
        if random(5)&lt;1
        {
            //SHOCKBALL
            motion_add(gunangle,6)
            wepangle = -wepangle
            gunangle = point_direction(x,y,target.x,target.y)        
            alarm[1] = 30*3
            var pos=0;
            repeat(11)
            {  
                Create_Projectile(x,y,obj_Fireball,team,2,0,damage,dam_bon,mg_bon,mg_dam,8,gunangle+pos,99,0,false);
                pos+=32            
            }
        }else
        if random(3)&lt;1 and !instance_exists(obj_PWizard)
        {
            spawn = 8;
            alarm[3] = 2;
            alarm[1] = 60;
        }
        if point_distance(x,y,target.x,target.y) &gt; sight_range+32
        {   
            direction = point_direction(x,y,target.x,target.y)
            Smoke(4,1,360,depth,0.1,c_gray,3);
            dash = 10+random(5);
            alarm[1] = 60+random(60)
        }*/
    }    
    else if random(5) &lt; 1
    {
        /*motion_add(random(360),0.4)
        walk = 40+random(15)
        alarm[1] = walk+20+random(60)*/
    }
}
else if random(10) &lt; 1
{
    /*motion_add(random(360),0.4)
    walk = 40+random(15)
    alarm[1] = walk+20+random(60)*/
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (hp&lt;0.33*maxhp &amp;&amp; phase&lt;2)
{
    phase=2;  
    instance_create(x,y,obj_Shout_Burst);
    regenerate_shield=true;
}
else if (hp&lt;0.67*maxhp &amp;&amp; phase&lt;1)
{
    phase=1;
    instance_create(x,y,obj_Shout_Burst);
    regenerate_shield=true;
}
if (regenerate_shield)
{
    if (shield_timer&gt;0)
    {
        shield_timer--;
    }
    else
    {
        if (shield_amount&lt;max_shield)
        {
            if ((shield_amount/max_shield)&lt;0.85)
            {
                repeat(2)
                {
                    var cangle = irandom(360);
                    //spawn_lightning_position(x,y,x+256*cos(cangle),y-256*sin(cangle),0.1,4,8,true,DS_LBLUE,c_black);
                    spawn_lightning_position(x+256*cos(cangle),y-256*sin(cangle),x,y,0.1,4,8,false,DS_LBLUE,c_black);
                }
            }
            shield_amount+=max(round((max_shield-shield_amount)/10),25);
            instance_create(x+random_range(-48,48),y+random_range(-48,48),obj_Heal_Part);
        }
        else
        {
            shield_amount=max_shield;
            regenerate_shield=false;
        }
        shield_timer=0.1*room_speed;
    }
}
if (animation_timer&gt;0)
{
    animation_timer--;
    if (animation_refresh&gt;0)
    {
        animation_refresh--;
    }
    else
    {
        animation_refresh=0.07*room_speed;
        switch (animation_type)
        {
            case 1: //Lightning
                instance_create(x,y,obj_Fireball_Destroy);
            break;
            case 2: //Lasers
                instance_create(x,y,obj_Rage_Part);
            break;
            case 3:  //Circle attack
                repeat (irandom(3)+1) {
                var o = instance_create(x+random_range(-8,8),y+random_range(-8,8),obj_Fireball_Destroy);
                o.image_blend = c_red;
                }
            break;
        }
    }
}
else if (animation_type!=0)
{
    animation_type=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (!has_shield)
{
    event_inherited();
}
else if (other.team!=team)
{
    draw_shield=true;
    if (other.object_index!=obj_Eye_Ball &amp;&amp; other.object_index!=obj_Spikeball)
    {
        with (other)
        {
            instance_destroy();
        }
    }
    alarm[2]=0.5*room_speed;
}*/
event_inherited();
if (other.team!=team)
{
    if (shield_amount&gt;0)
    {
        draw_shield=true;
        alarm[2]=0.5*room_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(shield_surface))
{
    create_shield_surface(32,make_colour_rgb(49,38,68));
}
draw_sprite_ext(spr_Dark_Merlin_Staff,-1,x,y,1,wepflip,gunangle+wepangle,c_white,1)
draw_self()
if (draw_shield)
{
    draw_surface(shield_surface,x-16,y-16);
}
//event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
