<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Hit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>set_light_properties(spr_Light,0,0,.4,.4,0,merge_colour(c_aqua,c_white,0.5),image_alpha/3);
mapvis = false;
knockback = 0;
knockback_dir = 0;
speedup = false;
mega = false
superior = false;
elite = false
if global.difficulty == "Impossible"
{
    if Test_Chance(10)
    {
        image_blend = c_blue;
        maxhp += (1.1)*maxhp;
        damage += (1.1)*damage;
        meleedamage += (1.1)*meleedamage;
        expdrop *= 10;
        mega = true    
    }else
    if Test_Chance(50)
    {
        image_blend = c_yellow;
        maxhp += (0.8)*maxhp;
        damage += (0.8)*damage;
        meleedamage += (0.8)*meleedamage;
        expdrop *= 8;
        superior = true  
    }else
    if Test_Chance(90)
    {
        image_blend = c_red;
        maxhp += (0.5)*maxhp;
        damage += (0.5)*damage;
        meleedamage += (0.5)*meleedamage;
        expdrop *= 4;
        elite = true 
    }
}else
if global.difficulty == "Nightmare"
{
    if Test_Chance(10)
    {
        image_blend = c_yellow;
        maxhp += (0.8)*maxhp;
        damage += (0.8)*damage;
        meleedamage += (0.8)*meleedamage;
        expdrop *= 8;
        superior = true    
    }else
    if Test_Chance(90)
    {
        image_blend = c_red;
        maxhp += (0.5)*maxhp;
        damage += (0.5)*damage;
        meleedamage += (0.5)*meleedamage;
        expdrop *= 4;
        elite = true 
    }
}else
{
    if Test_Chance(10) and (name != "SKELETON KING" and name != "SLIME BOSS" and name != "ICE GOLEM" and name != "LADY LAINE" and name != "SOUL GUARDIAN")
    {
        image_blend = c_red;
        maxhp += (0.5)*maxhp;
        damage += (0.5)*damage;
        meleedamage += (0.5)*meleedamage;
        expdrop *= 4;
        elite = true
    }
}

//CRUCIFIX
if ds_list_find_index(global.list,spr_Crucifix) != -1 
{
    maxhp -= (0.1)*maxhp
}

image_speed = 0.2
friction = 0.4
facing = choose(1,-1)
hp = maxhp;
team = 2
target = -1
show_hp = false;
slow_effect=0;
norm_blend = image_blend;
shad = spr_Shadow16;
dash = 0;

itemDamageWait=0; //The amount of time to wait until an item can damage again.
suicided=false; //Whether the monster killed itself or not.
wkick_exists=false;
spr_chrg_exists=false;
spr_fire_exists=false;
uses_shield=true;
shield_amount=0;
overrides_knockback=false; //Whether this enemy can be knocked back or not.
alarm[11]=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shader &amp; Silhouette Colour
/*event_inherited();
shader = shd_damage_mask_red;
silhouetteColour =  c_red;
//Shadow
spr_shadow = spr_enemy_shadow;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Play_Sound(sound_dead,random_range(0.8,1),0.7,0,7000,true,false);

repeat(Random(1,4))
{
    with instance_create(x+choose(-random(8),random(8)),y+choose(-random(8),random(8)),obj_Blood_Stain)
    {
        image_xscale = other.image_xscale;
        friction = other.friction;
    }
}

with instance_create(x,y,obj_Corpse)
{
    sprite_index = other.spr_dead;
    image_xscale = other.image_xscale;
    friction = other.friction;
    image_blend = other.image_blend+c_gray;
    motion_add(point_direction(other.target.x,other.target.y,x,y),8/other.size);
}

if global.boss_rm != 3
{
    if (!suicided)
    {
        repeat(coin)
        {
            with instance_create(x,y,obj_Diamond)
            {
                speed = 2+random(2)/2;
                direction = random(360);
                friction = 0.2;
                //value = 1*global.dungeon+1;
            }
        }
        //POTION
        with obj_Hero
        {
            Test_Chance(1)
            {
                //drop items
                if random(hpmax[char]) &gt; hp and random(5) &lt; 2
                    with other
                    {
                        obj = instance_create(x,y,obj_Potion);
                        obj.item_price = 0;
                    }
            }
        }
    }
}else
{
    //POTION
    if (!suicided)
    {
        with obj_Hero
        {
            //drop items
            if random(hpmax[char]) &gt; hp and random(5) &lt; 1
                with other
                {
                    obj = instance_create(x,y,obj_Potion);
                    obj.item_price = 0;
                }
        }
    }
}
//BEAKER
with obj_Hero
{
    if ds_list_find_index(global.list,spr_Beaker) != -1
    {
        enemy_kill_ctr += 1;
        if enemy_kill_ctr &gt; 5+(Item_Value(spr_Beaker))
        {
            if hp &lt; hpmax[char]
                hp += 10+((Item_Value(spr_Beaker))*5);
            enemy_kill_ctr = 0;
        }
    }
}
//SOUL
if ds_list_find_index(global.list,spr_Soul_Jar) != -1
{
    if Test_Chance(50)
        instance_create(x,y,obj_Enemy_Soul);
}

if global.boss_rm != 3
{
    if elite
        if global.difficulty != "Nightmare"
        {
            if random(100) &lt; 3
                with instance_create(x,y,obj_Silver_Key) item_price = 0;
            else
            if random(100) &lt; 1
                with instance_create(x,y,obj_Golden_Key) item_price = 0;
        }
    if superior
        {
            if random(100) &lt; .5
                with instance_create(x,y,obj_Silver_Key) item_price = 0;
            else
            if random(100) &lt; .1
                with instance_create(x,y,obj_Golden_Key) item_price = 0;
        }
    if mega
        {
            if random(100) &lt; .05
                with instance_create(x,y,obj_Silver_Key) item_price = 0;
            else
            if random(100) &lt; .01
                with instance_create(x,y,obj_Golden_Key) item_price = 0;
        }        
}

//SCATTER SHOT
if ds_list_find_index(global.list,spr_Slingshot) != -1
{
    var pos = 0;
    repeat(8)
    {            
        with obj_Hero
            Create_Projectile(other.x+lengthdir_x(16,pos),other.y+lengthdir_y(16,pos),obj_Scattered_BShot,team,2,crit_chance,((((Item_Value(spr_Slingshot)+1)*10))/100)*atk_dam[char],dam_bon[char],0,0,knockback,pos,99,1,false);
        pos += 45;
    }
}

//ADD POINTS
if Not_Boss()
{
    //NORMAL
    if mega == true
        Add_Rank_Point(3)    
    else if superior == true
        Add_Rank_Point(3)
    else if elite == true
        Add_Rank_Point(2)
    else
        Add_Rank_Point(1)
}


//SMOKE
/*repeat(3)
{
    obj = instance_create(x,y,obj_Smoke);
    obj.speed = 1+random(1);
    obj.direction = random(360);
    obj.vspeed = -1+random(-1);
    obj.depth = other.depth;
    obj.friction = 0.1;
    obj.col = merge_color(c_aqua,c_gray,random_range(0.6,0.9));
    obj.rad = random(5);    
}*/

//SMALL FLASH
/*if random(3)&lt;1
    instance_create(x,y,obj_Small_Flash)*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wkick_exists=asset_get_index("wkick")!= -1;
spr_chrg_exists=asset_get_index("spr_chrg") != -1;
spr_fire_exists=asset_get_index("spr_fire") != -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flash
/*switch (shader) {
       case shd_damage_mask_red:
       shader = shd_damage_mask_black;
       break;
       
       case shd_damage_mask_black:
       shader = shd_damage_mask_red;
       break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Target()
if hp&lt;1
{
    if global.boss_rm != 3
    {
        with obj_Hero
        {
            expcur += other.expdrop;
            global.exp_col += other.expdrop;
            global.exp_ctr = 120
            //Popup("+"+string(floor(other.expdrop))+" exp",merge_colour(c_purple,c_white,0.4))
        }
    }
    //EXPLODE or DETONATE
    if ds_list_find_index(global.list,spr_Detonator) != -1 and Test_Chance((30+((Item_Value(spr_Detonator)+1)*5)))
        with obj_Hero Create_Projectile(other.x,other.y,obj_Explode,team,0,crit_chance,atk_dam[char]*2,0,mag_dam[char],mag_bon[char],knockback,angle,accuracy[char],acc_bon[char],false);
    //CLOVER
    if ds_list_find_index(global.list,spr_Four_Leaf_Clover) != -1 and Test_Chance(4)
    {
        with instance_create(x,y,Random_Items(70,2,1))
        {
            item_price = 0;
            speed = 3;
            direction = random(360);
            friction = 0.2;
        }
    }
           
    global.kills += 1;
    global.en_kills += 1;
    instance_destroy();
}
else
{
    if knockback &gt; 0
    {
        walk = 0;
        knockback -= 1
        //Smoke(1,1,360,depth,0.2,c_gray,3);
        scr_part_smoke(1,360,random(4),.8,depth,3,c_gray,random(360),1);//Smoke
        x = x+lengthdir_x(4,knockback_dir)/size;
        y = y+lengthdir_y(4,knockback_dir)/size;      
    }
    
    /*if distance_to_object(obj_Merchant) &lt; 96
    {
        motion_add(point_direction(obj_Merchant.x,obj_Merchant.y,x,y),speed);
    }*/
    
    with obj_Hero
    {
        if status == "invisible"
            with other
                target = -1;
        if distance_to_object(obj_Merchant) &lt; 128
            with other
                target = -1;
    }
    
        friction = 0.4;
        image_blend = norm_blend
        
    if speedup
    {
        if speed &gt; maxspeed+2
            speed = maxspeed+2;
    }
    
    //THORNMAIL
    if (check_within_player_range(x,y,0,0))
    {
        with obj_Hero
        {
            if Item_In_List(spr_Thornmail)
            {
                with other
                    if point_in_circle(x,y,other.x,other.y,32)
                    {                
                        hp -= ((2+(Item_Value(spr_Thornmail)+1)*2)/60)
                    }       
            }
        }
    }
    
    if (itemDamageWait&gt;0)
    {
        itemDamageWait--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if instance_place(x,y-8,obj_Wall)
    depth = -y*3
else
    depth =-y;

//WKICK
if wkick_exists
{
    if wkick &gt; 0
    wkick -= 1
    if wkick &lt; 0
    wkick += 1
}


//ANIMATE ME PLZ
if spr_chrg_exists
{
    if sprite_index != spr_hurt and sprite_index != spr_chrg
        sprite_index = spr_idle
    if sprite_index = spr_hurt or sprite_index = spr_chrg
    {
        if image_index &gt; 2
        sprite_index = spr_idle
    }
}
else
{
    if spr_fire_exists
    {
        if speed = 0
        {
            if sprite_index != spr_hurt and sprite_index != spr_fire
                sprite_index = spr_idle
        }else
        {
            if sprite_index != spr_hurt and sprite_index != spr_fire
                sprite_index = spr_walk
        }
        if sprite_index = spr_hurt or sprite_index = spr_fire
        {
            if image_index &gt; 2
            sprite_index = spr_idle
        }
    }
    else
    {
        if speed = 0
        {
            if sprite_index != spr_hurt
                sprite_index = spr_idle
        }
        else
        {
            if sprite_index != spr_hurt
                sprite_index = spr_walk
        }
            if sprite_index = spr_hurt
            {
                if image_index &gt; 2
                sprite_index = spr_idle
            }
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WALK
if dash &gt; 0
{
    dash -= 1
    motion_add(direction,3)
    friction = 0.2;
    if speed &gt; maxspeed*2
        speed = maxspeed*2    
}else
if walk &gt; 0
{
    gunangle = point_direction(x,y,target.x,target.y)
    walk -= 1
    motion_add(direction,1)
}

if hspeed &gt; 0
    facing = 1
else if hspeed &lt; 0
    facing = -1
if speed &gt; maxspeed
    speed = maxspeed
    
image_xscale = facing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Trap">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_add(point_direction(other.x,other.y,x,y),other.size*1.5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Loot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other
    motion_add(point_direction(other.x,other.y,x,y),0.5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_add(point_direction(other.x,other.y,x,y),other.size*1.5)
with other
    if size &lt; 3 motion_add(point_direction(other.x,other.y,x,y),0.5/size)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other != -1
{
    if other.team != team and visible == true
    {
        if sprite_index != spr_hurt
        {
            if other.normal then Item_Effect();
            if (other.object_index!=obj_Spikeball &amp;&amp; other.object_index!=obj_Eye_Ball)
            {
                Play_Sound(snd_hit,random_range(0.7,0.8),0.3,0,5000,true,false);        
                //KNOCK BACK
                if (!overrides_knockback)
                {
                    alarm[10] = 60*3;
                    knockback_dir = point_direction(other.x,other.y,x,y)
                    knockback = other.knockback
                    walk = 0;
                }
            }
            else if (itemDamageWait==0)
            {
                Play_Sound(snd_hit,random_range(0.7,0.8),0.3,0,5000,true,false);        
                //KNOCK BACK
                if (!overrides_knockback)
                {
                    alarm[10] = 60*3;
                    knockback_dir = point_direction(other.x,other.y,x,y)
                    knockback = other.knockback
                    walk = 0;
                }
            }
            if ds_list_find_index(global.list,spr_Unicorn_Horn) != -1 and Test_Chance(2) and other.normal == true
            {
                //SHIELD
                var leftover_dam=999;
                if (uses_shield &amp;&amp; shield_amount&gt;0)
                {
                    leftover_dam = 999-shield_amount;
                    shield_amount-=999;
                }
                if (leftover_dam&lt;0)
                {
                    leftover_dam=0;
                }
                hp -= leftover_dam;
                global.shake += 2;
                if (other.attack_owner!=-2) //TRIGGERS NO-VULNERABILITY_FRAME
                {
                    sprite_index = spr_hurt
                }
                image_index = 0
                with instance_create(x,y,obj_Hit_Effect) {depth=other.depth-1;}
                Popup("-"+string(999),c_white);
            }
            else
            {
                //DAMAGE
                var col = c_white;
                var tot_def = defense + bon_defense;
                var true_damage = floor( ( 100 / ( 100 + tot_def ) ) * other.damage );
                //MAGIC
                var col = c_white;
                var tot_mresist = mresist + mr_bon;
                var true_magic = floor( ( 100 / ( 100 + tot_mresist ) ) * other.magic );
                                

                if other.critical
                {
                    col = c_yellow
                    Critical_Effect();
                }
                if Item_In_List(spr_Twin_Blade)
                    if Test_Chance(30+((Item_Value(spr_Twin_Blade)+1)*10)) and other.normal == true
                    {
                        col = c_aqua;
                        true_damage *= 2;
                    }
                if instance_exists(obj_St_Berserk)and other.normal == true
                    if obj_St_Berserk.owner != -1
                        if obj_St_Berserk.owner.team == other.team
                        {
                            col = c_aqua;
                            true_damage *= 2;
                        }
    
                var final_damage = true_damage+true_magic;
                var blind_blade_effect=false;
                if (Item_In_List(spr_Blind_Blade))
                {
                    if (random(1)&lt;0.5)
                    {
                        final_damage*=2;
                    }
                    else
                    {
                        final_damage=0;
                        blind_blade_effect=true;
                    }
                }
                if (other.object_index!=obj_Spikeball &amp;&amp; other.object_index!=obj_Eye_Ball)
                {   
                    //SHIELD           
                    var leftover_dam=final_damage;
                    if (uses_shield &amp;&amp; shield_amount&gt;0)
                    {
                        leftover_dam = final_damage-shield_amount;
                        shield_amount-=final_damage;
                    }
                    if (leftover_dam&lt;0)
                    {
                        leftover_dam=0;
                    }    
                    hp -= leftover_dam;
                    if final_damage &gt; 0
                    {                    
                        if other.critical
                            Popup("-"+string(ceil(final_damage))+" CRITICAL!!",col); //POPUP
                        else
                            Popup("-"+string(ceil(final_damage)),col); //POPUP
                    }
                    else if (blind_blade_effect)
                    {
                        Popup("MISSED!",c_purple);
                    }
                    global.shake += 1;
                    if (other.attack_owner!=-2) //TRIGGERS NO-VULNERABILITY_FRAME
                    {
                        sprite_index = spr_hurt
                    }
                    image_index = 0
                    //STEAL COIN
                    if ds_list_find_index(global.list,spr_Gold_Hand) != -1
                    {
                        with instance_create(x+lengthdir_x(16,direction),y+lengthdir_y(16,direction),obj_Coin)
                        {
                            speed = 2+random(2);
                            direction = other.direction;
                            friction = 0.2;
                        }
                        coin -= 1;
                    }
                    with instance_create(x,y,obj_Hit_Effect) {depth=other.depth-1;}
                    //SCRATCH
                    if ds_list_find_index(global.list,spr_Bear_Claw) != -1 and other.normal == true
                        if Test_Chance(50)
                            if other.sprite_index != spr_Scratch
                                with obj_Hero
                                    Create_Projectile(other.x,other.y,obj_Scratch,team,0,crit_chance,0,0,((50+((Item_Value(spr_Bear_Claw)+1)*5))/100)*mag_dam[char],0,knockback,angle,accuracy[char],acc_bon[char],false);
                }
                else if (itemDamageWait==0) //Special type: Damage items like spikeball and eye ball use a different invulnerability setting
                {
                    //SHIELD
                    var leftover_dam=final_damage;
                    if (uses_shield &amp;&amp; shield_amount&gt;0)
                    {
                        leftover_dam = final_damage-shield_amount;
                        shield_amount-=final_damage;
                    }
                    if (leftover_dam&lt;0)
                    {
                        leftover_dam=0;
                    }    
                    hp -= leftover_dam;
                    if final_damage &gt; 0
                    {                    
                        if other.critical
                            Popup("-"+string(ceil(final_damage))+" CRITICAL!!",col); //POPUP
                        else
                            Popup("-"+string(ceil(final_damage)),col); //POPUP
                    }
                    else if (blind_blade_effect)
                    {
                        Popup("MISSED!",c_purple);
                    }
                    global.shake += 1;
                    if (other.attack_owner!=-2) //TRIGGERS NO-VULNERABILITY_FRAME
                    {
                        sprite_index = spr_hurt
                    }
                    image_index = 0
                    itemDamageWait=0.25*room_speed;
                    //STEAL COIN
                    if ds_list_find_index(global.list,spr_Gold_Hand) != -1
                    {
                        with instance_create(x+lengthdir_x(16,direction),y+lengthdir_y(16,direction),obj_Coin)
                        {
                            speed = 2+random(2);
                            direction = other.direction;
                            friction = 0.2;
                        }
                        coin -= 1;
                    }
                    with instance_create(x,y,obj_Hit_Effect) {depth=other.depth-1;}
                    //SCRATCH
                    if ds_list_find_index(global.list,spr_Bear_Claw) != -1 and other.normal == true
                        if Test_Chance(50)
                            if other.sprite_index != spr_Scratch
                                with obj_Hero
                                    Create_Projectile(other.x,other.y,obj_Scratch,team,0,crit_chance,0,0,((50+((Item_Value(spr_Bear_Claw)+1)*5))/100)*mag_dam[char],0,knockback,angle,accuracy[char],acc_bon[char],false);
                }
            }
            if other.sprite_index = spr_Necro_Shoot and other.normal == true
            {
                with obj_Hero
                {
                    //BLOOD FOR ATTACK
                    if instance_exists(obj_Necro_Orb) and hp &gt; 1
                        hp -= ((1+(0.5*ability_lvl[1]))/100)*hpmax[char]
                }
            }
            if other.sprite_index == spr_Scythe_Slash and other.normal == true
            {
                with obj_Hero
                {
                    if Test_Chance(10+(5*ability_lvl[0]))
                    {
                        with other
                        {
                            obj             = instance_create(x,y,obj_St_Stunned)
                            obj.owner       = id;
                            obj.pdamage     = 0;
                            obj.sec         = 0;
                            obj.alarm[1]    = 60*2;
                        }
                    }
                }
            }
            
            //Necromancer Ally - If attacked, re-targets to attacker
            if (other.attack_owner&gt;0)
            {
                if (instance_exists(other.attack_owner))
                {
                    if (other.attack_owner.object_index==obj_Skeleton_Ally)
                    {
                        target=other.attack_owner;
                    }
                }
            }
            
            //BLEED
            with obj_Hero
            {
                if Test_Chance(2)
                {
                    with other
                    {
                        Bleed(id,1,1,3);
                    }
                }
            }               
            with other
            {
                if type == 0 or type == 1
                {
                    if (hitpoints&gt;0)
                    {
                        hitpoints--;
                    }
                    else
                    {
                        instance_destroy(); 
                    }
                }
            }
                    
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Prop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_add(point_direction(other.x,other.y,x,y),other.size*1.5)
with other
    if size &lt; 3 motion_add(point_direction(other.x,other.y,x,y),0.5/size)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Hero">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.team != team and meleedamage &gt; 0 
{
    with other
    {        
        if sprite_index != spr_hurt[char] and status!="invisible" and status!="invulnerable"
        {   
            alarm[10] = 60*3;            
            var tot_dam = ceil(other.meleedamage/((defense[char]+def_bon[char])));
            scr_part_smoke(8,90,random(4),1+random(1),depth,1,c_red,random(360),1);//Blood Format"
            sprite_index = spr_hurt[char]
            image_index = 0
            motion_add(other.direction,4)
            with instance_create(x,y,obj_Hit_Effect) {depth=other.depth-1;}
            var armorMultiplier=1;
            if (Item_In_List(spr_Vital_Armor))
            {
                if (random(1)&lt;0.5)
                {
                    armorMultiplier*=-1;
                }
                else
                {
                    armorMultiplier*=2;
                }
            } 
            if (Item_In_List(spr_Ninby_Grace))
            {
                var heal_chance = 0.3+(0.1*(Item_Value(spr_Ninby_Grace)-1));
                if (random(1)&lt;heal_chance)
                {
                    if (armorMultiplier&gt;0)
                    {
                        armorMultiplier*=-1;
                        repeat (irandom_range(2,4))
                        {
                            ob = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_Heal_Part);
                            ob.image_blend = c_lime;
                            ob.depth = depth+choose(-1,0,1);
                        }
                    }
                }
            }
            var finalDamage = (tot_dam)*armorMultiplier;
            
            var leftover_dam=finalDamage;
            if (uses_shield &amp;&amp; shield_amount&gt;0 &amp;&amp; finalDamage&gt;0)
            {
                leftover_dam =finalDamage -shield_amount;
                shield_amount-=finalDamage;
            }
            if (leftover_dam&lt;0)
            {
                leftover_dam=0;
            }
            
            hp -= leftover_dam;
            if (abs(finalDamage)&gt;0)
            {
                if armorMultiplier &gt; 0
                {                
                    if (shield_amount&gt;0)
                    {
                        Popup("-"+string(finalDamage),c_aqua);
                    }
                    else
                    {
                        Popup("-"+string(finalDamage),c_red);
                    }
                }
                else
                {
                    Popup("+"+string(-finalDamage),c_lime);
                }
            }
        }       
    }    
    if other.hp &lt;= 0
    {
        global.killer = id;
    } 
}
if other.team != team
{   
    if other.meleedamage &gt; 0
    {
        if sprite_index != spr_hurt &amp;&amp; status!="invisible"
        {   
            alarm[10] = 60*3;        
            hp -= other.meleedamage
            global.shake += 2;
            sprite_index = spr_hurt
            image_index = 0
            //KNOCKBACK
            if (!overrides_knockback)
            {
                if ds_list_find_index(global.list,spr_Pacman_Glove) != -1
                    motion_add(other.direction,8+other.knockback);
                else
                    motion_add(other.direction,4)
                with instance_create(x,y,obj_Hit_Effect) {depth=other.depth-1;}
            }
            Popup("-"+string(other.meleedamage),c_white);
        }    
    }
    if other.dash &gt; 0
    {
        knockback = 8;
        motion_add(other.direction,4)
    }
    //VENOM
    if ds_list_find_index(global.list,spr_Venom) != -1
    {
        obj             = instance_create(x,y,obj_St_Poisoned)
        obj.owner       = id;
        obj.pdamage     = 5;
        obj.sec         = 3;
        obj.alarm[1]    = 60*5; 
    }    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_bounce_solid(false)
/*var olddir oldspeed;
olddir = direction
oldspeed = speed
move_bounce_solid(true)

motion_add(olddir,speed)
speed = oldspeed

if hspeed &gt; 0 and !place_free(x+hspeed,y)
{do hspeed -= friction until place_free(x+hspeed,y) or hspeed &lt;= 0}
else
if hspeed &lt; 0 and !place_free(x+hspeed,y)
{do hspeed += friction until place_free(x+hspeed,y) or hspeed &gt;= 0}

if vspeed &gt; 0 and !place_free(x,y+vspeed)
{do vspeed -= friction until place_free(x,y+vspeed) or vspeed &lt;= 0}
else
if vspeed &lt; 0 and !place_free(x,y+vspeed)
{do vspeed += friction until place_free(x,y+vspeed) or vspeed &gt;= 0}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
