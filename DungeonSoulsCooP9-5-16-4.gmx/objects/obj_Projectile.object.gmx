<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start
attack_owner=-1; //Allows to tell who made this attack.
hitpoints=0;
alarm[9]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if team == 1
{
    with obj_Hero
    {
        with other
        {
            //EXPLODE
            if ds_list_find_index(global.list,spr_Cannon_Ball) != -1 and normal == true
            {
                if Test_Chance(50)
                {
                    with obj_Hero
                        if other.team = team and other.object_index != obj_Small_Explode
                            Create_Projectile(other.x,other.y,obj_Small_Explode,team,0,crit_chance,(125+((Item_Value(spr_Cannon_Ball)+1)*5))/100,0,mag_dam[char],mag_bon[char],knockback,angle,accuracy[char],acc_bon[char],false);
                }   
            } 
            
            //MOLOTOV
            if ds_list_find_index(global.list,spr_Molotov) != -1 and normal == true
            {
                if Test_Chance(50)
                {
                    repeat(random_range(3,5))
                        with instance_create(x,y,obj_Molotov_Part)
                        {
                            speed = 1+random(1);
                            direction = random(360);
                        }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit Points
if (instance_exists(obj_Hero))
{
    with (obj_Hero)
    {
        if (other.team=team)
        {
            if (has_spectral_pierce)
            {
                other.hitpoints+=2;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Slime_Boss_BoneMask">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if other.team == 1 and hittable = true
    {        
        if sprite_index != spr_hurt
        {   
            hp -= other.damage+other.magic
            sprite_index = spr_hurt
            image_index = 0            
            with instance_create(x,y,obj_Hit_Effect) {depth=other.depth-1;}
            Play_Sound(hit_sound,hit_pitch,0.5,0,5000,true,false);
        }
        with other
        {
            if type == 0 or type == 1
                instance_destroy(); 
            else if type == 2
                move_bounce_solid(true);
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Prop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if other.team != team and hittable = true
    {       
        if sprite_index != spr_hurt
        {   
            hp -= other.damage+other.magic
            sprite_index = spr_hurt
            image_index = 0            
            with instance_create(x,y,obj_Hit_Effect) {depth=other.depth-1;}
            Play_Sound(hit_sound,hit_pitch,0.5,0,5000,true,false);
        }
        with other
        {
            if type == 0 or type == 1
            {
                if (hitpoints &gt; 0)
                {
                    hitpoints--;
                }
                else
                {
                    instance_destroy(); 
                }
            }
            else if type == 2
                move_bounce_solid(true);
        }
    }
    else if (!hittable)
    {
        with (other)
        {
            instance_destroy();
        }
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
