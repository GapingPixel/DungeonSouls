<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar quick_saved;
ini_open("DGSC.ds");
quick_saved = ini_read_real(GENERAL_SECTION,QUICK_SAVED_KEY,false);
quick_saved=false;
ini_close();

if instance_exists(obj_HUD)with obj_HUD instance_destroy();
if instance_exists(obj_Hero)with obj_Hero instance_destroy();
if instance_exists(obj_Corpse)with obj_Corpse instance_destroy();
n=0;
menu_yy = 0;
menu_yyB = 0;
menu_yyC = 0;
menu_yyD = 0;
menu_yyE = 0;
menu_part = 0;
trans_x = -16;
myy = 0;
malpha = 1;
opalpha = 0;
alpha = 1;
ctr = 0;
kbScale = 1;
cntScale = 1;
cont_act = "keyboard";
cont_change = false;
change[0] = false;
change[1] = false;
change[2] = false;
change[3] = false;
change[4] = false;
change[5] = false;
change[6] = false;
change[7] = false;
change[8] = false;
change[9] = false;
change[10] = false;
change[11]=false;
change[12]=false;
change[13]=false;
background_vspeed[0] = -0.3;
background_vspeed[1] = -0.3;

//image_speed = 0.5/2;
in_menu = false;
//PARTICLE
part_sys = part_system_create();

part = part_type_create();
part_type_shape(part,pt_shape_pixel);
part_type_color2(part,c_white,c_aqua);
part_type_alpha2(part,0.3,0);
part_type_size(part,0.2,.5,false,true);
part_type_blend(part,true);
part_type_speed(part,0.4/2,0.8/2,false,true);
part_type_direction(part,80,100,false,true);
part_type_life(part,300,500);

emitter = part_emitter_create(part_sys);
part_emitter_region(part_sys,emitter,0,320,240,240,ps_shape_rectangle,ps_distr_gaussian);
part_emitter_stream(part_sys,emitter,part,-1);


//GAME CONTROLLER SUPPORT
wait_gamepad = true; //Avoids passing events from introB to this object.
alarm[0]=2;

credits_scroll=0;
target_credits_scroll=0;
max_credits_scroll=80;

//Arcane forge
arcane_forge_char=0;
arcane_item_angle=0;
selected_recipe=0;
arcane_forge_cost_complete=false;
arcane_forge_requirements[0]=false;
arcane_forge_ingredients[0]=0;
arcane_forge_all_ingredients=false;
loaded_forge_ingredients=false;
arcane_forge_base_radius=128;
arcane_forge_item_slot=0;
arcane_forge_ing_slot=0;
arcane_forge_ing_base_line=0;
arcane_forge_item_base_line=0;
arcane_forge_mode=1; //Default
arcane_forge_display_box=false; //Selection box when interacting with forge inventory
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wait_gamepad=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (menu_part!=2)
{
    repeat(random(2))
    {
        with instance_create(320/2+choose(-random(8),random(8)),64+choose(-random(8),random(8)),obj_Circle_Part)
        {
            col = c_aqua;
            maxrad = random_range(6,8);
            rad = maxrad;
            fspd = 0.1;
            vspeed = -1-random(-1);
        }
    } 
}
n+=1;

//SCALE
if cont_act == "keyboard"
    kbScale = 1+(cos(n/10)*.1);
else
    kbScale = 1;

if cont_act == "controller"
    cntScale = 1+(cos(n/10)*.1);
else
    cntScale = 1;

var key_up,key_down,key_left,key_right,key_pick,key_right_pressed,key_left_pressed,key_q,key_e;
key_up=false;
key_down=false;
key_left=false;
key_right=false;
key_left_pressed=false;
key_right_pressed=false;
key_pick=false;
key_q=false;
key_e=false;


    if (gamepad_detected)
    {
        if (!wait_gamepad)
        {
            var pad;
            pad = gamepad_get_index(0);
            if (pad!=-1)
            {
                key_up = gamepad_check_lpushed_up(pad);
                key_down = gamepad_check_lpushed_down(pad);
                key_left = gamepad_axis_value(pad,gp_axislh)&lt;-gamepad_axis_deadzone;
                key_right = gamepad_axis_value(pad,gp_axislh)&gt;gamepad_axis_deadzone;
                key_right_pressed = gamepad_check_lpushed_right(pad);
                key_left_pressed = gamepad_check_lpushed_left(pad);
                key_pick = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'pick'));//gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'fskill'));
                key_q = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'sskill'));
                key_e = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'tskill'));
            }
        }
    }
    else if (joystick_detected)
    {
        if (!wait_gamepad)
        {
            key_up = joystick_check_stick_pushed_up(0);
            key_down = joystick_check_stick_pushed_down(0);
            key_right_pressed = joystick_check_stick_pushed_right(0);
            key_left_pressed = joystick_check_stick_pushed_left(0);
            key_left = joystick_check_stick_left(0);
            key_right = joystick_check_stick_right(0);
            key_pick = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'pick'))];
            key_q = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'sskill'))];
            key_e = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'tskill'))];
        }
    }
    
    //{
        key_up=key_up||keyboard_check_pressed(ds_map_find_value(global.keys,'up'));
        key_down=key_down||keyboard_check_pressed(ds_map_find_value(global.keys,'down'));
        key_left=key_left||keyboard_check(ds_map_find_value(global.keys,'left'));
        key_right=key_right||keyboard_check(ds_map_find_value(global.keys,'right'));
        key_left_pressed=key_left_pressed||keyboard_check_pressed(ds_map_find_value(global.keys,'left'));
        key_right_pressed=key_right_pressed||keyboard_check_pressed(ds_map_find_value(global.keys,'right'));
        key_pick=key_pick||keyboard_check_pressed(ds_map_find_value(global.keys,'pick'));
        key_q=key_q||keyboard_check_pressed(ds_map_find_value(global.keys,'sskill'));
        key_e=key_e||keyboard_check_pressed(ds_map_find_value(global.keys,'tskill'));
    //}

if ( menu_part == 0 &amp;&amp; myy == 0 ) {
    /*if (mouse_x &gt; 320/2-50 and mouse_x &lt; 320/2+50)
    {
        if mouse_y &gt; 240/2+48-4+(myy/2) and mouse_y &lt; 240/2+48+4+(myy/2)
        {
            menu_yy = 0;
            in_menu = true
        }
        else if mouse_y &gt; 240/2+56-4+(myy/2) and mouse_y &lt; 240/2+56+4+(myy/2)
        {
            menu_yy = 1;
            in_menu = true;
        }
        else if mouse_y &gt; 240/2+64-4+(myy/2) and mouse_y &lt; 240/2+64+4+(myy/2)
        {
            menu_yy = 2
            in_menu = true;
        }
        else if mouse_y &gt; 240/2+72-4+(myy/2) and mouse_y &lt; 240/2+72+4+(myy/2)
        {
            menu_yy = 3
            in_menu = true;
        }               
        else
        {
            in_menu = false;
        }
    }*/
    
    if key_up {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 5;
    } else
    if key_down {
        if menu_yy &lt; 5
            menu_yy += 1;
        else
            menu_yy = 0
    }
    if key_pick {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);
        switch(menu_yy) {
            case 0:        //PLAY     
                if (!quick_saved)
                {
                    if !instance_exists(obj_FadeOut)
                        instance_create(x,y,obj_FadeOut);
                    room_goto_next();
                }
                else
                {
                    quickload("qsv.dt");
                    quick_saved = false;
                    ini_open("DGSC.ds");
                    ini_write_real(GENERAL_SECTION,QUICK_SAVED_KEY,quick_saved);
                    ini_close();
                }
                global.tutorial=false;
                break;
            case 2:         //TUTORIAL
                if !instance_exists(obj_FadeOut)
                    instance_create(x,y,obj_FadeOut);
                global.tutorial = true;
                global.tutorial_lvl = 0;
                room_goto_next();
                break;            
                
            case 1:
            menu_part=2;
            menu_yy=0;
                init_hero_weapons();
                arcane_forge_update_neophyte();
            break;
            case 3:         //OPTIONS
                menu_yy = 0;             
                menu_part = 1;
                break;
            case 4:         //CREDITS
                menu_yy = 0;
                menu_part = 7;
                break;
            case 5:         //QUIT
                game_end();
                break;
        }
    }
}else
if menu_part == 1 and myy == -160 //OPTIONS
{

    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 7
        
    }else
    if key_down
    {
        if menu_yy &lt; 7
            menu_yy += 1;
        else
            menu_yy = 0;
    }            
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:             //CONTROLS
                menu_yy = 0;
                menu_part = 3;  
                break;  
            case 1:             //MUSIC
                menu_yy = 0;
                menu_part = 4;
                break;
            case 2:             //RESOLUTION
                menu_yy = 0;
                menu_part = 5;
                break;
            case 3:             //STATS
                menu_yy = 0;
                menu_part = 6;
                break;                
            case 4:             //GAMEPLAY
                menu_yy = 0;
                menu_part = 8;
                break;
            case 5:             //RESET
                menu_yy = 0;
                menu_part = 9;
                break;
            case 6:             //ENABLE GAMEPAD
                enabled_gamepad=!enabled_gamepad;
            break;                
            case 7:             //BACK                
                Save_Settings();
                menu_yy = 0;
                menu_part = 0;
                game_restart()
                break;
        }
    }
}




else if (menu_part==2 &amp;&amp; myy==-160)
{
    if (!instance_exists(obj_Forge_Effect))
    {
        if (arcane_forge_mode==1) //Default
        {
            if (key_right_pressed)
            {
                arcane_forge_char++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_left_pressed)
            {
                arcane_forge_char--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (arcane_forge_char&gt;9)
            {
                arcane_forge_char-=10;
            }
            else if (arcane_forge_char&lt;0)
            {
                arcane_forge_char+=10;
            }
            
            if (key_down)
            {
                selected_recipe++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_up)
            {
                selected_recipe--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (selected_recipe&gt;=global.number_recipes)
            {
                selected_recipe=global.number_recipes-1;
            }
            else if (selected_recipe&lt;0)
            {
                selected_recipe=0;
            }
        }
        else if (arcane_forge_mode==0) //Weapon Inventory
        {
            var max_lines = max(global.forge_item_amount,9);
            if (key_right_pressed)
            {
                arcane_forge_item_slot++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_left_pressed)
            {
                arcane_forge_item_slot--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_up)
            {
                arcane_forge_item_slot-=3;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_down)
            {
                arcane_forge_item_slot+=3;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (arcane_forge_item_slot&gt;=max_lines)
            {
                arcane_forge_item_slot=max_lines-1;
            }
            else if (arcane_forge_item_slot&lt;0)
            {
                arcane_forge_item_slot=0;
            }
            arcane_forge_item_base_line=floor(arcane_forge_item_slot/3);
        }
        else if (arcane_forge_mode==2) //Ingredient Inventory
        {
            var max_lines = max(global.forge_item_amount,9);
            if (key_right_pressed)
            {
                arcane_forge_ing_slot++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_left_pressed)
            {
                arcane_forge_ing_slot--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_up)
            {
                arcane_forge_ing_slot-=4;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_down)
            {
                arcane_forge_ing_slot+=4;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (arcane_forge_ing_slot&gt;=max_lines)
            {
                arcane_forge_ing_slot=max_lines-1;
            }
            else if (arcane_forge_ing_slot&lt;0)
            {
                arcane_forge_ing_slot=0;
            }
            arcane_forge_ing_base_line=floor(arcane_forge_ing_slot/4);
        }
        
        if (key_q)
        {
            arcane_forge_mode--;
            Play_Sound(snd_choose,1,.5,0,5000,true,false);
        }
        else if (key_e)
        {
            arcane_forge_mode++;
            Play_Sound(snd_choose,1,.5,0,5000,true,false);
        }
    }
    if (arcane_forge_mode&gt;2)
    {
        arcane_forge_mode-=3;
    }
    else if (arcane_forge_mode&lt;0)
    {
        arcane_forge_mode+=3;
    }

    if (global.number_recipes&gt;0)
    {
        //Ifs instead of attribution due to possible animation reset.
        if (global.total_coins&gt;=global.recipe_forge_cost[global.recipe[selected_recipe]])
        {
            arcane_forge_cost_complete=true;
        }
        else
        {
            arcane_forge_cost_complete=false;
        }
        
        var r_index = global.recipe[selected_recipe];
        
        arcane_forge_all_ingredients=true;
        for (var i=0;i&lt;global.recipe_ingredient_number[r_index];i++)
        {
            loaded_forge_ingredients=true;
            arcane_forge_ingredients[i]=forge_get_stack_count(global.recipe_ingredient_type[r_index,i]);
            arcane_forge_requirements[i]=(arcane_forge_ingredients[i]&gt;=global.recipe_ingredient_amount[r_index,i]);
            arcane_forge_all_ingredients=arcane_forge_all_ingredients &amp;&amp; arcane_forge_requirements[i];
        }
    }
    else
    {
        loaded_forge_ingredients=true;
    }
    
    var exit_key=false;
    if (gamepad_detected)
    {
        var _pad=gamepad_get_index(0);
        if (_pad!=-1)
        {
            exit_key=gamepad_button_check_pressed(_pad,gp_face2);
        }
    }
    else if (joystick_detected)
    {
        exit_key=joystick_button_pressed[0,2];
    }
    
    exit_key=exit_key||keyboard_check_pressed(vk_escape);
    
    if (key_pick)
    {
        if (arcane_forge_mode!=0)
        {
            if (global.number_recipes&gt;0)
            {
                if(!instance_exists(obj_Forge_Effect) &amp;&amp; can_forge_item(global.recipe[selected_recipe]))
                {
                    instance_create(160,90,obj_Forge_Effect);
                }
            }
        }
        else
        {
            if (arcane_forge_item_slot&lt;global.forge_item_amount)
            {
                if (equip_weapon(arcane_forge_item_slot,arcane_forge_char))
                {
                    //Play sound equip
                }
                else
                {
                    display_message(room_width/2,room_height/2,"That hero cannot equip that weapon!",3,true);
                }
            }
        }
    }
    
    if (exit_key &amp;&amp; !instance_exists(obj_Forge_Effect))
    {
        save_ingredients();
        save_forge_items();
        save_hero_weapons();
        save_recipes();
        Play_Sound(snd_choose,1,.5,0,5000,true,false);
        menu_yy = 0;             
        menu_part = 0;
    }
}
else


if menu_part == 3 and myy == -160   //CONTROLS
{
    var extra;
    if menu_yy == -1
    {
        if key_left and cont_act != "keyboard"
            cont_act = "keyboard";
        else if key_right and cont_act != "controller"
            cont_act = "controller";
    }
    if ( cont_act=="keyboard" ) {
        extra=0;
    } else {
        extra=3;
    }
        
    if key_up and cont_change = false {
        if menu_yy &gt; -1
            menu_yy -= 1
        else
            menu_yy = 11+extra
    } else
    if ( key_down and cont_change = false ) {
        if ( menu_yy &lt; 11+extra )
            menu_yy += 1;
        else
            menu_yy = -1;
    }    
    if ( key_pick and cont_change = false )
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:            
                if No_Key_Change() &amp;&amp; cont_act!="controller"  { change[0] = true; cont_change = true; }
                break;
            case 1:
                if No_Key_Change() &amp;&amp; cont_act!="controller" { change[1] = true; cont_change = true; }
                break;
            case 2:
                if No_Key_Change()  &amp;&amp; cont_act!="controller" { change[2] = true; cont_change = true; }
                break;
            case 3:            
                if No_Key_Change()  &amp;&amp; cont_act!="controller" { change[3] = true; cont_change = true; }
                break;
            case 4:                
                if No_Key_Change()  { change[4] = true; cont_change = true; }
                break;
            case 5:
                if No_Key_Change()  { change[5] = true; cont_change = true; }
                break;
            case 6:
                if No_Key_Change()  { change[6] = true; cont_change = true; }
                break;
            case 7:
                if No_Key_Change()  { change[7] = true; cont_change = true; }
                break;
            case 8:
                if No_Key_Change()  { change[8] = true; cont_change = true; }
                break;                                                 
            case 9:
                if No_Key_Change()  { change[9] = true; cont_change = true; }
                break;
            case 10:
                if No_Key_Change()  { change[10] = true; cont_change = true; }
                break;
            case 11:   
                if (extra==0)
                {
                    Save_Settings();
                    menu_yy = 0;             
                    menu_part = 1;
                }
                else
                {
                    if No_Key_Change()  { change[11] = true; cont_change = true; }
                }
                break;
            case 12:
                if (extra!=0)
                {
                    if No_Key_Change()  { change[12] = true; cont_change = true; }
                }
                break;
            case 13:
                if (extra!=0)
                {
                    if No_Key_Change()  { change[13] = true; cont_change = true; }
                }
                break;
            case 14:
                if (extra!=0)
                {
                    Save_Settings();
                    menu_yy = 0;             
                    menu_part = 1;
                }
                break;
            default:
                break;                
        }
    }else
    if keyboard_check_pressed(vk_anykey)
    { 
        if cont_act == "keyboard"
        {    
            if (!Keyboard_Has_Key(Return_VKey()))
            {
                switch(menu_yy)
                {
                    case 0:         
                        if change[0] == true
                        {                    
                            ds_map_replace(global.keys,'up',Return_VKey());                
                            change[0] = false;
                            cont_change = false;
                        }
                        break;
                    case 1:
                        if change[1] == true
                        {
                            ds_map_replace(global.keys,'down',Return_VKey());                
                            change[1] = false;
                            cont_change = false;
                        }                    
                        break;
                    case 2:
                        if change[2] == true
                        {
                            ds_map_replace(global.keys,'left',Return_VKey());                
                            change[2] = false;
                            cont_change = false;
                        }
                        break;
                    case 3:            
                        if change[3] == true
                        {
                            ds_map_replace(global.keys,'right',Return_VKey());                
                            change[3] = false;
                            cont_change = false;
                        }
                        break;
                    case 4:                
                        if change[4] == true
                        {
                            ds_map_replace(global.keys,'potion',Return_VKey());                
                            change[4] = false;
                            cont_change = false;
                        }
                        break;
                    case 5:
                        if change[5] == true
                        {
                            ds_map_replace(global.keys,'pick',Return_VKey());                
                            change[5] = false;
                            cont_change = false;
                        }
                        break;  
                    case 6:
                        if change[6] == true
                        {
                            ds_map_replace(global.keys,'stat',Return_VKey());                
                            change[6] = false;
                            cont_change = false;
                        }
                    case 7:
                        if change[7] == true
                        {
                            ds_map_replace(global.keys,'map',Return_VKey());                
                            change[7] = false;
                            cont_change = false;
                        }                
                        break; 
                    case 8:
                        if change[8] == true
                        {
                            ds_map_replace(global.keys,'inv',Return_VKey());                
                            change[8] = false;
                            cont_change = false;
                        } 
                    case 9:
                        if change[9] == true
                        {
                            ds_map_replace(global.keys,'sskill',Return_VKey());                
                            change[9] = false;
                            cont_change = false;
                        }
                    case 10:
                        if change[10] == true
                        {
                            ds_map_replace(global.keys,'tskill',Return_VKey());                
                            change[10] = false;
                            cont_change = false;
                        }                                               
                        break; 
                }
            }
            else if (cont_change)
            {
                cont_change=false;
                for (var it=0;it&lt;11;it++)
                {
                    change[it]=false;
                }
                display_message(160,212,"'"+Return_Key(Return_VKey())+"' is already in use!",2,true);
            }
        }
    }
    else
    {
        var jany = joystick_anykey(0);
        var gkey=gamepad_anykey();
        if (gkey || jany!=-1) and cont_change == true
        {
            if (!Gamepad_Has_Key(Return_CKey()))
            {
                var ggkey = Return_CKey();
                var change_key=(ggkey!=gp_padd &amp;&amp; ggkey!=gp_padl &amp;&amp; ggkey!=gp_padr &amp;&amp; ggkey!=gp_axislh &amp;&amp; ggkey!=gp_axisrv &amp;&amp; ggkey!=gp_axisrh &amp;&amp; ggkey!=gp_axislv &amp;&amp; ggkey!=gp_stickr
                &amp;&amp; ggkey!=gp_stickl) 
                &amp;&amp; (jany!=JOYSTICK_RSTICK_PUSHED_UP &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_LEFT &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_RIGHT &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_DOWN &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_LEFT &amp;&amp;
                jany!=JOYSTICK_LSTICK_PUSHED_UP &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_DOWN &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_RIGHT &amp;&amp;
                jany!=JOYSTICK_DPAD_RIGHT &amp;&amp;
                jany!=JOYSTICK_DPAD_LEFT &amp;&amp;
                jany!=JOYSTICK_DPAD_DOWN);
                
                if (menu_yy!=4)
                {
                    change_key = change_key &amp;&amp; (jany!=JOYSTICK_DPAD_UP &amp;&amp; ggkey!=gp_padu);
                }
                
                if (!change_key)
                {
                    if (gamepad_detected)
                    {
                        display_message(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-32,"Key '"+Return_ContKey(ggkey)+"' is system-reserved",1,true);
                    }
                    else if (joystick_detected)
                    {
                        display_message(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-32,"Key '"+Return_ContKey(jany)+"' is system-reserved",1,true);
                    }
                }
                
                if cont_act == "controller" &amp;&amp; change_key
                {
                    switch(menu_yy)
                    {
                        case 0:         
                            if change[0] == true
                            {                    
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'up',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'up',textcode_to_gamepad(translate_joystick_key(jany)));
                                }
                                change[0] = false;
                                cont_change = false;
                            }
                            break;
                        case 1:
                            if change[1] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'down',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'down',textcode_to_gamepad(translate_joystick_key(jany)));
                                }               
                                change[1] = false;
                                cont_change = false;
                            }                    
                            break;
                        case 2:
                            if change[2] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'left',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'left',textcode_to_gamepad(translate_joystick_key(jany)));
                                }               
                                change[2] = false;
                                cont_change = false;
                            }
                            break;
                        case 3:            
                            if change[3] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'right',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'right',textcode_to_gamepad(translate_joystick_key(jany)));
                                }
                                change[3] = false;
                                cont_change = false;
                            }
                            break;
                        case 4:                
                            if change[4] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'potion',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'potion',textcode_to_gamepad(translate_joystick_key(jany)));
                                }             
                                change[4] = false;
                                cont_change = false;
                            }
                            break;
                        case 5:
                            if change[5] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'pick',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'pick',textcode_to_gamepad(translate_joystick_key(jany)));
                                }              
                                change[5] = false;
                                cont_change = false;
                            }
                            break;  
                        case 6:
                            if change[6] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'stat',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'stat',textcode_to_gamepad(translate_joystick_key(jany)));
                                }                
                                change[6] = false;
                                cont_change = false;
                            }
                        case 7:
                            if change[7] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'map',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'map',textcode_to_gamepad(translate_joystick_key(jany)));
                                }
                                change[7] = false;
                                cont_change = false;
                            }                
                            break; 
                        case 8:
                            if change[8] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'inv',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'inv',textcode_to_gamepad(translate_joystick_key(jany)));
                                }               
                                change[8] = false;
                                cont_change = false;
                            } 
                        case 9:
                            if change[9] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'sskill',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'sskill',textcode_to_gamepad(translate_joystick_key(jany)));
                                }           
                                change[9] = false;
                                cont_change = false;
                            }
                        case 10:
                            if change[10] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'tskill',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'tskill',textcode_to_gamepad(translate_joystick_key(jany)));
                                }
                                change[10] = false;
                                cont_change = false;
                            }                                               
                            break;
                        case 11:
                            if change[11] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'fskill',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'fskill',textcode_to_gamepad(translate_joystick_key(jany)));
                                }
                                change[11] = false;
                                cont_change = false;
                            }                                               
                            break;   
                        case 12:
                            if change[12] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'askill',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'askill',textcode_to_gamepad(translate_joystick_key(jany)));
                                }
                                change[12] = false;
                                cont_change = false;
                            }                                               
                            break; 
                        case 13:
                            if change[13] == true
                            {
                                if (jany==-1)
                                {
                                    ds_map_replace(global.ckeys,'skillup',Return_CKey());
                                }
                                else
                                {
                                    ds_map_replace(global.ckeys,'skillup',textcode_to_gamepad(translate_joystick_key(jany)));
                                }
                                change[13] = false;
                                cont_change = false;
                            }                                               
                            break; 
                    }        
                }
            }
            else  if (cont_change)
            {
                cont_change=false;
                for (var it=0;it&lt;14;it++)
                {
                    change[it]=false;
                }
                if (jany==-1)
                {
                    display_message(160,212,"'"+Return_CKey()+"' is already in use!",2,true);
                }
                else
                {
                    display_message(160,212,"'"+textcode_to_gamepad(translate_joystick_key(jany))+"' is already in use!",2,true);
                }
            }
        }
    }  
}else
if menu_part == 4 and myy == -160   //MUSIC
{
    if gainf &gt; (global.msc_vol/100)*1
        gainf =(global.msc_vol/100)*1
    if gaint &gt; (global.msc_vol/100)*1
        gaint = (global.msc_vol/100)*1
    //
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 3
    }else
    if key_down
    {
        if menu_yy &lt; 3
            menu_yy += 1;
        else
            menu_yy = 0
    }               
    if key_right
    {
        //Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:             //MUSIC        
                if global.msc_vol &lt; 100 and global.mute = false
                    global.msc_vol += 1
                break;  
            case 1:             //SOUND 
                if global.sfx_vol &lt; 100 and global.mute = false
                    global.sfx_vol += 1                           
                break;               
             default:
                break;
        }
    }
    if key_pick
    {
        if menu_yy == 2             //SOUND 
        {
            if global.mute == true
            {
                global.mute = false
                global.msc_vol = 100;
                global.sfx_vol = 100;
            }
            else if global.mute == false
            {
                global.mute = true;
                global.msc_vol = 0;
                global.sfx_vol = 0;
            }
        } 
        if menu_yy == 3
        {
                         //BACK
                Save_Settings();
                menu_yy = 0;
                menu_part = 1;        
        }               
    }
    if key_left
    {
        //Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:             //MUSIC        
                if global.msc_vol &gt; 0 and global.mute = false
                    global.msc_vol -= 1
                break;  
            case 1:             //SOUND 
                if global.sfx_vol &gt; 0 and global.mute = false
                    global.sfx_vol -= 1                           
                break;
            default:
                break;
        }
    }    
}else
if menu_part == 5 and myy == -160   //RESOLUTION
{
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 9
    }else
    if key_down
    {
        if menu_yy &lt; 9
            menu_yy += 1;
        else
            menu_yy = 0;
    }
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:
                window_set_size(640,480);
                view_wport = 640;
                view_hport = 480;
                //surface_resize(application_surface,320,240);                
                global.screen_size = 0;
                break;
            case 1:
                window_set_size(800,600);
                view_wport = 800;
                view_hport = 600; 
                //surface_resize(application_surface,320,240);           
                global.screen_size = 1;
                break;
            case 2:
                window_set_size(1024,768);  
                view_wport = 1024;
                view_hport = 768;                            
                global.screen_size = 2;
                break;
            case 3:   
                window_set_size(1280,720);
                view_wport = 1280;
                view_hport = 720;                  
                global.screen_size = 3;
                break;
            case 4:   
                window_set_size(1360,768);
                view_wport = 1360;
                view_hport = 768;                                           
                global.screen_size = 4;
                break;
            case 5:
                window_set_size(1366,768);
                view_wport = 1366;
                view_hport = 768;                              
                global.screen_size = 5;
                break;
            case 6:
                window_set_size(1920,1080);
                view_wport = 1920;
                view_hport = 1080;                              
                global.screen_size = 6;
                break;  
            case 7:
                window_set_size(2560,1440);
                view_wport = 2560;
                view_hport = 1440;                              
                global.screen_size = 7;
                break;                             
            case 8:
                if global.full_screen == true
                {
                    window_set_fullscreen(false);
                    global.full_screen = false;
                }
                else
                if global.full_screen == false
                {
                    window_set_fullscreen(true);
                    global.full_screen = true;
                }                
                break;                
            case 9:
                Save_Settings();
                menu_yy =0;
                menu_part = 1;
                break;             
            default:
                break;                
        }
    }        
}else
if menu_part == 6 and myy == -160   //STATS
{
    menu_yy = 0            
    in_menu = true;
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        Save_Settings();
        menu_yy = 0;
        menu_part = 1;
    }
}
else
if menu_part == 7 and myy == -160 //CREDITS
{
    var contUp,contDown;
    
    if (gamepad_detected)
    {
        var cpad;
        cpad = gamepad_get_index(0);
        if (cpad!=-1)
        {
            contUp = gamepad_axis_value(pad,gp_axislv)&lt;-gamepad_axis_deadzone;
            contDown = gamepad_axis_value(pad,gp_axislv)&gt;gamepad_axis_deadzone;
        }
    }
    else if (joystick_detected)
    {
        contUp = joystick_check_stick_up(0);
        contDown = joystick_check_stick_down(0);
    }
    else
    {
        contUp = keyboard_check(ds_map_find_value(global.keys,'up'));
        contDown = keyboard_check(ds_map_find_value(global.keys,'down'));
    }
    
    if (contUp)
    {
        target_credits_scroll-=4;
    }
    else if (contDown)
    {
        target_credits_scroll+=4;
    }
    
    if (target_credits_scroll&lt;0)
    {
        target_credits_scroll=0;
    }
    else if (target_credits_scroll&gt;max_credits_scroll)
    {
        target_credits_scroll=max_credits_scroll;
    }
    var diff = target_credits_scroll-credits_scroll;
    if (diff&gt;2)
    {
        credits_scroll++;
    }
    else if (diff&lt;-2)
    {
        credits_scroll--;
    }
    else
    {
        credits_scroll=target_credits_scroll;
    }if (contUp)
    {
        target_credits_scroll-=4;
    }
    else if (contDown)
    {
        target_credits_scroll+=4;
    }
    
    if (target_credits_scroll&lt;0)
    {
        target_credits_scroll=0;
    }
    else if (target_credits_scroll&gt;max_credits_scroll)
    {
        target_credits_scroll=max_credits_scroll;
    }
    var diff = target_credits_scroll-credits_scroll;
    if (diff&gt;2)
    {
        credits_scroll++;
    }
    else if (diff&lt;-2)
    {
        credits_scroll--;
    }
    else
    {
        credits_scroll=target_credits_scroll;
    }
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);
                menu_yy = 0;             
                menu_part = 0;
    }
}
else
if menu_part == 8 and myy == -160 //GAMEPLAY
{
    //
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 9;
    }else
    if key_down
    {
        if menu_yy &lt; 9
            menu_yy += 1;
        else
            menu_yy = 0
    }          
    if key_pick
    {
        switch(menu_yy)
        {
            case 0:
                if global.screen_shake == true
                    global.screen_shake = false;
                else if global.screen_shake == false
                    global.screen_shake = true; 
                    
                break;
            case 1:
                if global.flash == true
                    global.flash = false;
                else if global.flash == false
                    global.flash = true;
                    
                break;
            case 2:
                if global.autocast == true
                    global.autocast = false;
                else if global.autocast == false
                    global.autocast = true;                    
                break;                
            case 3:
                if global.autopick == true
                    global.autopick = false;
                else if global.autopick == false
                    global.autopick = true;                    
                break; 
            case 4:
                if global.glow == true
                    global.glow = false;
                else if global.glow == false
                    global.glow = true;                    
                break;
            case 5:
                if global.hpbar == true
                    global.hpbar = false;
                else if global.hpbar == false
                    global.hpbar = true;                    
                break;
            case 6:
                if global.mapback == true
                    global.mapback = false;
                else if global.mapback == false
                    global.mapback = true;                    
                break;
            case 7:
                global.smooth_camera=!global.smooth_camera;
            break;
            case 8:
                global.vertical_sync=!global.vertical_sync;
                display_reset(display_aa,global.vertical_sync);
                change_resolution(global.screen_size);
            break;
            case 9:
                Save_Settings();
                menu_yy =0;
                menu_part = 1;
                break;             
            default:
                break;                           
        }
    }
}else
if menu_part == 9 and myy == -160   //RESET
{
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 1
    }else
    if key_down
    {
        if menu_yy &lt; 1
            menu_yy += 1;
        else
            menu_yy = 0;
    }
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:
                obj = instance_create(320/2,240/2,obj_Potion_Text);
                obj.text = "DATA DELETED!";
                obj.text_col = DS_YELLOW;            
                Reset_Data();
                break;                
            case 1:
                Save_Settings();
                menu_yy =0;
                menu_part = 1;
                break;             
            default:
                break;                
        }
    }        
}
if alpha &gt; 0
    alpha -= 0.01;
else
    alpha = 0;
    
if menu_part != 0
{
    if myy &gt; -160
        myy -= 4;
    if malpha &gt; 0
        malpha -= 0.1;
}else
{
    if myy &lt; 0
        myy += 4;
    if malpha &lt; 1
        malpha += 0.1;
    if opalpha &lt; 1
        opalpha += 0.025;
}
joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'pick'))]=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(part_sys);
part_type_destroy(part);
part_emitter_destroy(part_sys,emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (menu_part!=2)
{
    repeat(random(2))
    {
        with instance_create(320/2+choose(-random(8),random(8)),64+choose(-random(8),random(8)),obj_Circle_Part)
        {
            col = c_aqua;
            maxrad = random_range(6,8);
            rad = maxrad;
            fspd = 0.1;
            vspeed = -1-random(-1);
        }
    }
}
n+=1;

//SCALE
if cont_act == "keyboard"
    kbScale = 1+(cos(n/10)*.1);
else
    kbScale = 1;

if cont_act == "controller"
    cntScale = 1+(cos(n/10)*.1);
else
    cntScale = 1;

var key_up,key_down,key_left,key_right,key_pick,key_right_pressed,key_left_pressed,key_q,key_e;
key_up=false;
key_down=false;
key_left=false;
key_right=false;
key_left_pressed=false;
key_right_pressed=false;
key_pick=false;
key_q=false;
key_e=false;


    if (gamepad_detected)
    {
        if (!wait_gamepad)
        {
            var pad;
            pad = gamepad_get_index(0);
            if (pad!=-1)
            {
                key_up = gamepad_check_lpushed_up(pad);
                key_down = gamepad_check_lpushed_down(pad);
                key_left = gamepad_axis_value(pad,gp_axislh)&lt;-gamepad_axis_deadzone;
                key_right = gamepad_axis_value(pad,gp_axislh)&gt;gamepad_axis_deadzone;
                key_right_pressed = gamepad_check_lpushed_right(pad);
                key_left_pressed = gamepad_check_lpushed_left(pad);
                key_pick = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'pick'));//gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'fskill'));
                key_q = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'sskill'));
                key_e = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'tskill'));
            }
        }
    }
    else if (joystick_detected)
    {
        if (!wait_gamepad)
        {
            key_up = joystick_check_stick_pushed_up(0);
            key_down = joystick_check_stick_pushed_down(0);
            key_right_pressed = joystick_check_stick_pushed_right(0);
            key_left_pressed = joystick_check_stick_pushed_left(0);
            key_left = joystick_check_stick_left(0);
            key_right = joystick_check_stick_right(0);
            key_pick = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'pick'))];
            key_q = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'sskill'))];
            key_e = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'tskill'))];
        }
    }
    
    //{
        key_up=key_up||keyboard_check_pressed(ds_map_find_value(global.keys,'up'));
        key_down=key_down||keyboard_check_pressed(ds_map_find_value(global.keys,'down'));
        key_left=key_left||keyboard_check(ds_map_find_value(global.keys,'left'));
        key_right=key_right||keyboard_check(ds_map_find_value(global.keys,'right'));
        key_left_pressed=key_left_pressed||keyboard_check_pressed(ds_map_find_value(global.keys,'left'));
        key_right_pressed=key_right_pressed||keyboard_check_pressed(ds_map_find_value(global.keys,'right'));
        key_pick=key_pick||keyboard_check_pressed(ds_map_find_value(global.keys,'pick'));
        key_q=key_q||keyboard_check_pressed(ds_map_find_value(global.keys,'sskill'));
        key_e=key_e||keyboard_check_pressed(ds_map_find_value(global.keys,'tskill'));
    //}

if menu_part == 0 and myy == 0
{
    /*if (mouse_x &gt; 320/2-50 and mouse_x &lt; 320/2+50)
    {
        if mouse_y &gt; 240/2+48-4+(myy/2) and mouse_y &lt; 240/2+48+4+(myy/2)
        {
            menu_yy = 0;
            in_menu = true
        }
        else if mouse_y &gt; 240/2+56-4+(myy/2) and mouse_y &lt; 240/2+56+4+(myy/2)
        {
            menu_yy = 1;
            in_menu = true;
        }
        else if mouse_y &gt; 240/2+64-4+(myy/2) and mouse_y &lt; 240/2+64+4+(myy/2)
        {
            menu_yy = 2
            in_menu = true;
        }
        else if mouse_y &gt; 240/2+72-4+(myy/2) and mouse_y &lt; 240/2+72+4+(myy/2)
        {
            menu_yy = 3
            in_menu = true;
        }               
        else
        {
            in_menu = false;
        }
    }*/
    
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 5;
    }else
    if key_down
    {
        if menu_yy &lt; 5
            menu_yy += 1;
        else
            menu_yy = 0
    }
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);
        switch(menu_yy)
        {
            case 0:        //PLAY     
                if (!quick_saved)
                {
                    if !instance_exists(obj_FadeOut)
                        instance_create(x,y,obj_FadeOut);
                    room_goto_next();
                }
                else
                {
                    game_load("quick.dsb");
                    quick_saved = false;
                    ini_open("DGSC.ds");
                    ini_write_real(GENERAL_SECTION,QUICK_SAVED_KEY,quick_saved);
                    ini_close();
                }
                global.tutorial=false;
                break;
            case 2:         //TUTORIAL
                if !instance_exists(obj_FadeOut)
                    instance_create(x,y,obj_FadeOut);
                global.tutorial = true;
                global.tutorial_lvl = 0;
                room_goto_next();
                break;            
                
            case 1:
                menu_part=2;
                menu_yy=0;
                init_hero_weapons();
                //display_message(160,200,"Arcane Forge not available",1,true);
            break;
            case 3:         //OPTIONS
                menu_yy = 0;             
                menu_part = 1;
                break;
            case 4:         //CREDITS
                menu_yy = 0;
                menu_part = 7;
                break;
            case 5:         //QUIT
                game_end();
                break;
        }
    }
}else
if menu_part == 1 and myy == -160 //OPTIONS
{

    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 7
        
    }else
    if key_down
    {
        if menu_yy &lt; 7
            menu_yy += 1;
        else
            menu_yy = 0;
    }            
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:             //CONTROLS
                menu_yy = 0;
                menu_part = 3;  
                break;  
            case 1:             //MUSIC
                menu_yy = 0;
                menu_part = 4;
                break;
            case 2:             //RESOLUTION
                menu_yy = 0;
                menu_part = 5;
                break;
            case 3:             //STATS
                menu_yy = 0;
                menu_part = 6;
                break;                
            case 4:             //GAMEPLAY
                menu_yy = 0;
                menu_part = 8;
                break;
            case 5:             //RESET
                menu_yy = 0;
                menu_part = 9;
                break;
            case 6:             //ENABLE GAMEPAD
                enabled_gamepad=!enabled_gamepad;
            break;                
            case 7:             //BACK                
                Save_Settings();
                menu_yy = 0;
                menu_part = 0;
                game_restart()
                break;
        }
    }
}
else if (menu_part==2 &amp;&amp; myy==-160)
{
    if (!instance_exists(obj_Forge_Effect))
    {
        if (arcane_forge_mode==1) //Default
        {
            if (key_right_pressed)
            {
                arcane_forge_char++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_left_pressed)
            {
                arcane_forge_char--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (arcane_forge_char&gt;9)
            {
                arcane_forge_char-=10;
            }
            else if (arcane_forge_char&lt;0)
            {
                arcane_forge_char+=10;
            }
            
            if (key_down)
            {
                selected_recipe++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_up)
            {
                selected_recipe--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (selected_recipe&gt;=global.number_recipes)
            {
                selected_recipe-=global.number_recipes;
            }
            else if (selected_recipe&lt;0)
            {
                selected_recipe+=global.number_recipes;
            }
        }
        else if (arcane_forge_mode==0) //Weapon Inventory
        {
            var max_lines = max(global.forge_item_amount,9);
            if (key_right_pressed)
            {
                arcane_forge_item_slot++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_left_pressed)
            {
                arcane_forge_item_slot--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_up)
            {
                arcane_forge_item_slot-=3;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_down)
            {
                arcane_forge_item_slot+=3;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (arcane_forge_item_slot&gt;=max_lines)
            {
                arcane_forge_item_slot=max_lines-1;
            }
            else if (arcane_forge_item_slot&lt;0)
            {
                arcane_forge_item_slot=0;
            }
            arcane_forge_item_base_line=floor(arcane_forge_item_slot/3);
        }
        else if (arcane_forge_mode==2) //Ingredient Inventory
        {
            var max_lines = max(global.forge_item_amount,9);
            if (key_right_pressed)
            {
                arcane_forge_ing_slot++;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_left_pressed)
            {
                arcane_forge_ing_slot--;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_up)
            {
                arcane_forge_ing_slot-=4;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            else if (key_down)
            {
                arcane_forge_ing_slot+=4;
                Play_Sound(snd_choose,1,.5,0,5000,true,false);
            }
            if (arcane_forge_ing_slot&gt;=max_lines)
            {
                arcane_forge_ing_slot=max_lines-1;
            }
            else if (arcane_forge_ing_slot&lt;0)
            {
                arcane_forge_ing_slot=0;
            }
            arcane_forge_ing_base_line=floor(arcane_forge_ing_slot/4);
        }
        
        if (key_q)
        {
            arcane_forge_mode--;
            Play_Sound(snd_choose,1,.5,0,5000,true,false);
        }
        else if (key_e)
        {
            arcane_forge_mode++;
            Play_Sound(snd_choose,1,.5,0,5000,true,false);
        }
    }
    if (arcane_forge_mode&gt;2)
    {
        arcane_forge_mode-=3;
    }
    else if (arcane_forge_mode&lt;0)
    {
        arcane_forge_mode+=3;
    }

    if (global.number_recipes&gt;0)
    {
        //Ifs instead of attribution due to possible animation reset.
        if (global.total_coins&gt;=global.recipe_forge_cost[global.recipe[selected_recipe]])
        {
            arcane_forge_cost_complete=true;
        }
        else
        {
            arcane_forge_cost_complete=false;
        }
        
        var r_index = global.recipe[selected_recipe];
        
        arcane_forge_all_ingredients=true;
        for (var i=0;i&lt;global.recipe_ingredient_number[r_index];i++)
        {
            loaded_forge_ingredients=true;
            arcane_forge_ingredients[i]=forge_get_stack_count(global.recipe_ingredient_type[r_index,i]);
            arcane_forge_requirements[i]=(arcane_forge_ingredients[i]&gt;=global.recipe_ingredient_amount[r_index,i]);
            arcane_forge_all_ingredients=arcane_forge_all_ingredients &amp;&amp; arcane_forge_requirements[i];
        }
    }
    else
    {
        loaded_forge_ingredients=true;
    }
    
    var exit_key=false;
    if (gamepad_detected)
    {
        var _pad=gamepad_get_index(0);
        if (_pad!=-1)
        {
            exit_key=gamepad_button_check_pressed(_pad,gp_face2);
        }
    }
    else if (joystick_detected)
    {
        exit_key=joystick_button_pressed[0,2];
    }
    
    exit_key=exit_key||keyboard_check_pressed(vk_escape);
    
    if (key_pick)
    {
        if (arcane_forge_mode!=0)
        {
            if (global.number_recipes&gt;0)
            {
                if(!instance_exists(obj_Forge_Effect) &amp;&amp; can_forge_item(global.recipe[selected_recipe]))
                {
                    instance_create(160,90,obj_Forge_Effect);
                }
            }
        }
        else
        {
            if (arcane_forge_item_slot&lt;global.forge_item_amount)
            {
                equip_weapon(arcane_forge_item_slot,arcane_forge_char);
            }
        }
    }
    
    if (exit_key &amp;&amp; !instance_exists(obj_Forge_Effect))
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);
        menu_yy = 0;             
        menu_part = 0;
    }
}
else
if menu_part == 3 and myy == -160   //CONTROLS
{
    var extra;
    if menu_yy == -1
    {
        if key_left and cont_act != "keyboard"
            cont_act = "keyboard";
        else if key_right and cont_act != "controller"
            cont_act = "controller";
    }
    if (cont_act=="keyboard")
    {
        extra=0;
    }
    else
    {
        extra=3;
    }
        
    if key_up and cont_change = false
    {
        if menu_yy &gt; -1
            menu_yy -= 1
        else
            menu_yy = 11+extra
    }else
    if key_down and cont_change = false
    {
        if menu_yy &lt; 11+extra
            menu_yy += 1;
        else
            menu_yy = -1;
    }    
    if key_pick and cont_change = false
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:            
                if No_Key_Change() &amp;&amp; cont_act!="controller"  { change[0] = true; cont_change = true; }
                break;
            case 1:
                if No_Key_Change() &amp;&amp; cont_act!="controller" { change[1] = true; cont_change = true; }
                break;
            case 2:
                if No_Key_Change()  &amp;&amp; cont_act!="controller" { change[2] = true; cont_change = true; }
                break;
            case 3:            
                if No_Key_Change()  &amp;&amp; cont_act!="controller" { change[3] = true; cont_change = true; }
                break;
            case 4:                
                if No_Key_Change()  { change[4] = true; cont_change = true; }
                break;
            case 5:
                if No_Key_Change()  { change[5] = true; cont_change = true; }
                break;
            case 6:
                if No_Key_Change()  { change[6] = true; cont_change = true; }
                break;
            case 7:
                if No_Key_Change()  { change[7] = true; cont_change = true; }
                break;
            case 8:
                if No_Key_Change()  { change[8] = true; cont_change = true; }
                break;                                                 
            case 9:
                if No_Key_Change()  { change[9] = true; cont_change = true; }
                break;
            case 10:
                if No_Key_Change()  { change[10] = true; cont_change = true; }
                break;
            case 11:   
                if (extra==0)
                {
                    Save_Settings();
                    menu_yy = 0;             
                    menu_part = 1;
                }
                else
                {
                    if No_Key_Change()  { change[11] = true; cont_change = true; }
                }
                break;
            case 12:
                if (extra!=0)
                {
                    if No_Key_Change()  { change[12] = true; cont_change = true; }
                }
                break;
            case 13:
                if (extra!=0)
                {
                    if No_Key_Change()  { change[13] = true; cont_change = true; }
                }
                break;
            case 14:
                if (extra!=0)
                {
                    Save_Settings();
                    menu_yy = 0;             
                    menu_part = 1;
                }
                break;
            default:
                break;                
        }
    }else
    if keyboard_check_pressed(vk_anykey)
    { 
        if cont_act == "keyboard"
        {    
            switch(menu_yy)
            {
                case 0:         
                    if change[0] == true
                    {                    
                        ds_map_replace(global.keys,'up',Return_VKey());                
                        change[0] = false;
                        cont_change = false;
                    }
                    break;
                case 1:
                    if change[1] == true
                    {
                        ds_map_replace(global.keys,'down',Return_VKey());                
                        change[1] = false;
                        cont_change = false;
                    }                    
                    break;
                case 2:
                    if change[2] == true
                    {
                        ds_map_replace(global.keys,'left',Return_VKey());                
                        change[2] = false;
                        cont_change = false;
                    }
                    break;
                case 3:            
                    if change[3] == true
                    {
                        ds_map_replace(global.keys,'right',Return_VKey());                
                        change[3] = false;
                        cont_change = false;
                    }
                    break;
                case 4:                
                    if change[4] == true
                    {
                        ds_map_replace(global.keys,'potion',Return_VKey());                
                        change[4] = false;
                        cont_change = false;
                    }
                    break;
                case 5:
                    if change[5] == true
                    {
                        ds_map_replace(global.keys,'pick',Return_VKey());                
                        change[5] = false;
                        cont_change = false;
                    }
                    break;  
                case 6:
                    if change[6] == true
                    {
                        ds_map_replace(global.keys,'stat',Return_VKey());                
                        change[6] = false;
                        cont_change = false;
                    }
                case 7:
                    if change[7] == true
                    {
                        ds_map_replace(global.keys,'map',Return_VKey());                
                        change[7] = false;
                        cont_change = false;
                    }                
                    break; 
                case 8:
                    if change[8] == true
                    {
                        ds_map_replace(global.keys,'inv',Return_VKey());                
                        change[8] = false;
                        cont_change = false;
                    } 
                case 9:
                    if change[9] == true
                    {
                        ds_map_replace(global.keys,'sskill',Return_VKey());                
                        change[9] = false;
                        cont_change = false;
                    }
                case 10:
                    if change[10] == true
                    {
                        ds_map_replace(global.keys,'tskill',Return_VKey());                
                        change[10] = false;
                        cont_change = false;
                    }                                               
                    break; 
            }
        }
    }
    else
    {
        var jany = joystick_anykey(0);
        var gkey=gamepad_anykey();
        if (gkey || jany!=-1) and cont_change == true
        {
            var ggkey = Return_CKey();
            var change_key=(ggkey!=gp_padd &amp;&amp; ggkey!=gp_padl &amp;&amp; ggkey!=gp_padr &amp;&amp; ggkey!=gp_axislh &amp;&amp; ggkey!=gp_axisrv &amp;&amp; ggkey!=gp_axisrh &amp;&amp; ggkey!=gp_axislv &amp;&amp; ggkey!=gp_stickr
            &amp;&amp; ggkey!=gp_stickl) 
            &amp;&amp; (jany!=JOYSTICK_RSTICK_PUSHED_UP &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_LEFT &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_RIGHT &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_DOWN &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_LEFT &amp;&amp;
            jany!=JOYSTICK_LSTICK_PUSHED_UP &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_DOWN &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_RIGHT &amp;&amp;
            jany!=JOYSTICK_DPAD_RIGHT &amp;&amp;
            jany!=JOYSTICK_DPAD_LEFT &amp;&amp;
            jany!=JOYSTICK_DPAD_DOWN);
            
            if (menu_yy!=4)
            {
                change_key = change_key &amp;&amp; (jany!=JOYSTICK_DPAD_UP &amp;&amp; ggkey!=gp_padu);
            }
            
            if (!change_key)
            {
                if (gamepad_detected)
                {
                    display_message(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-32,"Key '"+Return_ContKey(ggkey)+"' is system-reserved",1,true);
                }
                else if (joystick_detected)
                {
                    display_message(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-32,"Key '"+Return_ContKey(jany)+"' is system-reserved",1,true);
                }
            }
            
            if cont_act == "controller" &amp;&amp; change_key
            {
                switch(menu_yy)
                {
                    case 0:         
                        if change[0] == true
                        {                    
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'up',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'up',textcode_to_gamepad(translate_joystick_key(jany)));
                            }
                            change[0] = false;
                            cont_change = false;
                        }
                        break;
                    case 1:
                        if change[1] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'down',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'down',textcode_to_gamepad(translate_joystick_key(jany)));
                            }               
                            change[1] = false;
                            cont_change = false;
                        }                    
                        break;
                    case 2:
                        if change[2] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'left',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'left',textcode_to_gamepad(translate_joystick_key(jany)));
                            }               
                            change[2] = false;
                            cont_change = false;
                        }
                        break;
                    case 3:            
                        if change[3] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'right',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'right',textcode_to_gamepad(translate_joystick_key(jany)));
                            }
                            change[3] = false;
                            cont_change = false;
                        }
                        break;
                    case 4:                
                        if change[4] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'potion',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'potion',textcode_to_gamepad(translate_joystick_key(jany)));
                            }             
                            change[4] = false;
                            cont_change = false;
                        }
                        break;
                    case 5:
                        if change[5] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'pick',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'pick',textcode_to_gamepad(translate_joystick_key(jany)));
                            }              
                            change[5] = false;
                            cont_change = false;
                        }
                        break;  
                    case 6:
                        if change[6] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'stat',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'stat',textcode_to_gamepad(translate_joystick_key(jany)));
                            }                
                            change[6] = false;
                            cont_change = false;
                        }
                    case 7:
                        if change[7] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'map',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'map',textcode_to_gamepad(translate_joystick_key(jany)));
                            }
                            change[7] = false;
                            cont_change = false;
                        }                
                        break; 
                    case 8:
                        if change[8] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'inv',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'inv',textcode_to_gamepad(translate_joystick_key(jany)));
                            }               
                            change[8] = false;
                            cont_change = false;
                        } 
                    case 9:
                        if change[9] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'sskill',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'sskill',textcode_to_gamepad(translate_joystick_key(jany)));
                            }           
                            change[9] = false;
                            cont_change = false;
                        }
                    case 10:
                        if change[10] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'tskill',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'tskill',textcode_to_gamepad(translate_joystick_key(jany)));
                            }
                            change[10] = false;
                            cont_change = false;
                        }                                               
                        break;
                    case 11:
                        if change[11] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'fskill',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'fskill',textcode_to_gamepad(translate_joystick_key(jany)));
                            }
                            change[11] = false;
                            cont_change = false;
                        }                                               
                        break;   
                    case 12:
                        if change[12] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'askill',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'askill',textcode_to_gamepad(translate_joystick_key(jany)));
                            }
                            change[12] = false;
                            cont_change = false;
                        }                                               
                        break; 
                    case 13:
                        if change[13] == true
                        {
                            if (jany==-1)
                            {
                                ds_map_replace(global.ckeys,'skillup',Return_CKey());
                            }
                            else
                            {
                                ds_map_replace(global.ckeys,'skillup',textcode_to_gamepad(translate_joystick_key(jany)));
                            }
                            change[13] = false;
                            cont_change = false;
                        }                                               
                        break; 
                }        
            }
        }
    }  
}else
if menu_part == 4 and myy == -160   //MUSIC
{
    if gainf &gt; (global.msc_vol/100)*1
        gainf =(global.msc_vol/100)*1
    if gaint &gt; (global.msc_vol/100)*1
        gaint = (global.msc_vol/100)*1
    //
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 3
    }else
    if key_down
    {
        if menu_yy &lt; 3
            menu_yy += 1;
        else
            menu_yy = 0
    }               
    if key_right
    {
        //Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:             //MUSIC        
                if global.msc_vol &lt; 100 and global.mute = false
                    global.msc_vol += 1
                break;  
            case 1:             //SOUND 
                if global.sfx_vol &lt; 100 and global.mute = false
                    global.sfx_vol += 1                           
                break;               
             default:
                break;
        }
    }
    if key_pick
    {
        if menu_yy == 2             //SOUND 
        {
            if global.mute == true
            {
                global.mute = false
                global.msc_vol = 100;
                global.sfx_vol = 100;
            }
            else if global.mute == false
            {
                global.mute = true;
                global.msc_vol = 0;
                global.sfx_vol = 0;
            }
        } 
        if menu_yy == 3
        {
                         //BACK
                Save_Settings();
                menu_yy = 0;
                menu_part = 1;        
        }               
    }
    if key_left
    {
        //Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:             //MUSIC        
                if global.msc_vol &gt; 0 and global.mute = false
                    global.msc_vol -= 1
                break;  
            case 1:             //SOUND 
                if global.sfx_vol &gt; 0 and global.mute = false
                    global.sfx_vol -= 1                           
                break;
            default:
                break;
        }
    }    
}else
if menu_part == 5 and myy == -160   //RESOLUTION
{
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 9
    }else
    if key_down
    {
        if menu_yy &lt; 9
            menu_yy += 1;
        else
            menu_yy = 0;
    }
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:
                window_set_size(640,480);
                view_wport = 640;
                view_hport = 480;
                //surface_resize(application_surface,320,240);                
                global.screen_size = 0;
                break;
            case 1:
                window_set_size(800,600);
                view_wport = 800;
                view_hport = 600; 
                //surface_resize(application_surface,320,240);           
                global.screen_size = 1;
                break;
            case 2:
                window_set_size(1024,768);  
                view_wport = 1024;
                view_hport = 768;                            
                global.screen_size = 2;
                break;
            case 3:   
                window_set_size(1280,720);
                view_wport = 1280;
                view_hport = 720;                  
                global.screen_size = 3;
                break;
            case 4:   
                window_set_size(1360,768);
                view_wport = 1360;
                view_hport = 768;                                           
                global.screen_size = 4;
                break;
            case 5:
                window_set_size(1366,768);
                view_wport = 1366;
                view_hport = 768;                              
                global.screen_size = 5;
                break;
            case 6:
                window_set_size(1920,1080);
                view_wport = 1920;
                view_hport = 1080;                              
                global.screen_size = 6;
                break;  
            case 7:
                window_set_size(2560,1440);
                view_wport = 2560;
                view_hport = 1440;                              
                global.screen_size = 7;
                break;                             
            case 8:
                if global.full_screen == true
                {
                    window_set_fullscreen(false);
                    global.full_screen = false;
                }
                else
                if global.full_screen == false
                {
                    window_set_fullscreen(true);
                    global.full_screen = true;
                }                
                break;                
            case 9:
                Save_Settings();
                menu_yy =0;
                menu_part = 1;
                break;             
            default:
                break;                
        }
    }        
}else
if menu_part == 6 and myy == -160   //STATS
{
    menu_yy = 0            
    in_menu = true;
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        Save_Settings();
        menu_yy = 0;
        menu_part = 1;
    }
}
else
if menu_part == 7 and myy == -160 //CREDITS
{
    var contUp,contDown;
    
    if (gamepad_detected)
    {
        var cpad;
        cpad = gamepad_get_index(0);
        if (cpad!=-1)
        {
            contUp = gamepad_axis_value(pad,gp_axislv)&lt;-gamepad_axis_deadzone;
            contDown = gamepad_axis_value(pad,gp_axislv)&gt;gamepad_axis_deadzone;
        }
    }
    else if (joystick_detected)
    {
        contUp = joystick_check_stick_up(0);
        contDown = joystick_check_stick_down(0);
    }
    else
    {
        contUp = keyboard_check(ds_map_find_value(global.keys,'up'));
        contDown = keyboard_check(ds_map_find_value(global.keys,'down'));
    }
    
    if (contUp)
    {
        target_credits_scroll-=4;
    }
    else if (contDown)
    {
        target_credits_scroll+=4;
    }
    
    if (target_credits_scroll&lt;0)
    {
        target_credits_scroll=0;
    }
    else if (target_credits_scroll&gt;max_credits_scroll)
    {
        target_credits_scroll=max_credits_scroll;
    }
    var diff = target_credits_scroll-credits_scroll;
    if (diff&gt;2)
    {
        credits_scroll++;
    }
    else if (diff&lt;-2)
    {
        credits_scroll--;
    }
    else
    {
        credits_scroll=target_credits_scroll;
    }
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);
                menu_yy = 0;             
                menu_part = 0;
    }
}
else
if menu_part == 8 and myy == -160 //GAMEPLAY
{
    //
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 9;
    }else
    if key_down
    {
        if menu_yy &lt; 9
            menu_yy += 1;
        else
            menu_yy = 0
    }          
    if key_pick
    {
        switch(menu_yy)
        {
            case 0:
                if global.screen_shake == true
                    global.screen_shake = false;
                else if global.screen_shake == false
                    global.screen_shake = true; 
                    
                break;
            case 1:
                if global.flash == true
                    global.flash = false;
                else if global.flash == false
                    global.flash = true;
                    
                break;
            case 2:
                if global.autocast == true
                    global.autocast = false;
                else if global.autocast == false
                    global.autocast = true;                    
                break;                
            case 3:
                if global.autopick == true
                    global.autopick = false;
                else if global.autopick == false
                    global.autopick = true;                    
                break; 
            case 4:
                if global.glow == true
                    global.glow = false;
                else if global.glow == false
                    global.glow = true;                    
                break;
            case 5:
                if global.hpbar == true
                    global.hpbar = false;
                else if global.hpbar == false
                    global.hpbar = true;                    
                break;
            case 6:
                if global.mapback == true
                    global.mapback = false;
                else if global.mapback == false
                    global.mapback = true;                    
                break;
            case 7:
                global.smooth_camera=!global.smooth_camera;
            break;
            case 8:
                global.vertical_sync=!global.vertical_sync;
                display_reset(display_aa,global.vertical_sync);
                change_resolution(global.screen_size);
            break;
            case 9:
                Save_Settings();
                menu_yy =0;
                menu_part = 1;
                break;             
            default:
                break;                           
        }
    }
}else
if menu_part == 9 and myy == -160   //RESET
{
    if key_up
    {
        if menu_yy &gt; 0
            menu_yy -= 1
        else
            menu_yy = 1
    }else
    if key_down
    {
        if menu_yy &lt; 1
            menu_yy += 1;
        else
            menu_yy = 0;
    }
    if key_pick
    {
        Play_Sound(snd_choose,1,.5,0,5000,true,false);    
        switch(menu_yy)
        {
            case 0:
                obj = instance_create(320/2,240/2,obj_Potion_Text);
                obj.text = "DATA DELETED!";
                obj.text_col = DS_YELLOW;            
                Reset_Data();
                break;                
            case 1:
                Save_Settings();
                menu_yy =0;
                menu_part = 1;
                break;             
            default:
                break;                
        }
    }        
}
if alpha &gt; 0
    alpha -= 0.01;
else
    alpha = 0;
    
if menu_part != 0
{
    if myy &gt; -160
        myy -= 4;
    if malpha &gt; 0
        malpha -= 0.1;
}else
{
    if myy &lt; 0
        myy += 4;
    if malpha &lt; 1
        malpha += 0.1;
    if opalpha &lt; 1
        opalpha += 0.025;
}
joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'pick'))]=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wview,view_hview);


draw_set_halign(fa_center);
draw_set_valign(fa_middle);

var baseX,baseY;
baseX = 160;
baseY=120;
var halfMYY=myy/2;

if (gamepad_get_last_update()&lt;10*room_speed)
{
    var base_time = 10*room_speed;
    draw_set_alpha(min(1,2*(base_time-gamepad_get_last_update())/base_time));
    if gamepad_is_supported()   //IF GAMEPAD SUPPORTED
    {
        if gamepad_detected //IF GAMEPAD IS CONNECTED
        {
            draw_sprite(spr_Gamepad_Icon,0,baseX,8);
            draw_set_color(c_gray);
            draw_text(baseX,24,"Controller Connected!");
        }
        else if (joystick_detected)
        {
            draw_sprite(spr_Gamepad_Icon,0,baseX,8);
            draw_set_color(c_gray);
            draw_text(baseX,24,"Generic Controller Connected!");
        }
        else   //NOT CONNECTED
        {
            draw_sprite(spr_Gamepad_Icon,1,baseX,8);
            draw_set_color(c_gray);    
            draw_text(baseX,24,"Controller not connected!");
        }
    }else   //NOT SUPPORTED
    {
        draw_sprite(spr_Gamepad_Icon,1,baseX,8);
        draw_set_color(c_gray);
        draw_text(baseX,24,"Controller not supported!");
    }
}
draw_set_alpha(1);
draw_set_font(font0);
if keyboard_check_pressed(ds_map_find_value(global.keys,'pick'))
    draw_set_color(c_white);
else
    draw_set_color(merge_colour(c_blue,c_aqua,0.5));
if menu_part == 0
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+48-4+(menu_yy*8)+halfMYY,baseX+32,baseY+48+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);
    draw_set_color(c_white);
    if (quick_saved)
    {
        draw_text(baseX,baseY+48+halfMYY,"Quick Start");
    }
    else
    {
        draw_text(baseX,baseY+48+halfMYY,"Start");
    }
    draw_text(baseX,baseY+56+halfMYY,"Arcane Forge");
    draw_text(baseX,baseY+64+halfMYY,"Tutorial");
    draw_text(baseX,baseY+72+halfMYY,"Options");
    draw_text(baseX,baseY+80+halfMYY,"Credits");
    draw_text(baseX,baseY+88+halfMYY,"Quit");
      
}else
if menu_part == 1
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+48-4+(menu_yy*8)+halfMYY,baseX+32,baseY+48+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_text(baseX,baseY+48+halfMYY,"Controls");
    draw_text(baseX,baseY+56+halfMYY,"Music");
    draw_text(baseX,baseY+64+halfMYY,"Resolution");
    draw_text(baseX,baseY+72+halfMYY,"Stats");    
    draw_text(baseX,baseY+80+halfMYY,"Gameplay");    
    draw_text(baseX,baseY+88+halfMYY,"Reset Data"); 
    var t;
    if (enabled_gamepad)
    {
        t="Disable Gamepad";
    }
    else
    {
        t="Enable Gamepad";
    }
    draw_text(baseX,baseY+96+halfMYY,t);
    draw_text(baseX,baseY+104+halfMYY,"Back");    
}
else if (menu_part==2)
{
    var using_gamepad = gamepad_detected || joystick_detected;
    var _desc="";
    var scroll_info="",forge_info="",hero_info="",inv_info="",switch_info="";
    var prev_key,next_key;
    if (using_gamepad)
    {
        switch (arcane_forge_mode)
        {
            case 2:
                scroll_info="LS-UP/LS-DOWN -vertical slot movement";
                forge_info = Return_ContKey(ds_map_find_value(global.ckeys,'left'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'right'))+"-horizontal slot movement";
                hero_info = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+"-switch menu";
                switch_info = "";
                prev_key=Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
                next_key=Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));
            break;
            case 1:
                scroll_info="LS-UP/LS-DOWN -scroll recipes";
                forge_info = Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"-forge item";
                hero_info = Return_ContKey(ds_map_find_value(global.ckeys,'left'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'right'))+"-switch hero";
                switch_info = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+"-switch menu";
                prev_key=Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
                next_key=Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));
            break;
        
            case 0:
                scroll_info="LS-UP/LS-DOWN -vertical slot movement";
                forge_info = Return_ContKey(ds_map_find_value(global.ckeys,'left'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'right'))+"-horizontal slot movement";
                hero_info = Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"-equip item";
                switch_info = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+"/"
                +Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+"-switch menu";
                prev_key=Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
                next_key=Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));
            break;
        }
    }
    else
    {
        switch (arcane_forge_mode)
        {
            case 2:
                scroll_info=Return_Key(ds_map_find_value(global.keys,'up'))+"/"+
                Return_Key(ds_map_find_value(global.keys,'down'))+"-vertical slot movement";
                forge_info = Return_Key(ds_map_find_value(global.keys,'left'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'right'))+"-horizontal slot movement";
                hero_info = Return_Key(ds_map_find_value(global.keys,'sskill'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'tskill'))+"-switch menu";
                switch_info = "";
                prev_key=Return_Key(ds_map_find_value(global.keys,'sskill'));
                next_key=Return_Key(ds_map_find_value(global.keys,'tskill'));
            break;
            case 1:
                scroll_info=Return_Key(ds_map_find_value(global.keys,'up'))+"/"+
                Return_Key(ds_map_find_value(global.keys,'down'))+"-scroll recipes";
                forge_info = Return_Key(ds_map_find_value(global.keys,'pick'))+"-forge item";
                hero_info = Return_Key(ds_map_find_value(global.keys,'left'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'right'))+"-switch hero";
                switch_info = Return_Key(ds_map_find_value(global.keys,'sskill'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'tskill'))+"-switch menu";
                prev_key=Return_Key(ds_map_find_value(global.keys,'sskill'));
                next_key=Return_Key(ds_map_find_value(global.keys,'tskill'));
            break;
        
            case 0:
                scroll_info=Return_Key(ds_map_find_value(global.keys,'up'))+"/"+
                Return_Key(ds_map_find_value(global.keys,'down'))+"-vertical slot movement";
                forge_info = Return_Key(ds_map_find_value(global.keys,'left'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'right'))+"-horizontal slot movement";
                hero_info = Return_Key(ds_map_find_value(global.keys,'pick'))+"-equip item";
                switch_info = Return_Key(ds_map_find_value(global.keys,'sskill'))+"/"
                +Return_Key(ds_map_find_value(global.keys,'tskill'))+"-switch menu";
                prev_key=Return_Key(ds_map_find_value(global.keys,'sskill'));
                next_key=Return_Key(ds_map_find_value(global.keys,'tskill'));
            break;
        }
    }
    draw_set_colour(c_gray);
        draw_set_halign(false);
        draw_set_valign(false);
        draw_text(baseX-156,baseY+halfMYY-20,scroll_info);
        draw_text(baseX-156,baseY+halfMYY-10,forge_info);
        draw_text(baseX-156,baseY+halfMYY,hero_info);
        draw_text(baseX-156,baseY+halfMYY+10,switch_info);

        var wear_types_x=baseX-124;
        draw_text(wear_types_x,baseY+halfMYY+43,"Can Equip:");
        switch (arcane_forge_char)
        {
            case 0:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe");
            break;
            case 1:
                draw_text(wear_types_x,baseY+halfMYY+51,"Bow");
            break;
            case 2:
                draw_text(wear_types_x,baseY+halfMYY+51,"Dagger#Knife");
            break;
            case 3:
                draw_text(wear_types_x,baseY+halfMYY+51,"Sword");
            break;
            case 4:
                draw_text(wear_types_x,baseY+halfMYY+51,"Staff");
            break;
            case 5:
                draw_text(wear_types_x,baseY+halfMYY+51,"Scepter#Staff");
            break;
            case 6:
                draw_text(wear_types_x,baseY+halfMYY+51,"Scepter#Staff");
            break;
            case 7:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe");
            break;
            case 8:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe#Sword");
            break;
            case 9:
                draw_text(wear_types_x,baseY+halfMYY+51,"Axe");
            break;
        }
    
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
    draw_set_color(c_white);
    //draw_set_font(font2);
    //draw_text(baseX,baseY+halfMYY+24,"Arcane Forge");
    //draw_set_font(font0);
    
    var coinOffset = string_width(string(global.total_coins))*0.5;
    
    draw_sprite(spr_Frame,arcane_forge_char,baseX-150,baseY+halfMYY+44);
    
    //DRAW TOTAL MOMEY
    draw_text(baseX-148,baseY+halfMYY+36,string(global.total_coins));
    draw_sprite(spr_Coin,0,baseX-144+coinOffset,baseY+halfMYY+35);
    
    if (arcane_forge_mode==1)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    var wtag,itag,rtag,ftag;
    switch (arcane_forge_mode)
    {
        case 0:
            wtag="["+next_key+"]";
            rtag="["+next_key+"]";
            itag="["+prev_key+"]";
            ftag="";
        break;
        case 1:
            wtag="";
            rtag="";
            itag="["+next_key+"]";
            ftag="["+prev_key+"]";
        break;
        case 2:
            wtag="["+prev_key+"]";
            rtag="["+prev_key+"]";
            itag="";
            ftag="["+next_key+"]";
        break;
    }
    draw_text(baseX-142,baseY+halfMYY+66,"Weapon"+wtag);
    draw_set_color(c_white);
    draw_set_color(c_gray);
    var forgeX=baseX,forgeY=90;
    draw_sprite(spr_Inventory_Slot,0,baseX-154,baseY+halfMYY+70);
    if (arcane_forge_cost_complete)
    {
        draw_set_colour(DS_BLUE);
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+64+(2*halfMYY),true);
        draw_set_colour(c_gray);
    }
    else
    {
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+64+(2*halfMYY),true);
    }
    if (arcane_forge_cost_complete &amp;&amp; arcane_forge_all_ingredients)
    {
        draw_set_colour(make_colour_rgb(140,150,230));
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+8+(1.5*halfMYY),true);
        draw_set_colour(c_gray);
    }
    else
    {
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+8+(1.5*halfMYY),true);
    }
    if (arcane_forge_all_ingredients)
    {
        draw_set_colour(make_colour_rgb(40,60,128));
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+halfMYY,true);
        draw_set_colour(c_gray);
    }
    else
    {
        draw_circle(forgeX,forgeY,arcane_forge_base_radius+halfMYY,true);
    }
    if (arcane_forge_mode==2)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    
    var extraOffset=1;
    draw_text(baseX-30,baseY+134+halfMYY,"Ingredients"+itag);
    draw_set_color(c_white);
    var ing_ind = 0;
    for (var i=0;i&lt;2;i++)
    {
        for (var j=0;j&lt;4;j++)
        {
            var __ind = ing_ind+arcane_forge_ing_base_line*4;
            if (j==(arcane_forge_ing_slot%4) &amp;&amp; i==0)
            {
                draw_sprite_ext(spr_Inventory_Slot,0,baseX-54+j*28,baseY+140+halfMYY+i*28,1,1,0,c_aqua,1);
                if (arcane_forge_mode==2)
                {
                    if (arcane_forge_ing_slot&lt;global.ingredients_amount)
                    {
                        _desc="["+global.ingredient_name[arcane_forge_ing_slot]+"]#"+global.ingredient_description[arcane_forge_ing_slot];
                    }
                }
            }
            else
            {
                draw_sprite(spr_Inventory_Slot,0,baseX-54+j*28,baseY+140+halfMYY+i*28);
            }
            if (__ind&lt;global.ingredients_amount)
            {
                draw_sprite(global.ingredient_type[__ind],0,baseX-42+j*28,baseY+152+halfMYY+i*28);
                draw_text_outlined(baseX-48+j*28,baseY+160+halfMYY+i*28,string(global.ingredient_count[__ind]),c_black,c_white);
            }
            ing_ind++;
        }
    }
    if (arcane_forge_mode==0)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    draw_text(baseX-114,baseY+halfMYY+110,"Forge Inventory"+ftag);
    draw_set_color(c_white);
    //var stop_condition = ceil(max(global.forge_item_amount,9)/3);
    var fg_it_count=0;
    for (var i=0;i&lt;3;i++)
    {
        for (var j=0;j&lt;3;j++)
        {
            var it_i = arcane_forge_item_base_line*3;
            if (arcane_forge_item_slot%3 == j &amp;&amp; i==0)
            {
                draw_sprite_ext(spr_Inventory_Slot,0,baseX-150+(j*24),baseY+halfMYY+120+(i*24),1,1,0,c_aqua,1);
                if (arcane_forge_item_slot&lt;global.forge_item_amount &amp;&amp; arcane_forge_mode==0)
                {
                    _desc="["+global.forge_item_name[arcane_forge_item_slot]+"]#"+global.forge_item_description[arcane_forge_item_slot];
                }
            }
            else
            {
                draw_sprite(spr_Inventory_Slot,0,baseX-150+(j*24),baseY+halfMYY+120+(i*24));
            }
            if (fg_it_count+it_i&lt;global.forge_item_amount)
            {
                draw_sprite_stretched(global.forge_item_sprite[fg_it_count+it_i],0,
                baseX-150+(j*24),baseY+halfMYY+120+(i*24),24,24);
            }
            fg_it_count++;
        }
    }
    if (arcane_forge_mode==1)
    {
        draw_set_color(c_yellow);
    }
    else
    {
        draw_set_color(c_white);
    }
    draw_text(baseX+116,baseY+halfMYY,"Recipe List"+rtag);
    draw_set_color(make_colour_rgb(47,32,47));
    draw_set_alpha(0.5);
    draw_rectangle(baseX+90,baseY+halfMYY+10,baseX+160,baseY+halfMYY+90,false);
    draw_set_alpha(1);
    draw_set_color(make_colour_rgb(47,16,47));
    draw_rectangle(baseX+89,baseY+halfMYY+9,baseX+160,baseY+halfMYY+90,true);
    draw_set_color(c_white);
    draw_sprite_stretched(global.arcane_forge_weapon_sprite[arcane_forge_char],0,baseX-153,baseY+halfMYY+71,20,20);
    if (global.number_recipes&gt;0)
    {
        var forge_text = "Forge ("+string(global.recipe_forge_cost[global.recipe[selected_recipe]]);
        if (arcane_forge_cost_complete &amp;&amp; arcane_forge_all_ingredients)
        {
            draw_set_colour(DS_BLUE);
            draw_rectangle(baseX-20-string_width(forge_text)*0.5,baseY+halfMYY+112,
                baseX+20+string_width(forge_text)*0.5,baseY+halfMYY+124,false);
            draw_set_colour(c_white);
        }
        draw_sprite(spr_Coin,0,baseX-1+string_width(forge_text)*0.5,baseY+halfMYY+119);
        draw_text(baseX,baseY+halfMYY+120,forge_text+"   )");
        extraOffset=global.recipe_ingredient_number[global.recipe[selected_recipe]];
        arcane_item_angle-=1/extraOffset;
        if (arcane_item_angle&lt;0)
        {
            arcane_item_angle+=360;
        }
        var hover_angle;
        var angle_offset=360/extraOffset;
        var ing_x,ing_y;
        for (var i=0;i&lt;extraOffset;i++)
        {
            hover_angle = degtorad(arcane_item_angle+(angle_offset*i));
            ing_x=forgeX+(arcane_forge_base_radius+halfMYY)*cos(hover_angle);
            ing_y=forgeY-(arcane_forge_base_radius+halfMYY)*sin(hover_angle);
            draw_sprite(global.recipe_ingredient_type[global.recipe[selected_recipe],i],0,ing_x,ing_y);
            var forge_index = i;
            if (!loaded_forge_ingredients)
            {
                forge_index=0;
            }
            draw_text_outlined(ing_x,ing_y+4,
                string(min(arcane_forge_ingredients[forge_index],
                global.recipe_ingredient_amount[global.recipe[selected_recipe],i]))+"/"+string(global.recipe_ingredient_amount[global.recipe[selected_recipe],i]),c_black,c_white);
        }
        hover_angle = degtorad(arcane_item_angle*extraOffset);
    
        draw_set_colour(c_white);
        draw_set_halign(false);
        draw_set_valign(false);
        if (selected_recipe==0)
        {
            draw_set_color(make_colour_rgb(63,48,63));
        }
        else
        {
            draw_set_colour(c_yellow);
        }
        draw_primitive_begin(pr_trianglelist);
            draw_vertex(baseX+125,baseY+halfMYY+14);
            draw_vertex(baseX+135,baseY+halfMYY+18);
            draw_vertex(baseX+115,baseY+halfMYY+18);
        draw_primitive_end();
        if (selected_recipe&gt;=global.number_recipes-1)
        {
            draw_set_color(make_colour_rgb(63,48,63));
        }
        else
        {
            draw_set_colour(c_yellow);
        }
        draw_primitive_begin(pr_trianglelist);
            draw_vertex(baseX+125,baseY+halfMYY+88);
            draw_vertex(baseX+135,baseY+halfMYY+84);
            draw_vertex(baseX+115,baseY+halfMYY+84);
        draw_primitive_end();
        draw_set_color(make_colour_rgb(47,16,47));
        draw_line(baseX+90,baseY+halfMYY+22,baseX+160,baseY+halfMYY+22);
        draw_line(baseX+90,baseY+halfMYY+78,baseX+160,baseY+halfMYY+78);
        draw_set_colour(c_white);
        {
            if (selected_recipe&lt;global.number_recipes)
            {
                draw_sprite_stretched(global.recipe_sprite[global.recipe[selected_recipe]],0,baseX+92,baseY+halfMYY+24,12,12);
                draw_text_ext(baseX+92,baseY+halfMYY+40,global.recipe_name[global.recipe[selected_recipe]],-1,128);
                draw_text_ext(baseX+92,baseY+halfMYY+56,"Type: "+string(global.recipe_type[global.recipe[selected_recipe]]),-1,128);
            }
            if (arcane_forge_mode==1)
            {
                _desc=global.recipe_description[global.recipe[selected_recipe]];
            }
            draw_sprite_stretched_ext(global.recipe_result[global.recipe[selected_recipe]],0,forgeX-12,-12+forgeY-4*sin(hover_angle),24,24,c_white,0.2);
        }
    }
    else
    {
        draw_text(baseX+122,baseY+halfMYY+60,"You have#no recipes");
    }
    draw_set_color(c_white);
    if (_desc!="")
    {
        draw_set_halign(false);
        draw_set_valign(false);
        draw_text(baseX+94,baseY+104+halfMYY,"Description");
        draw_text_ext(baseX+94,baseY+116+halfMYY,_desc,-1,64);
    }
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    //draw_sprite(spr_Mouse_Cursor,0,mouse_x,mouse_y);
    //draw_text(baseX,baseY+186+halfMYY,"Back"); 
}




else
if menu_part == 3
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+48-4+(menu_yy*8)+halfMYY,baseX+32,baseY+48+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);
    
    draw_sprite_ext(spr_KbOpt,(cont_act == "keyboard"),baseX-64,64,kbScale,kbScale,0,image_blend,1);
    draw_sprite_ext(spr_CntOpt,(cont_act == "controller"),baseX+64,64,cntScale,cntScale,0,image_blend,1);
    
    var col,extra;
    col = c_white;
    extra=0;
    if (cont_act!="keyboard")
    {
        col=c_red;
    }
    draw_set_color(col);
    draw_set_halign(fa_right);
    draw_text(baseX-4,baseY+48+halfMYY,"Key Up - ");
    draw_text(baseX-4,baseY+56+halfMYY,"Key Down - ");
    draw_text(baseX-4,baseY+64+halfMYY,"Key Left - ");
    draw_text(baseX-4,baseY+72+halfMYY,"Key Right - ");
    draw_set_color(c_white);
    draw_text(baseX-4,baseY+80+halfMYY,"Use Item - ");
    draw_text(baseX-4,baseY+88+halfMYY,"Pick up/Select - ");
    draw_text(baseX-4,baseY+96+halfMYY,"Stats Menu - ");
    draw_text(baseX-4,baseY+104+halfMYY,"Open Map - ");
    draw_text(baseX-4,baseY+112+halfMYY,"Open Inventory - ");
    draw_text(baseX-4,baseY+120+halfMYY,"Second Ability - ");
    draw_text(baseX-4,baseY+128+halfMYY,"Third Ability - ");
    if cont_act == "keyboard"
    {
        var DEVICE = "KEYBOARD &gt;";
        if change[0] == true var kUP = "Press any key..." else var kUP = Return_Key(ds_map_find_value(global.keys,'up'));
        if change[1] == true var kDOWN = "Press any key..." else var kDOWN = Return_Key(ds_map_find_value(global.keys,'down'));
        if change[2] == true var kLEFT = "Press any key..." else var kLEFT = Return_Key(ds_map_find_value(global.keys,'left'));
        if change[3] == true var kRIGHT = "Press any key..." else var kRIGHT = Return_Key(ds_map_find_value(global.keys,'right'));
        if change[4] == true var kITEM = "Press any key..." else var kITEM = Return_Key(ds_map_find_value(global.keys,'potion'));
        if change[5] == true var kPICK = "Press any key..." else var kPICK = Return_Key(ds_map_find_value(global.keys,'pick'));
        if change[6] == true var kSTAT = "Press any key..." else var kSTAT = Return_Key(ds_map_find_value(global.keys,'stat'));    
        if change[7] == true var kMAP = "Press any key..." else var kMAP = Return_Key(ds_map_find_value(global.keys,'map'));
        if change[8] == true var kINV = "Press any key..." else var kINV = Return_Key(ds_map_find_value(global.keys,'inv'));
        if change[9] == true var kSSKILL = "Press any key..." else var kSSKILL = Return_Key(ds_map_find_value(global.keys,'sskill'));
        if change[10] == true var kTSKILL = "Press any key..." else var kTSKILL = Return_Key(ds_map_find_value(global.keys,'tskill'));
    }else
    {
        draw_text(baseX-4,baseY+136+halfMYY,"First Ability - ");
        draw_text(baseX-4,baseY+144+halfMYY,"Cast Ability - ");
        draw_text(baseX-4,baseY+152+halfMYY,"Skill Hub - ");
        extra=24;
        var DEVICE = "&lt; CONTROLLER";    
        if change[0] == true var kUP = "Press any key..." else var kUP = Return_ContKey(ds_map_find_value(global.ckeys,'up'));
        if change[1] == true var kDOWN = "Press any key..." else var kDOWN = Return_ContKey(ds_map_find_value(global.ckeys,'down'));
        if change[2] == true var kLEFT = "Press any key..." else var kLEFT = Return_ContKey(ds_map_find_value(global.ckeys,'left'));
        if change[3] == true var kRIGHT = "Press any key..." else var kRIGHT = Return_ContKey(ds_map_find_value(global.ckeys,'right'));
        if change[4] == true var kITEM = "Press any key..." else var kITEM = Return_ContKey(ds_map_find_value(global.ckeys,'potion'));
        if change[5] == true var kPICK = "Press any key..." else var kPICK = Return_ContKey(ds_map_find_value(global.ckeys,'pick'));
        if change[6] == true var kSTAT = "Press any key..." else var kSTAT = Return_ContKey(ds_map_find_value(global.ckeys,'stat'));    
        if change[7] == true var kMAP = "Press any key..." else var kMAP = Return_ContKey(ds_map_find_value(global.ckeys,'map'));
        if change[8] == true var kINV = "Press any key..." else var kINV = Return_ContKey(ds_map_find_value(global.ckeys,'inv'));
        if change[9] == true var kSSKILL = "Press any key..." else var kSSKILL = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
        if change[10] == true var kTSKILL = "Press any key..." else var kTSKILL = Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));    
        if change[11] == true var kFSKILL = "Press any key..." else var kFSKILL = Return_ContKey(ds_map_find_value(global.ckeys,'fskill'));  
        if change[12] == true var kASKILL = "Press any key..." else var kASKILL = Return_ContKey(ds_map_find_value(global.ckeys,'askill'));  
        if change[13] == true var kSKILLUP = "Press any key..." else var kSKILLUP = Return_ContKey(ds_map_find_value(global.ckeys,'skillup'));  
    }
    draw_set_halign(fa_center);
    draw_text(baseX,baseY+40+halfMYY,DEVICE);
    draw_set_halign(fa_left);
    if (cont_act=="controller")
    {
        draw_set_color(c_red);
    }
    draw_text(baseX+8,baseY+48+halfMYY,kUP);
    draw_text(baseX+8,baseY+56+halfMYY,kDOWN);
    draw_text(baseX+8,baseY+64+halfMYY,kLEFT);
    draw_text(baseX+8,baseY+72+halfMYY,kRIGHT);
    if (cont_act=="controller")
    {
        draw_set_color(c_white);
    }
    draw_text(baseX+8,baseY+80+halfMYY,kITEM);
    draw_text(baseX+8,baseY+88+halfMYY,kPICK);
    draw_text(baseX+8,baseY+96+halfMYY,kSTAT);
    draw_text(baseX+8,baseY+104+halfMYY,kMAP);
    draw_text(baseX+8,baseY+112+halfMYY,kINV);
    draw_text(baseX+8,baseY+120+halfMYY,kSSKILL);
    draw_text(baseX+8,baseY+128+halfMYY,kTSKILL);
    if (extra!=0)
    {
        draw_text(baseX+8,baseY+136+halfMYY,kFSKILL);
        draw_text(baseX+8,baseY+144+halfMYY,kASKILL);
        draw_text(baseX+8,baseY+152+halfMYY,kSKILLUP);
    }
    draw_set_halign(fa_center)
    draw_text(baseX,baseY+136+extra+halfMYY,"Back");        
}else
if menu_part == 4
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+48-4+(menu_yy*8)+halfMYY,baseX+32,baseY+48+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_halign(fa_right)
    draw_text(baseX-4,baseY+48+halfMYY,"Music Volume:");
    draw_text(baseX-4,baseY+56+halfMYY,"Sound Volume:");
    draw_text(baseX-4,baseY+64+halfMYY,"Mute:");    
    draw_set_halign(fa_left);
    if global.mute draw_text(baseX+4,baseY+64+halfMYY,"No"); else draw_text(baseX+4,baseY+64+halfMYY,"Yes");
    //draw_sprite(spr_Volume_Bar,0,baseX+4,baseY+48+halfMYY-4);
    //draw_sprite(spr_Volume_Bar,0,baseX+4,baseY+56+halfMYY-4);    
    draw_sprite_stretched(spr_Volume_Fill,0,baseX+4+1,baseY+48+halfMYY-3,(global.msc_vol/100)*30,6)
    draw_sprite_stretched(spr_Volume_Fill,0,baseX+4+1,baseY+56+halfMYY-3,(global.sfx_vol/100)*30,6)    
    draw_text(baseX+48,baseY+48+halfMYY,string(global.msc_vol)+"%");
    draw_text(baseX+48,baseY+56+halfMYY,string(global.sfx_vol)+"%");        
    draw_set_halign(fa_center);    
    draw_text(baseX,baseY+72+halfMYY,"Back");
    draw_set_color(c_gray);
    if (gamepad_detected || joystick_detected)
    {
        draw_text(baseX,baseY+88+halfMYY,"["+Return_ContKey(ds_map_find_value(global.ckeys,'right')) +"] - Increase Volume");        
        draw_text(baseX,baseY+96+halfMYY,"["+Return_ContKey(ds_map_find_value(global.ckeys,'left')) +"] - Decrease Volume");
    }
    else
    {
        draw_text(baseX,baseY+88+halfMYY,"["+Return_Key(ds_map_find_value(global.keys,'right')) +"] - Increase Volume");        
        draw_text(baseX,baseY+96+halfMYY,"["+Return_Key(ds_map_find_value(global.keys,'left')) +"] - Decrease Volume");
    }
    draw_set_color(c_white);    
             
}else
if menu_part == 5
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+48-4+(menu_yy*8)+halfMYY,baseX+32,baseY+48+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);    
    if global.screen_size = 0 then draw_set_color(c_white); else draw_set_color(c_gray);
    draw_text(baseX,baseY+48+halfMYY,"640x480");
    if global.screen_size = 1 then draw_set_color(c_white); else draw_set_color(c_gray); 
    draw_text(baseX,baseY+56+halfMYY,"800x600");
    if global.screen_size = 2 then draw_set_color(c_white); else draw_set_color(c_gray); 
    draw_text(baseX,baseY+64+halfMYY,"1024x768")
    if global.screen_size = 3 then draw_set_color(c_white); else draw_set_color(c_gray); 
    draw_text(baseX,baseY+72+halfMYY,"1280x720");
    if global.screen_size = 4 then draw_set_color(c_white); else draw_set_color(c_gray); 
    draw_text(baseX,baseY+80+halfMYY,"1360x768");
    if global.screen_size = 5 then draw_set_color(c_white); else draw_set_color(c_gray); 
    draw_text(baseX,baseY+88+halfMYY,"1366x768");
    if global.screen_size = 6 then draw_set_color(c_white); else draw_set_color(c_gray); 
    draw_text(baseX,baseY+96+halfMYY,"1920x1080"); 
    if global.screen_size = 7 then draw_set_color(c_white); else draw_set_color(c_gray); 
    draw_text(baseX,baseY+104+halfMYY,"2560x1440");          
    draw_set_color(c_white);
    if global.full_screen == true then draw_text(baseX,baseY+112+halfMYY,"Fullscreen: ON"); else draw_text(baseX,baseY+112+halfMYY,"Fullscreen: OFF");
    draw_text(baseX,baseY+120+halfMYY,"Back");        
}else
if menu_part == 6
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+152-4+(menu_yy*8)+halfMYY,baseX+32,baseY+152+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);  
    draw_set_color(c_white);  
    draw_set_halign(fa_right)
    draw_text(baseX-4,baseY+48+halfMYY,"Deaths:");
    draw_text(baseX-4,baseY+56+halfMYY,"Kills:");
    draw_text(baseX-4,baseY+64+halfMYY,"Boss Kill:");    
    draw_text(baseX-4,baseY+72+halfMYY,"Coins:");
    draw_text(baseX-4,baseY+80+halfMYY,"Item Collected:");
    draw_text(baseX-4,baseY+88+halfMYY,"Highest Level Reached:");    
    draw_set_halign(fa_left)
    draw_set_color(c_gray);
    draw_text(baseX+4,baseY+48+halfMYY,string(global.deaths));
    draw_text(baseX+4,baseY+56+halfMYY,string(global.en_kills));    
    draw_text(baseX+4,baseY+64+halfMYY,string(global.boss_kill));
    draw_text(baseX+4,baseY+72+halfMYY,string(floor(global.all_coin)));
    draw_text(baseX+4,baseY+80+halfMYY,string(floor(global.item_get)));    
    draw_text(baseX+4,baseY+88+halfMYY,string(global.highest_level)+" "+string(global.highest_loop));
    draw_set_halign(fa_center)        
    draw_set_color(c_white)
    draw_text(baseX,baseY+152+halfMYY,"Back")
}else
if menu_part == 7
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+240-4+(menu_yy*8)+halfMYY-credits_scroll,baseX+32,baseY+240+3+(menu_yy*8)+halfMYY-credits_scroll,false)
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_text(baseX,baseY+32+halfMYY-credits_scroll,"DUNGEON SOULS");
    draw_text(baseX,baseY+48+halfMYY-credits_scroll,"Diogo Braga"); //Mike Renevo
    draw_text(baseX,baseY+64+halfMYY-credits_scroll,"April Poland");
    draw_set_color(c_gray);        
    draw_text(baseX,baseY+56+halfMYY-credits_scroll,"Lead Developer");//Developer
    draw_text(baseX,baseY+72+halfMYY-credits_scroll,"Executive Producer");
    draw_set_color(c_white);    
    draw_set_halign(fa_right)
    draw_text(baseX-8,baseY+88+halfMYY-credits_scroll,"Carlos Vila");    
    draw_text(baseX-8,baseY+96+halfMYY-credits_scroll,"Unfamiliar Identity");
    draw_text(baseX-8,baseY+104+halfMYY-credits_scroll,"Joe O'Quinn");
    draw_text(baseX-8,baseY+112+halfMYY-credits_scroll,"Christopher Van Ejik");  
    draw_text(baseX-8,baseY+120+halfMYY-credits_scroll,"Digital Sun Enterprises");  
    draw_text(baseX-8,baseY+136+halfMYY-credits_scroll,"Mike Renevo"); //Diogo Braga
    draw_text(baseX-8,baseY+144+halfMYY-credits_scroll,"Igor Grincu"); 
    draw_text(baseX-8,baseY+152+halfMYY-credits_scroll,"Mike Renevo"); //Piotrek Antoniak
    draw_text(baseX-8,baseY+160+halfMYY-credits_scroll,"Paul Benedict Galvez");
    draw_text(baseX-8,baseY+168+halfMYY-credits_scroll,"Louise Palomar");
    draw_text(baseX-8,baseY+176+halfMYY-credits_scroll,"Piotrek Antoniak");
    draw_text(baseX-8,baseY+184+halfMYY-credits_scroll,"Yannik Langener");
    draw_text(baseX-8,baseY+192+halfMYY-credits_scroll,"Diogo Braga");
    draw_text(baseX-8,baseY+208+halfMYY-credits_scroll,"Ovais Malik");
    draw_text(baseX-8,baseY+232+halfMYY-credits_scroll,"Black Shell Media");
    draw_set_halign(fa_left)    
    draw_set_color(c_gray);
    draw_text(baseX+8,baseY+88+halfMYY-credits_scroll,"Programmer, Game Designer");    
    draw_text(baseX+8,baseY+96+halfMYY-credits_scroll,"Music Composers");
    draw_text(baseX+8,baseY+136+halfMYY-credits_scroll,"Developer");
    draw_text(baseX+8,baseY+144+halfMYY-credits_scroll,"Pixel Artist");
    draw_text(baseX+8,baseY+152+halfMYY-credits_scroll,"Pixel Artist");
    draw_text(baseX+8,baseY+160+halfMYY-credits_scroll,"Graphic Artist");
    draw_text(baseX+8,baseY+168+halfMYY-credits_scroll,"Promotional Art");
    draw_text(baseX+8,baseY+176+halfMYY-credits_scroll,"Digital Artist");
    draw_text(baseX+8,baseY+184+halfMYY-credits_scroll,"Voice Actor (Soul Guardian)");
    draw_text(baseX+8,baseY+192+halfMYY-credits_scroll,"Voice Actor (Skeleton King");
    draw_text(baseX+8,baseY+200+halfMYY-credits_scroll,"&amp; Gigantum Slime)");
    draw_text(baseX+8,baseY+208+halfMYY-credits_scroll,"Voice Actor (Judgement");
    draw_text(baseX+8,baseY+216+halfMYY-credits_scroll,"&amp; Redeemer)");
    draw_text(baseX+8,baseY+232+halfMYY-credits_scroll,"Publisher");
    draw_set_halign(fa_center)
    draw_set_color(c_white);        
    draw_text(baseX,baseY+240+halfMYY-credits_scroll,"Back");
}else
if menu_part == 8
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-64,baseY+48-4+(menu_yy*8)+halfMYY,baseX+64,baseY+48+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_halign(fa_right)
    draw_text(baseX-4,baseY+48+halfMYY,"Screenshake: ");
    draw_text(baseX-4,baseY+56+halfMYY,"White/Red Flashes: "); 
    draw_text(baseX-4,baseY+64+halfMYY,"Skill Auto-cast: "); 
    draw_text(baseX-4,baseY+72+halfMYY,"Item Auto-pick: "); 
    draw_text(baseX-4,baseY+80+halfMYY,"Glow: ");
    draw_text(baseX-4,baseY+88+halfMYY,"Display Hp Bar: "); 
    draw_text(baseX-4,baseY+96+halfMYY,"Map Frame: "); 
    draw_text(baseX-4,baseY+104+halfMYY,"Smooth Camera: "); 
    draw_text(baseX-4,baseY+112+halfMYY,"Vertical Sync: ");
    draw_set_halign(fa_left);
    if global.screen_shake draw_text(baseX+4,baseY+48+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+48+halfMYY,"Disabled");    
    if global.flash draw_text(baseX+4,baseY+56+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+56+halfMYY,"Disabled");    
    if global.autocast draw_text(baseX+4,baseY+64+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+64+halfMYY,"Disabled");    
    if global.autopick draw_text(baseX+4,baseY+72+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+72+halfMYY,"Disabled");    
    if global.glow draw_text(baseX+4,baseY+80+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+80+halfMYY,"Disabled");    
    if global.hpbar draw_text(baseX+4,baseY+88+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+88+halfMYY,"Disabled");    
    if global.mapback draw_text(baseX+4,baseY+96+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+96+halfMYY,"Disabled");        
    if global.smooth_camera draw_text(baseX+4,baseY+104+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+104+halfMYY,"Disabled");        
    if global.vertical_sync draw_text(baseX+4,baseY+112+halfMYY,"Enabled"); else draw_text(baseX+4,baseY+112+halfMYY,"Disabled");        
    draw_set_halign(fa_center);    
    draw_text(baseX,baseY+120+halfMYY,"Back");
    draw_set_color(c_white);    
             
}else
if menu_part == 9
{
    draw_set_alpha(0.4);
    draw_rectangle(baseX-32,baseY+80-4+(menu_yy*8)+halfMYY,baseX+32,baseY+80+3+(menu_yy*8)+halfMYY,false)
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_text(baseX,baseY+48+halfMYY,"RESET YOUR PROGRESS");
    draw_text(baseX,baseY+64+halfMYY,"Are you sure?");
    draw_set_color(c_gray);
    draw_text(baseX,baseY+80+halfMYY,"Yes");        
    draw_text(baseX,baseY+88+halfMYY,"No");
}
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_set_color(c_dkgray);
if gamepad_detected || joystick_detected
{
    var itxt = Return_ContKey(ds_map_find_value(global.ckeys,'up'))+" - Up#";
    itxt += Return_ContKey(ds_map_find_value(global.ckeys,'down'))+" - Down#";
    itxt += Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+" - Select#";
}else
{
    var itxt = Return_Key(ds_map_find_value(global.keys,'up'))+" - Up#";
    itxt += Return_Key(ds_map_find_value(global.keys,'down'))+" - Down#";
    itxt += Return_Key(ds_map_find_value(global.keys,'pick'))+" - Select#";
}
if (menu_part!=2)
{
    draw_text(16,240-4,itxt);
    draw_set_halign(fa_center);
    draw_set_color(c_gray);
    var ver = "Beta v2.9";
    draw_text(baseX,240-12,ver);
    draw_sprite_ext(spr_Copyright,0,baseX,240-8,1,1,0,c_gray,1);
    draw_set_halign(false);
    draw_set_valign(false);
    
    draw_set_alpha(.8);
    draw_set_color(c_black);
    draw_rectangle(0,0,320,240,false);
    draw_set_alpha(1);
}
//draw_sprite(spr_Mouse_Cursor,0,mouse_x,mouse_y)
//CONTROLS
/*draw_set_halign(fa_left);
draw_set_color(c_gray);
var controls = Return_Key(ds_map_find_value(global.keys,"up"))+","+Return_Key(ds_map_find_value(global.keys,"down"))+" - Choose#";
controls += Return_Key(ds_map_find_value(global.keys,"pick"))+" - Select#";
draw_text(32,240-32,controls);
draw_set_halign(false);*/

//draw_sprite_ext(spr_Mouse_Cursor,0,mouse_x,mouse_y,1,1,image_angle,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_MenuOLD</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (menu_part!=2)
{
    var baseX=160,baseY=120;
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(1),-random(1)),((baseY))+myy+choose(random(1),-random(1)),1,1,0,c_aqua,malpha/6); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(1),-random(1)),((baseY))+myy+choose(random(1),-random(1)),1,1,0,c_aqua,malpha/6); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(1),-random(1)),((baseY))+myy+choose(random(1),-random(1)),1,1,0,c_aqua,malpha/6); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(1),-random(1)),((baseY))+myy+choose(random(1),-random(1)),1,1,0,c_aqua,malpha/6); //+sin(n/10)*4
    
    draw_sprite_ext(spr_Menu,2,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_purple,malpha/4); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,2,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_purple,malpha/4); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,2,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_purple,malpha/4); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,2,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_purple,malpha/4); //+sin(n/10)*4
    draw_set_blend_mode(bm_normal);
    
    draw_sprite_ext(spr_Menu,0,baseX,((baseY))+myy+32,1,1,0,c_black,malpha/3); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,0,baseX,((baseY))+myy,1,1,0,image_blend,malpha); //+sin(n/10)*4
    n+=1;
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_white,malpha/6); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_white,malpha/6); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_white,malpha/6); //+sin(n/10)*4
    draw_sprite_ext(spr_Menu,1,baseX+choose(random(2),-random(2)),((baseY))+myy+choose(random(2),-random(2)),1,1,0,c_white,malpha/6); //+sin(n/10)*4
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>135,77</point>
    <point>135,135</point>
  </PhysicsShapePoints>
</object>
