<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TUTORIAL
tut_vs = 2;
tut_cp = "";
ctr = 0;


//init_gamepad_joystick(1);

if (global.pad[GAMEPAD_1]) {

    tut[1] = "Welcome to the DUNGEON #You must be new here.#Try MOVING AROUND using "+Return_ContKey(ds_map_find_value(global.ckeys,'up'))+","+Return_ContKey(ds_map_find_value(global.ckeys,'left'))+","+Return_ContKey(ds_map_find_value(global.ckeys,'down'))+","+Return_ContKey(ds_map_find_value(global.ckeys,'right'));
    
    tut[2] = "Good job! If you want to survive here, #you should know how to defend yourself#use "+Return_ContKey(ds_map_find_value(global.ckeys,'fskill'))+" to ATTACK and RIGHT STICK to AIM#";
    
    tut[3] = "Each hero has unique abilities#Press "+Return_ContKey(ds_map_find_value(global.ckeys,'skillup'))+" to upgrade an ability and#RIGHT STICK to switch between abilities.#Use "+Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+" and "+Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+" to select the active ability in your slot bar."+
    "#Use "+Return_ContKey(ds_map_find_value(global.ckeys,'askill'))+" to CAST the ability!";
    
    tut[4] = "GREEN bar is your health and the#PURPLE bar represents the experience points obtained";
    
    tut[5] = "Every time you level up#you can UPGRADE your stats in the STATS MENU#by pressing "+Return_ContKey(ds_map_find_value(global.ckeys,'stat'));
    
    tut[6] = "You can pick up items by pressing "+Return_ContKey(ds_map_find_value(global.ckeys,'fskill'))+"#and drink POTIONS using DPAD-LED, DPAD-DOWN and DPAD-RIGHT";
    
    tut[7] = "You can also check your INVENTORY#by pressing "+Return_ContKey(ds_map_find_value(global.ckeys,'inv'));
    
    tut[8] = "If you ever feel that you're LOST#Try pressing "+Return_ContKey(ds_map_find_value(global.ckeys,'map'))+" for MAP.#This map is enabled by default.";
    
    tut[9] = "You are now ready for your ADVENTURE.#GOOD LUCK";
}else
{
        tut[1] = "Welcome to the DUNGEON #You must be new here.#Try MOVING AROUND using "+Return_Key(ds_map_find_value(global.keys,'up'))+","+Return_Key(ds_map_find_value(global.keys,'left'))+","+Return_Key(ds_map_find_value(global.keys,'down'))+","+Return_Key(ds_map_find_value(global.keys,'right'));
        
        tut[2] = "Good job! If you want to survive here, #you should know how to defend yourself#use LMB to ATTACK and MOUSE to AIM#";
        
        tut[3] = "Each hero has unique abilities#Choose one at the bottom center#Use RMB to CAST";
        
        tut[4] = "GREEN bar is your health#and the PURPLE bar is the experience points";
        
        tut[5] = "Every time you level up#you can UPGRADE your stats in the STATS MENU#by pressing "+Return_Key(ds_map_find_value(global.keys,'stat'));
        
        tut[6] = "You can pick up items by pressing "+Return_Key(ds_map_find_value(global.keys,'pick'))+"#and use POTIONS by pressing 1,2 and 3";
        
        tut[7] = "You can also check your INVENTORY#by pressing "+Return_Key(ds_map_find_value(global.keys,'inv'));
        
        tut[8] = "If you ever feel that you're LOST#Try pressing "+Return_Key(ds_map_find_value(global.keys,'map'))+" for MAP";
        
        tut[9] = "You are now ready for your ADVENTURE.#GOOD LUCK";
}

///Fixes
pad = 0;
device = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//GAME
global.level = 1;
global.dungeon_name = ENVIRO5
global.dungeon_type = choose(0,0,1);
global.loop=0;
Change_Level("Normal")
global.mmap = true;
global.inv = false;
global.killer = sprite_index;
global.exp_col = 0;
global.exp_ctr = 0;
global.coin_col = 0;
global.coin_ctr = 0;
global.dungeon=0;
global.stat_recently_closed=true;
display_gm = false;
invn = false;
drag_item = false;
drag_item_id = -1;
drag_item_image = -1;
font=font_add_sprite(spr_Font,ord("!"),0,-1);
numfont=font_add_sprite(spr_NumFont,ord("0"),0,-1);
cursor_speed=0;
icon_index = 0;
statx = 0;
stat = false;
invyyy = 32;
txtpos = 0;
hh=0;
invx = view_xview+8;//view_xview+((320/2)-(24*2))
invy = view_yview+64+invyyy;    
depth = -room_height*10

//minimap
mmx = view_xview+128-4;
mmy = view_yview+4;
minimapPercentage = 64/room_width;
map_surf = surface_create(320,240);

//optimizer variables
has_scaled=false;
//map_draw_white_rect_surface();
controller_stat_index=0;
controller_inv_index=0;
controller_levelup_index=0;
global.controller_levelup_skill=false;

cursorx = mouse_x;
cursory = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_gm = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dungeon_alpha &gt; 0 dungeon_alpha -= 0.01;
else dungeon_alpha = 0;

if icon_index &lt; 1
icon_index += random(0.04)
else
icon_index += 0.4

//EXP - Joint
if global.exp_ctr &gt; 0
    global.exp_ctr -= 1
else
{
    global.exp_ctr = 0;
    global.exp_col = 0;
}
//COIN
if global.coin_ctr &gt; 0
    global.coin_ctr -= 1
else
{
    global.coin_ctr = 0;
    //DEDUCT COIN
    var player1 = instance_find(obj_Hero,0);
    var player2 = instance_find(obj_Hero,1);
    with player1
    {
        coin += global.coin_col;
        global.coin_col = 0;
    }
    with player2
    {
        coin += global.coin_col;
        global.coin_col = 0;
    }
}

//MAP
if instance_exists(obj_Hero) {
    /*var map_key;
    
    if (gamepad_detected)
    {
        var pad;
        pad=gamepad_get_index(0);
        if (pad!=-1)
        {
            map_key=gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,"map"));//gamepad_check_rpushed_down(pad);
        }
    }
    else if (joystick_detected)
    {
        map_key=joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,"map"))];//joystick_check_rstick_pushed_down(0);
    }
    else
    {
        map_key=keyboard_check_pressed((ds_map_find_value(global.keys,'map')));
    }
    */
    /*if map_key
    if global.mmap == true
        global.mmap = false;
    else if global.mmap == false
        global.mmap = true;*/
    
    //ATTRIBUTES
    /*var attr_key;
    
    if (gamepad_detected)
    {
        var pad;
        pad=gamepad_get_index(0);
        if (pad!=-1)
        {
            attr_key=gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,"stat"));//gamepad_check_rpushed_up(pad);
        }
    }
    else if (joystick_detected)
    {
        attr_key=joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,"stat"))];//joystick_check_rstick_pushed_up(0);
    }
    else
    {
        attr_key=keyboard_check_pressed((ds_map_find_value(global.keys,'stat')));
    }
    
    if attr_key
    {
        if stat = false
        {
            if global.inv == true then global.inv = false
            stat = true
            global.lockcam = true;
        }
        else if stat = true
        {
            stat = false;
            global.lockcam = false;
        }
    }*/
    //INVENTORY
    /*var inv_key;
    if (gamepad_detected)
    {
        var pad;
        pad = gamepad_get_index(0);
        if (pad!=-1)
        {
            inv_key=gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,"inv"));
        }
    }
    else if (joystick_detected)
    {
        inv_key=joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,"inv"))];
    }
    else
    {
        inv_key=keyboard_check_pressed((ds_map_find_value(global.keys,'inv')));
    }
    
    if inv_key
        if global.inv = false
        {
            if stat == true then stat = false
            global.inv = true
            global.lockcam = true;
        }
        else if global.inv = true
        {
            global.inv = false;
            global.lockcam = false;
        }*/
}       
if ( stat == true )
    if statx &lt; 1
        statx += 0.1;
if stat == false
    if statx &gt; 0
        statx -= 0.1;
        
if global.inv == true
{
    if invyyy &gt; 0
        invyyy -= 4
}
if global.inv == false
{
    if invyyy &lt; 32
        invyyy += 4
}

if lname_alpha &gt; 0
    lname_alpha -= 0.02
else
    lname_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Hero) {
    ds_list_destroy(global.list);
    ds_list_destroy(global.list_ind);
    ds_list_destroy(global.list_name);
    ds_list_destroy(global.list_desc);
    ds_list_destroy(global.list_color);
    ds_list_destroy(global.list_object);
    ds_list_destroy(global.list_num);
    has_scaled=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ctr = 0;
tut_vs = 2;
dungeon_alpha = 1
cont_alpha = 2;
if global.boss_rm == 1
    lname_alpha = 3;
else
    lname_alpha = 0;
//if global.dungeon_name == ENVIRO3
//{
//    background_index[0] = b_magma;
//    background_hspeed[0] = -0.2
//}else
//{
if global.dungeon_name == ENVIRO1 background_color[0] = make_color_rgb(38,39,45) //make_color_rgb(58,37,33)//
else if global.dungeon_name == ENVIRO2 background_color[0] = make_color_rgb(38,45,40)
else if global.dungeon_name == ENVIRO3 background_color[0] = make_color_rgb(95,116,148)
else if global.dungeon_name == ENVIRO4 background_color[0] = make_color_rgb(65,69,101);//make_color_rgb(44,48,54)
else if global.dungeon_name == ENVIRO5 background_color[0] = make_color_rgb(35,36,39)
else if global.dungeon_name == SECRET1 background_color[0] = make_color_rgb(88,41,41)
else if global.dungeon_name == SECRET2 background_color[0] = make_color_rgb(52,126,64);
else background_color[0] = make_color_rgb(38,45,40)
//}
//    background_color[0] = make_color_rgb(149,200,208);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(global.list);
ds_list_destroy(global.list_ind);
ds_list_destroy(global.list_name);
ds_list_destroy(global.list_desc);
ds_list_destroy(global.list_color);
ds_list_destroy(global.list_object);
ds_list_destroy(global.list_num);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MAP
/*if (!surface_exists(rectWhiteSurface))
{
    map_draw_white_rect_surface();
}*/
if global.mmap == true
{
    //draw_sprite_ext(spr_Map,0,252,4,1,1,0,c_white,0.4);
    if global.mapback draw_sprite(spr_Map,0,320-72,8)
    draw_set_alpha(1);
    if (instance_exists(obj_Hero) &amp;&amp; Item_In_List(spr_Compass)  &amp;&amp; Item_Value(spr_Compass)==2)
    {
                if (instance_exists(obj_Gold_Chest))
                {
                    draw_set_colour(c_orange); //Golden Chests
                    with (obj_Gold_Chest)
                    {
                        var wx = (320-72)+((x/room_width)*64);
                        var wy = 8+((y/room_height)*64);
                        //draw_surface(other.rectWhiteSurface,wx,wy);
                        draw_rectangle(wx,wy,wx+2,wy+2,false);
                    }
                }
                if (instance_exists(obj_Cursed_Chest))
                {
                    draw_set_colour(c_purple); //Cursed chests
                    with (obj_Cursed_Chest)
                    {
                        var wx = (320-72)+((x/room_width)*64);
                        var wy = 8+((y/room_height)*64);
                        //draw_surface(other.rectWhiteSurface,wx,wy);
                        draw_rectangle(wx,wy,wx+2,wy+2,false);
                    }
                }
                if (instance_exists(obj_Wood_Chest))
                {
                    draw_set_colour(c_maroon); //Normal Chests
                    with (obj_Wood_Chest)
                    {
                        var wx = (320-72)+((x/room_width)*64);
                        var wy = 8+((y/room_height)*64);
                        //draw_surface(other.rectWhiteSurface,wx,wy);
                        draw_rectangle(wx,wy,wx+2,wy+2,false);
                    }
                }
                if (instance_exists(obj_Metal_Chest))
                {
                    draw_set_colour(c_silver); //Silver Chests
                    with (obj_Metal_Chest)
                    {
                        var wx = (320-72)+((x/room_width)*64);
                        var wy = 8+((y/room_height)*64);
                        //draw_surface(other.rectWhiteSurface,wx,wy);
                        draw_rectangle(wx,wy,wx+2,wy+2,false);
                    }
                }
            
        
    }
    //Floor color: gray 
    /*draw_set_color(c_gray);
    with obj_Hero
    {
        //draw_rectangle(320-72,24,320,64,false);
        mapProgress[# round(x/64),round(y/64)] = true;
        //Inventory menu
        for (var xx = 0; xx &lt; ds_grid_width(mapProgress); xx++) {
            for (var yy = 0; yy &lt; ds_grid_height(mapProgress); yy++) {
                /* var tx = x+(xx*box_size);
                var ty = y+(yy*box_size);*/
               /* var wx = (320-72)+(xx*64);
                var wy = 8+(yy*64);
                //if (mapProgress[# xx,yy] = true) {
                   draw_rectangle(wx,wy,wx+2,wy+2,false);
               //}
            }
        }
      }*/
    
    //Wall color: white
    draw_set_color(c_white);
   
    with obj_Wall 
    {
        if mapvis
        {
            var wx = (320-72)+((x/room_width)*64);
            var wy = 8+((y/room_height)*64);
            //draw_surface(other.rectWhiteSurface,wx,wy);
            //draw_rectangle(wx,wy,wx+2,wy+2,true)
            draw_rectangle(wx,wy,wx+2,wy+2,true);
        }
    }
    //Mark color: white
    draw_set_colour(c_white);
    with obj_Mark 
    {
        if act
        {
            var wx = (320-72)+((x/room_width)*64);
            var wy = 8+((y/room_height)*64);        
            draw_circle(wx,wy,1,false);
        }
    }    
    
    //Door color: yellow
    //Merchant color: yellow
    draw_set_color(c_yellow);
    with obj_Door
    {
        if mapvis
        {
            draw_set_circle_precision(4);
            var wx = (320-72)+((x/room_width)*64);
            var wy = 8+((y/room_height)*64);        
            if instance_number(obj_Mark) != global.mark
                draw_circle(wx,wy,1,true)
            else
                draw_circle(wx,wy,1,false)
            draw_set_circle_precision(64);
        }
    }
    
    with obj_Merchant
    {
        if mapvis
        {
            var wx = (320-72)+((x/room_width)*64);
            var wy = 8+((y/room_height)*64);        
            draw_set_font(font0);
            draw_text_transformed(wx,wy,"$",.5,.5,0)
        }
    }
    
    //Enemy color: red
    draw_set_color(c_red);    
    with obj_Enemy
    {
        if mapvis
        {
            var wx = (320-72)+((x/room_width)*64);
            var wy = 8+((y/room_height)*64);        
            draw_circle(wx,wy,1,false)
        }
    }
    
    //Hero color: aqua
    draw_set_color(c_aqua);    
    with obj_Hero
    {
        var wx = (320-72)+((x/room_width)*64);
        var wy = 8+((y/room_height)*64);    
        draw_circle(wx,wy,1,false)
    
        if (has_compass)   
        {
            //Compass mark color: dkgray
            draw_set_color(c_dkgray);
            with obj_Mark 
            {
                var wx = (320-72)+((x/room_width)*64);
                var wy = 8+((y/room_height)*64);        
                draw_circle(wx,wy,1,false)
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tutorial
//if (!has_scaled)
//{
    display_set_gui_size(view_wview, view_hview);
    has_scaled=true;
//}
if global.tutorial and instance_exists(obj_Hero)
{

    if ctr &lt; string_length(tut[global.tutorial_lvl])
    {
        ctr += 0.25;
        tut_cp = string_copy(tut[global.tutorial_lvl],1,ctr);
    }else
    {
        if tut_vs &gt; 0
            tut_vs -= 0.0078125; //1/128
    }
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);    
    draw_set_font(font0);
    draw_set_color(c_black)//(merge_colour(c_blue,c_aqua,0.5));    
    draw_set_alpha(tut_vs*0.25);
    draw_rectangle(0,(display_get_gui_height()/2+16)-string_height(tut_cp),320,(display_get_gui_height()/2+16)+string_height(tut_cp),0);
    draw_set_alpha(((tut_vs/2)*1));
    draw_set_color(c_white);
    draw_text_transformed(display_get_gui_width()/2,display_get_gui_height()/2+16,tut_cp,1,1,0);            
    draw_set_halign(false);
    draw_set_valign(false);    
}


if !instance_exists(obj_Hero)
{
    if display_gm == true
    {
        hh ++;
        draw_set_alpha(1);
        draw_set_color(c_black)
        draw_rectangle(0,0,320,min(hh,48),false)
        draw_rectangle(0,240,320,240-min(hh,48),false)        
        if (ds_list_size(global.list) &gt; 0)
        {
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);     
            var xx=0;
            var yy=0;
            draw_set_color(c_gray);
            draw_set_alpha(1);
            draw_text(16,16,"Items collected:");
            for(a=0;a&lt;ds_list_size(global.list);a+=1)
            {            
                draw_sprite_ext(ds_list_find_value(global.list,a),0,16+(16*xx),32+(yy*16),1,1,0,image_blend,1);
                draw_set_alpha(1);
                draw_set_color(c_white);
                if ds_list_find_value(global.list_num,a) &gt; 1
                {
                    draw_set_alpha(1);
                    draw_set_color(c_white);            
                    draw_text(16+(16*xx),32+(yy*16)+4,"x"+string(ds_list_find_value(global.list_num,a)));                
                }
                
                xx += 1;
                if (xx mod 19 == 0)
                {
                    xx = 0;
                    yy += 1;
                }
            }   
            draw_set_halign(false);
            draw_set_valign(false);            
        }
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);    
        draw_set_font(font0);
        draw_set_color(c_black)//(merge_colour(c_blue,c_aqua,0.5));    
        draw_set_alpha(0.5);
        draw_rectangle(0,90,320,160,0);
        draw_set_alpha(1);
        draw_set_color(c_white);
        if (global.coop) {
        var text = "You both died in Dungeon "+string(global.dungeon)+"#";
        text += "You both have killed "+string(global.kills)+" enemies#";
        text += "And collected "+string(floor(global.coins))+" coins#";
        } else {
        var text = "You died in Dungeon "+string(global.dungeon)+"#";
        text += "You've killed "+string(global.kills)+" enemies#";
        text += "And collected "+string(floor(global.coins))+" coins#";
        }
         text += "[Y] or [R] Quick Restart#";
         text += "["+Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"] Main Menu"; 
       
         /*if (gamepad_detected || joystick_detected)
        {
            text += "[Y] or [R] Quick Restart#";
            text += "["+Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"] Main Menu"; 
        }
        else
        {
            text += "[R]  Quick Restart#";
            text += "["+Return_Key(ds_map_find_value(global.keys,'pick'))+"] Main Menu";         
        }*/
                
        if global.difficulty == EASY draw_sprite(spr_Difficulty_Icon,0,320/2,240/2-32);
        else if global.difficulty == NORMAL draw_sprite(spr_Difficulty_Icon,1,320/2,240/2-32);
        else if global.difficulty == HARD draw_sprite(spr_Difficulty_Icon,2,320/2,240/2-32);
        else if global.difficulty == IMPOSSIBLE draw_sprite(spr_Difficulty_Icon,3,320/2,240/2-32);
        if instance_exists(global.killer) and global.killer != -1
        {
            draw_text(320/2+96,240/2,"Killed by:");                
            draw_sprite(global.killer.sprite_index,0,320/2+96,240/2+24);//KILLER
        }
        draw_sprite(spr_GameOver,0,320/2,240/2-16)
        draw_text_transformed(display_get_gui_width()/2,display_get_gui_height()/2+16,text,1,1,0);    
        
        draw_set_halign(false);
        draw_set_valign(false); 
        
        /*var pick_key,restart_key;
        
        if (gamepad_detected)
        {
            var pad;
            pad = gamepad_get_index(0);
            if (pad!=-1)
            {
                pick_key=gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'pick'));
                restart_key=gamepad_button_check_pressed(pad,gp_face4);
            }
        }
        else if (joystick_detected)
        {
            pick_key=joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'pick'))];
            restart_key=joystick_button_pressed[0,3];
        }
        else
        {
            pick_key=keyboard_check_pressed(ds_map_find_value(global.keys,'pick'));
            restart_key = keyboard_check_pressed(ord("R"));
        }*/
        var pad = 0;
        var pick_key = max(keyboard_check_pressed(ds_map_find_value(global.keys,'pick')), gamepad_button_check_pressed(0,ds_map_find_value(global.ckeys,'pick')));
        var restart_key = max (keyboard_check_pressed(ord("R")), gamepad_button_check_pressed(pad,gp_face4));
        
        
        if restart_key
        {
            audio_stop_all();        
            Quick_Restart()
        }
        
        if pick_key
        {
            ds_list_destroy(global.list);
            ds_list_destroy(global.list_ind);
            ds_list_destroy(global.list_name);
            ds_list_destroy(global.list_desc);
            ds_list_destroy(global.list_color);
            ds_list_destroy(global.list_object);
            ds_list_destroy(global.list_num);  
            ds_list_destroy(global.list_stacks);      
            global.dungeon = 0;
            global.boss_rm = 0;
            global.loop = 1;
            global.dungeon_name = ENVIRO4; 
            instance_create(x,y,obj_FadeOut);
            audio_stop_all();
            room_goto(Menu);
        }
    }
}



//

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with obj_Hero
{ 
    if has_compass == true
    {
        if global.boss_rm != 3
        {
            if instance_exists(obj_Door)
            {
                var dir = point_direction(x,y,obj_Door.x,obj_Door.y);
                draw_set_blend_mode(bm_add);
                draw_sprite_ext(spr_Compass_Arrow,0,x+lengthdir_x(16,dir),y+lengthdir_y(16,dir),1,1,dir,image_blend,0.7);
                draw_set_blend_mode(bm_normal);              
            }
        }        
    }
      
}
//LEVEL UP
with obj_Levelup_Label
    draw_sprite_ext(spr_Level_Up,image_index,x,y-24,1,1,0,image_blend,image_alpha);

with obj_Skeleton_King draw_self()
with obj_Explode draw_self()
with obj_Scratch draw_self()
with obj_Small_Explode draw_self()

with obj_Mark
{
    if alarm[2] != -1
    {
        var redeemer_multiplier =1;
        if (Item_In_List(spr_Redeemers_Essence))
        {
            redeemer_multiplier*=2;
        }
        if (Item_In_List(spr_Shoes_of_Haste))
        {
            redeemer_multiplier*=0;
        }
        draw_sprite(spr_Redeemer_Bar,0,view_xview+view_wview/2,view_yview+12);
        var max_redeemer_wait=(room_speed*20*redeemer_multiplier)+1;
        draw_sprite_stretched(spr_Redeemer_BarFill,0,view_xview+view_wview/2+9,view_yview+13,ceil((alarm[2]/(max_redeemer_wait))*28),6);        
        break;
    }
}
/*with obj_Wall
{
    //if !(tile_layer_find(100,x,y-32) and !tile_layer_find(-room_height+1,x,y-32))
    //    draw_sprite(global.tile_top,0,0,32,32,x,y-16,-y*2)
    draw_set_color(c_red);
    draw_rectangle(x,y,x+32,y+32,true)
}
with obj_Clearer
{
    draw_set_color(c_gray);
    draw_rectangle(x,y,x+32,y+32,true)
}
/*with obj_Clearer2
{
    draw_set_color(c_lime);
    draw_rectangle(x,y,x+32,y+32,true)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FLOATING TEXT
canadian_text="";
if (Item_In_List(spr_Northern_Hat)) {
    canadian_text=", eh!";
}
with obj_Text {
    if (check_within_player_range(x,y,48,48)) {
        draw_set_font(text_font);
        draw_set_alpha(text_alpha)
        var my_canadian_text=string_upper(other.canadian_text);
        text = string_upper(text);
        var ctext = string_copy(text+my_canadian_text,1,string_length(text+my_canadian_text));
        /*draw_set_color(c_black)
        draw_set_color(c_black)
        draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x),median(view_yview+view_hview-30+1,view_yview+20+1,y)+1,string(text))
        draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)+1,median(view_yview+view_hview-30+1,view_yview+20+1,y)+1,string(text))
        draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)+1,median(view_yview+view_hview-30+1,view_yview+20+1,y),string(text))*/
        draw_set_color(text_col)
        //draw_text_transformed(x-string_width(text)/2, //    median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)
        //median(view_yview+view_hview-30,view_yview+20,y),string(text),scale,scale,0)
        draw_text_transformed(x-string_width(ctext)*0.5,y,string(text+my_canadian_text),scale,scale,0);
        //draw_set_alpha(1)
        //draw_set_font(font0);
    }
}

with obj_Potion_Text
{
    draw_set_font(text_font);
    draw_set_alpha(text_alpha)
    var my_canadian_text=string_upper(other.canadian_text);
    text = string_upper(text);
    /*draw_set_color(c_black)
    draw_set_color(c_black)
    draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x),median(view_yview+view_hview-30+1,view_yview+20+1,y)+1,string(text))
    draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)+1,median(view_yview+view_hview-30+1,view_yview+20+1,y)+1,string(text))
    draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)+1,median(view_yview+view_hview-30+1,view_yview+20+1,y),string(text))*/
    draw_set_color(text_col)
    draw_text_transformed(x-string_width(text+my_canadian_text)*0.5, //    median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)
    median(view_yview+view_hview-30,view_yview+20,y),string(text+my_canadian_text),scale,scale,0)
    //draw_set_alpha(1)
    //draw_set_font(font0);
}
draw_set_alpha(1);
draw_set_font(font0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ITEMS, CHESTS, LORE &amp;&amp; Revive
canadian_text="";
if (Item_In_List(spr_Northern_Hat))
{
    canadian_text=", eh!";
}

//Coop Revive
with (obj_hero_corpse) {
    var current_player = obj_Hero;
    if ( instance_exists(current_player) ) {
        if (check_within_player_range(x,y,36,36)) {
            if ( collision_circle(x,y,8,current_player,false,true) &gt; 0 ) {
                //draw_text(x,y,"Revive!!");
                var rev = instance_create(x,y,obj_Text);
                if (!instance_exists(rev)) {
                rev.text = "Revive!!";
                with rev {
                     if (check_within_player_range(x,y,48,48)) {
                        draw_set_font(text_font);
                        draw_set_alpha(text_alpha)
                        var my_canadian_text = ""//string_upper(other.canadian_text);
                        text = string_upper(text);
                        var ctext = string_copy(text+my_canadian_text,1,string_length(text+my_canadian_text));
                        /*draw_set_color(c_black)
                        draw_set_color(c_black)
                        draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x),median(view_yview+view_hview-30+1,view_yview+20+1,y)+1,string(text))
                        draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)+1,median(view_yview+view_hview-30+1,view_yview+20+1,y)+1,string(text))
                        draw_text(median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)+1,median(view_yview+view_hview-30+1,view_yview+20+1,y),string(text))*/
                        draw_set_color(text_col)
                        //draw_text_transformed(x-string_width(text)/2, //    median(view_xview+view_wview-10-string_width(text)/2,view_xview+10+string_width(text)/2,x)
                        //median(view_yview+view_hview-30,view_yview+20,y),string(text),scale,scale,0)
                        draw_text_transformed(x-string_width(ctext)*0.5,y,string(text+my_canadian_text),scale,scale,0);
                        //draw_set_alpha(1)
                        //draw_set_font(font0);
                     }
                }
                }
                
                if (current_player.cont_pick) {
                   time_to_revive -=1;
                } else {
                if (time_to_revive &lt;room_speed*7)
                    time_to_revive +=0.5;
                }
                if (time_to_revive &lt;=0) {
                   alive = true
                }
                if ( alive = true )  { 
                
                ///Steam Achievement
                if ( global.steam_api ) {
                if (!steam_get_achievement("I can see light Again!!")) then steam_set_achievement("I can see light Again!!");
                }
                //draw_text(x,y+5,"Alive!!");
                /*with (instance_create(x,y,obj_Text)) {
                     text = "Thanks Mate!!"
                }*/
                with (instance_create(x,y,obj_Hero)) {
                     player = !obj_Hero.player;
                }
                alive = false;
                instance_destroy();
                }
               
                draw_healthbar(x-14, y-sprite_get_height(sprite_index)/2-4, x+13, y-sprite_get_height(sprite_index)/2-1, (time_to_revive/room_speed*7)*100, make_color_rgb(31,29,31), DS_RED, DS_GREEN, 0, 0, 0)
            }
        }
    }
}

var player1 = instance_find(obj_Hero,0);


with obj_Item
{
    if instance_exists(player1)
    {
        if (check_within_player_range(x,y,48,48))
        {
            if collision_circle(x,y,8,player1,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.9);
                draw_set_color(make_color_rgb(31,29,31));
                var _key;
                
                _key = max ( Return_ContKey(ds_map_find_value(global.ckeys,'pick')) , Return_Key(ds_map_find_value(global.keys,'pick'))  );
               
                var name = item_name[item_num];
                var desc = item_desc[item_num]+"#["+_key+"]";
                if item_price &gt; 0 
                {
                    var desc = item_desc[item_num]+"#["+_key+"]";
                    var price = "$"+string(floor(item_price));
                }else 
                {
                    var desc = item_desc[item_num];
                    var price = "";
                }
                if (item_num==102) //RECIPE_INDEX
                {
                    desc=recipe_description+"#["+_key+"]";
                    name = recipe_name;
                }
                var stack_info="";
                var count=0,max_count=1;
                if (item_stack[item_num]&gt;0)
                {
                    count = Item_Value(sprite_index);
                    max_count=item_stack[item_num];
                    if (count==undefined)
                    {
                        count=0;
                    }
                    stack_info = "Stack: "+string(count)+"/"+string(max_count);
                }
                var final_text=name+"#"+desc;
                if (item_price&gt;0)
                {
                    final_text+="#"+price;
                }
                var offset=0;
                var conversion_text="";
                if (stack_info!="")
                {
                    if (count!=max_count)
                    {
                        offset+=8;
                        final_text+="#"+stack_info;
                    }
                    else
                    {
                        offset+=16;
                        conversion_text="#Will convert into either#GOLD, EXP or MATERIALS";
                        final_text+="#"+stack_info+conversion_text;
                    }
                }
                var wbox = string_width(final_text)/2;
                draw_rectangle(x-wbox-4,y+16,x+wbox+4,y+16+string_height(final_text),0);
                draw_set_color(item_color[item_num]);
                draw_rectangle(x-wbox-4,y+16,x+wbox+4,y+16+string_height(final_text),1);
                draw_set_alpha(1);
                {
                    draw_text(x,y+16,name);
                    draw_set_color(c_white)
                    draw_set_alpha(0.5);
                    draw_text(x,y+24,desc);
                    if (stack_info!="")
                    {
                        draw_text(x,y+24+string_height(desc),stack_info);
                    }
                    if (conversion_text!="")
                    {
                        draw_text(x,y+24+string_height(desc),conversion_text);
                    }
                    if item_price &gt; 0
                    {
                        if player1.coin &gt;= item_price
                            draw_set_color(c_yellow);
                        else
                            draw_set_color(c_red);
                        draw_set_alpha(0.5)            
                        draw_text(x,y+24+string_height(desc)+offset,price);
                    }
                }
                draw_set_alpha(1);
                draw_set_halign(false);
            }
        }
    }    
}

///CHEST
with obj_Chest
{
    if instance_exists(player1)
    {
        if (check_within_player_range(x,y,48,48))
        {
            if collision_circle(x,y,16,player1,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.8);
                draw_set_color(make_color_rgb(31,29,31));
                var _key;
                _key = max ( Return_ContKey(ds_map_find_value(global.ckeys,'pick')) , Return_Key(ds_map_find_value(global.keys,'pick'))   );
              
                var name = chest_name+other.canadian_text;
                if chest_name == "SILVER CHEST"
                    if player1.silver_key &gt; 0
                        var desc = chest_desc+"#["+_key+"]";
                    else
                        var desc = chest_desc;
                else if chest_name == "GOLDEN CHEST"
                    if player1.golden_key &gt; 0
                        var desc = chest_desc+"#["+_key+"]";
                    else
                        var desc = chest_desc;
                else    
                    var desc = chest_desc+"#["+_key+"]";                    
                if chest_price &gt; 0 var price = "$"+string(chest_price);else var price = "";
                
                draw_rectangle(x-(string_width(desc)/2)-4,y+16,x+(string_width(desc)/2)+4,y+16+string_height(name+"#"+desc+"#"+price),0);        
                draw_set_color(c_white);
                draw_rectangle(x-(string_width(desc)/2)-4,y+16,x+(string_width(desc)/2)+4,y+16+string_height(name+"#"+desc+"#"+price),1);        
                draw_set_alpha(1);               
                draw_text(x,y+16,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                draw_text(x,y+24,desc);
                if chest_price &gt; 0
                {
                    if player1.coin &gt;= chest_price
                        draw_set_color(c_yellow);
                    else
                        draw_set_color(c_red);
                    draw_set_alpha(0.5)            
                    draw_text(x,y+24+string_height(desc),price);            
                }
                draw_set_alpha(1);
                draw_set_halign(false);
            }
        }
    }    
}

var player2 = instance_find(obj_Hero,1);

with obj_Item
{
    if instance_exists(player2)
    {
        if (check_within_player_range(x,y,48,48))
        {
            if collision_circle(x,y,8,player2,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.9);
                draw_set_color(make_color_rgb(31,29,31));
                var _key;
                _key = max ( Return_ContKey(ds_map_find_value(global.ckeys,'pick')) , Return_Key(ds_map_find_value(global.keys,'pick'))     );
                
                var name = item_name[item_num];
                var desc = item_desc[item_num]+"#["+_key+"]";
                if item_price &gt; 0 
                {
                    var desc = item_desc[item_num]+"#["+_key+"]";
                    var price = "$"+string(floor(item_price));
                }else 
                {
                    var desc = item_desc[item_num];
                    var price = "";
                }
                if (item_num==102) //RECIPE_INDEX
                {
                    desc=recipe_description+"#["+_key+"]";
                    name = recipe_name;
                }
                var stack_info="";
                var count=0,max_count=1;
                if (item_stack[item_num]&gt;0)
                {
                    count = Item_Value(sprite_index);
                    max_count=item_stack[item_num];
                    if (count==undefined)
                    {
                        count=0;
                    }
                    stack_info = "Stack: "+string(count)+"/"+string(max_count);
                }
                var final_text=name+"#"+desc;
                if (item_price&gt;0)
                {
                    final_text+="#"+price;
                }
                var offset=0;
                var conversion_text="";
                if (stack_info!="")
                {
                    if (count!=max_count)
                    {
                        offset+=8;
                        final_text+="#"+stack_info;
                    }
                    else
                    {
                        offset+=16;
                        conversion_text="#Will convert into either#GOLD, EXP or MATERIALS";
                        final_text+="#"+stack_info+conversion_text;
                    }
                }
                var wbox = string_width(final_text)/2;
                draw_rectangle(x-wbox-4,y+16,x+wbox+4,y+16+string_height(final_text),0);
                draw_set_color(item_color[item_num]);
                draw_rectangle(x-wbox-4,y+16,x+wbox+4,y+16+string_height(final_text),1);
                draw_set_alpha(1);
                {
                    draw_text(x,y+16,name);
                    draw_set_color(c_white)
                    draw_set_alpha(0.5);
                    draw_text(x,y+24,desc);
                    if (stack_info!="")
                    {
                        draw_text(x,y+24+string_height(desc),stack_info);
                    }
                    if (conversion_text!="")
                    {
                        draw_text(x,y+24+string_height(desc),conversion_text);
                    }
                    if item_price &gt; 0
                    {
                        if player2.coin &gt;= item_price
                            draw_set_color(c_yellow);
                        else
                            draw_set_color(c_red);
                        draw_set_alpha(0.5)            
                        draw_text(x,y+24+string_height(desc)+offset,price);
                    }
                }
                draw_set_alpha(1);
                draw_set_halign(false);
            }
        }
    }    
}

///CHEST
with obj_Chest
{
    if instance_exists(player2)
    {
        if (check_within_player_range(x,y,48,48))
        {
            if collision_circle(x,y,16,player2,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.8);
                draw_set_color(make_color_rgb(31,29,31));
                var _key;
                _key= max( Return_ContKey(ds_map_find_value(global.ckeys,'pick')) , Return_Key(ds_map_find_value(global.keys,'pick')) );
                var name = chest_name+other.canadian_text;
                if chest_name == "SILVER CHEST"
                    if player2.silver_key &gt; 0
                        var desc = chest_desc+"#["+_key+"]";
                    else
                        var desc = chest_desc;
                else if chest_name == "GOLDEN CHEST"
                    if player2.golden_key &gt; 0
                        var desc = chest_desc+"#["+_key+"]";
                    else
                        var desc = chest_desc;
                else    
                    var desc = chest_desc+"#["+_key+"]";                    
                if chest_price &gt; 0 var price = "$"+string(chest_price);else var price = "";
                
                draw_rectangle(x-(string_width(desc)/2)-4,y+16,x+(string_width(desc)/2)+4,y+16+string_height(name+"#"+desc+"#"+price),0);        
                draw_set_color(c_white);
                draw_rectangle(x-(string_width(desc)/2)-4,y+16,x+(string_width(desc)/2)+4,y+16+string_height(name+"#"+desc+"#"+price),1);        
                draw_set_alpha(1);               
                draw_text(x,y+16,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                draw_text(x,y+24,desc);
                if chest_price &gt; 0
                {
                    if player2.coin &gt;= chest_price
                        draw_set_color(c_yellow);
                    else
                        draw_set_color(c_red);
                    draw_set_alpha(0.5)            
                    draw_text(x,y+24+string_height(desc),price);            
                }
                draw_set_alpha(1);
                draw_set_halign(false);
            }
        }
    }    
}


with (obj_Lore_Book_Parent)
{
    if (!is_cinematic_displayed() &amp;&amp; visible)
    {
        var c_text = string_copy(book_title,0,string_length(book_title));
        var wn2 = string_width(c_text)*0.5;
        var h = string_height(c_text);
        if (distance_to_object(obj_Hero)&lt;16)
        {
            draw_set_color(c_black);
            draw_rectangle(x-wn2-4,y-4,x+wn2+4,y+h+4,0);        
            draw_set_color(c_white);
            draw_rectangle(x-wn2-4,y-4,x+wn2+4,y+h+4,1);
            draw_set_color(c_white);
            draw_text(x-wn2,y,book_title);
        }
    }
}


///////////////
//Cinematic

if (is_cinematic_displayed())
{
    if (cutscene_duration[0]&lt;=-16)
    {
        var key="SPACE";
        
        /*if (gamepad_detected || joystick_detected)
        {
            key=Return_ContKey(ds_map_find_value(global.ckeys,"pick"));
        }
        else
        {
            key=Return_Key(ds_map_find_value(global.keys,'pick'));
        }*/
        key = max(Return_Key(ds_map_find_value(global.keys,'pick')) ,Return_ContKey(ds_map_find_value(global.ckeys,"pick")));
        draw_set_colour(c_white);
        draw_text(view_xview[0]+view_wview[0]-64,view_yview[0]+view_hview[0]-36,"[Press "+string(key)+"]");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DOOR
///FLOATING TEXT
canadian_text="";
if (Item_In_List(spr_Northern_Hat))
{
    canadian_text=", eh!";
}
with obj_Door
{
    if instance_exists(obj_Hero)
    {
        if (check_within_player_range(x,y,32,32))
        {
            if collision_circle(x,y,32,obj_Hero,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.6);
                draw_set_color(c_black);
                if global.mark != instance_number(obj_Mark)
                {
                    var name = "LOCKED";
                    var desc = string(global.mark)+"/"+string(instance_number(obj_Mark))+" marks activated"+other.canadian_text;
                    var dtext = name + "" + desc;            
                }else
                if instance_exists(BOSS1) or instance_exists(BOSS2) or instance_exists(BOSS3) or instance_exists(BOSS4)
                {
                    var name = "LOCKED";
                    var desc = "Defeat the boss"+other.canadian_text;
                    var dtext = name+""+desc;
                }else
                {                
                    if global.tutorial
                    {
                        var name = "TUTORIAL "+string(global.tutorial_lvl)
                       
                            var desc = "["+Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"]" or "["+Return_Key(ds_map_find_value(global.keys,'pick'))+"]";
                            var dtext = name+"#"+desc;
                    }else
                    {
                        var name = "Level "+string(global.dungeon+1)//string(global.dungeon_name);
                        var desc = "["+Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"]" or  "["+Return_Key(ds_map_find_value(global.keys,'pick'))+"]";
                        
                        var dtext = name+""+desc;
                    }        
                }
                if (instance_exists(obj_Lore_Block_Door))
                {
                    name="LOCKED";
                    desc="";
                    with (obj_Lore_Block_Door) //Lists all reasons.
                    {
                        desc+=reason+"";
                    }
                    dtext=name+""+desc;
                }
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),0);        
                draw_set_color(c_white);
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),1);        
                draw_set_alpha(1);               
                draw_text(x,y-32,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                draw_text(x,y-24,desc);
                draw_set_alpha(1);
                draw_set_halign(false);
            }
            var sinVal;
            if global.boss_rm != 3
            {
                if (global.mark == instance_number(obj_Mark) and image_index==0)
                {
                    draw_set_blend_mode(bm_add);
                    sinVal = sin(n*0.1)*4;
                    draw_sprite_ext(spr_Portal_Light,0,x,y-32+(sinVal),1,1,0,image_blend,0.6)
                    draw_sprite_ext(spr_Portal_Light,0,x,y-32+(sinVal),1.3,1.3,0,c_white,0.1)
                    draw_set_blend_mode(bm_normal);        
                }
            }else
            {
                if (global.mark == instance_number(obj_Mark)) and image_index = 0
                {
                    sinVal = sin(n*0.1)*4;
                    draw_set_blend_mode(bm_add);
                    draw_sprite_ext(spr_Portal_Light,0,x,y-32+(sinVal),1,1,0,image_blend,0.6)
                    draw_sprite_ext(spr_Portal_Light,0,x,y-32+(sinVal),1.3,1.3,0,c_white,0.1)
                    draw_set_blend_mode(bm_normal);        
                }        
            }
        }
    }
}

//FORBIDDEN LIBRARY
with obj_Golden_Shelf
{
    if (check_within_player_range(x,y,16,16))
    {
        if instance_exists(obj_Hero) and (Item_In_List(spr_Book_of_CD) || Item_In_List(spr_Book_of_WR) || Item_In_List(spr_Book_of_BR) || Item_In_List(spr_Book_of_AR) || Item_In_List(spr_Book_of_HL) || Item_In_List(spr_Book_of_TH))
        {
            if collision_circle(x,y,24,obj_Hero,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.6);
                draw_set_color(c_black);               
                var name = "Forbidden Library"+other.canadian_text;
               
                    var desc = max( "["+Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"]" , "["+Return_Key(ds_map_find_value(global.keys,'pick'))+"]" );
               
                   
                
                var dtext = name+"#"+desc;
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),0);        
                draw_set_color(c_white);
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),1);        
                draw_set_alpha(1);               
                draw_text(x,y-32,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                draw_text(x,y-24,desc);
                draw_set_alpha(1);
                draw_set_halign(false);
            }
        }else
        {
            if collision_circle(x,y,16,obj_Hero,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.6);
                draw_set_color(c_black);               
                var name = "Empty Shelf"+other.canadian_text;
                var desc = "";
                var dtext = name+"#"+desc;
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),0);        
                draw_set_color(c_white);
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),1);        
                draw_set_alpha(1);               
                draw_text(x,y-32,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                draw_text(x,y-24,desc);
                draw_set_alpha(1);
                draw_set_halign(false);
            }    
        }
    }
}

//FAE GARDEN
with obj_Fae_Tree
{
    if (check_within_player_range(x,y,16,16))
    {
        if instance_exists(obj_Hero) and Item_In_List(spr_Herb)
        {
            if collision_circle(x,y,24,obj_Hero,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.6);
                draw_set_color(c_black);               
                var name = "Fae Garden"+other.canadian_text;
                
                    var desc = "["+Return_ContKey(ds_map_find_value(global.ckeys,'pick'))+"]" or "["+Return_Key(ds_map_find_value(global.keys,'pick'))+"]";
                
                
                   
                
                //var desc = "["+Return_Key(ds_map_find_value(global.keys,'pick'))+"]";
                var dtext = name+"#"+desc;
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),0);        
                draw_set_color(c_white);
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),1);        
                draw_set_alpha(1);               
                draw_text(x,y-32,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                draw_text(x,y-24,desc);
                draw_set_alpha(1);
                draw_set_halign(false);
            }
        }else
        {
            if collision_circle(x,y,24,obj_Hero,false,true) &gt; 0
            {
                draw_set_halign(fa_middle);
                draw_set_alpha(0.6);
                draw_set_color(c_black);               
                var name = "Strange Tree"+other.canadian_text;
                var desc = "";
                var dtext = name+"#"+desc;
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),0);        
                draw_set_color(c_white);
                draw_rectangle(x-(string_width(dtext)/2)-4,y-32,x+(string_width(dtext)/2)+4,y-32+string_height(dtext),1);        
                draw_set_alpha(1);               
                draw_text(x,y-32,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                draw_text(x,y-24,desc);
                draw_set_alpha(1);
                draw_set_halign(false);
            }    
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INVENTORY
invx = view_xview+8;//view_xview+((320/2)-(24*2))
invy = view_yview+64+invyyy;    
if ( global.inv ) {
    draw_set_color(c_white);
    draw_sprite(spr_Attribute,2,view_xview+view_wview/2,invy-16);
    //draw_text(view_xview+view_wview/2,view_yview+32,"INVENTORY");
    //draw_sprite(spr_Attribute,2,view_xview+view_wview/2,view_yview+32);
    var tempA;
    var using_controller= global.pad[GAMEPAD_1]; //|| joystick_detected;
    //INVENTORY
    for(a=0; a&lt;24*12; a+=24) {
        tempA = a/24;
        for(b=0;b&lt;24*6;b+=24) {
            if ((tempA+(b/24)*12)==controller_inv_index &amp;&amp; using_controller) {
                draw_sprite_ext(spr_Inventory_Slot,0,invx+a+4,invy+b+4,1,1,0,c_aqua,1);
            } else {
              draw_sprite(spr_Inventory_Slot,0,invx+a+4,invy+b+4);
            }
        }
    }
    var rup=false,rleft=false,rright=false,rdown=false;
    var pad = global.pad[GAMEPAD_1];
    rup = gamepad_axis_value(pad, gp_axisrv) &lt; 0;//gamepad_check_rpushed_up(pad);
    rright = gamepad_axis_value(pad, gp_axisrh) &gt; 0;//gamepad_check_rpushed_right(pad);
    rdown =  gamepad_axis_value(pad, gp_axisrv) &gt; 0;//gamepad_check_rpushed_down(pad);
    rleft = gamepad_axis_value(pad, gp_axisrh) &lt; 0;//gamepad_check_rpushed_left(pad);
    
    if (controller_inv_index&lt;0) {
        controller_inv_index+=71; //12*6
    }
    else if (controller_inv_index&gt;71) {
        controller_inv_index-=71;
    }
    
    if (rup) {
        controller_inv_index-=12;
    }
    if (rdown) {
        controller_inv_index+=12;
    }
    if (rright) {
        controller_inv_index+=1;
    }
    if (rleft) {
       controller_inv_index-=1;
    }
    
    //ITEMS
    if (ds_list_size(global.list) &gt; 0) {
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);     
        var xx=0;
        var yy=0;
        for(a=0;a&lt;ds_list_size(global.list);a+=1) {            
            item = ds_list_find_value(global.list,a);            
            itemxx = invx+(xx*24)+28/2+2;
            itemyy = invy+(yy*24)+28/2+2;             
            draw_sprite_ext(item,0,itemxx,itemyy,1,1,0,image_blend,1); 
            if ( ds_list_find_value(global.list_num,a) &gt; 1 ) {
                draw_set_alpha(1);
                draw_text_outlined(itemxx,itemyy+8,"x"+string(ds_list_find_value(global.list_num,a)),c_black,c_white);//QUANTITY
            }                     
            if (mouse_x &gt; itemxx-10 &amp;&amp; mouse_x &lt; itemxx+10 &amp;&amp; mouse_y &gt; itemyy-10 &amp;&amp; mouse_y &lt; itemyy+10 &amp;&amp; !using_controller) 
            || (using_controller &amp;&amp; controller_inv_index==a) {
                //DESC
                draw_set_halign(fa_center);
                draw_set_alpha(0.8);
                draw_set_color(make_color_rgb(31,29,31));
                var name = ds_list_find_value(global.list_name,a);
                var desc = string(ds_list_find_value(global.list_desc,a));
                var stack_info = "Stack:"+string(ds_list_find_value(global.list_num,a))+"/"+string(ds_list_find_value(global.list_stacks,a));
                
                descxx = view_xview+view_wview/2;
                descyy = view_yview+32;
                draw_rectangle(descxx-(string_width(desc)/2)-4,descyy+16,descxx+(string_width(desc)/2)+4,descyy+16+string_height(name+"#"+desc+"#"+stack_info),0);        
                draw_set_color(ds_list_find_value(global.list_color,a));
                draw_rectangle(descxx-(string_width(desc)/2)-4,descyy+16,descxx+(string_width(desc)/2)+4,descyy+16+string_height(name+"#"+desc+"#"+stack_info),1);        
                draw_set_alpha(1);               
                draw_text(descxx,descyy+24,name);
                draw_set_color(c_white)
                draw_set_alpha(0.5);
                var hname,hdesc; //Height of name &amp;&amp; description
                hname=string_height(name);
                hdesc=string_height(desc);
                draw_text(descxx,descyy+24+hdesc,desc);
                draw_text(descxx,descyy+24+hname+hdesc,stack_info);
                draw_set_alpha(1);
                draw_set_halign(false);
                //DRAG
                if mouse_check_button(mb_left) &amp;&amp; drag_item == false {
                    drag_item = true;
                    drag_item_id = a;
                    drag_item_image = item;                
                }
            }            
            /*if drag_item &amp;&amp; mouse_check_button(mb_left)
            {                
                if mouse_x &gt; invx+(24*4)+4 or mouse_x &lt; invx+4 or mouse_y &gt; invy+(24*4)+4 or mouse_y &lt; invy+4
                    draw_sprite_ext(drag_item_image,0,mouse_x,mouse_y,1,1,0,c_red,1);
                else
                    draw_sprite_ext(drag_item_image,0,mouse_x,mouse_y,1,1,0,image_blend,1);
            }else
            {
                drag_item = false;
            }*/

            xx += 1;
            if (xx mod 12 == 0) {
                xx = 0;
                yy += 1;
            }
        }
        /*if mouse_check_button_released(mb_left)
        {
            if mouse_x &gt; invx+(24*4)+4 or mouse_x &lt; invx+4 or mouse_y &gt; invy+(24*4)+4 or mouse_y &lt; invy+4
            {
                with obj_Hero 
                { 
                    repeat(ds_list_find_value(global.list_num,other.drag_item_id))
                    {
                        with instance_create(x,y,ds_list_find_value(global.list_object,ds_list_find_index(global.list,other.drag_item_image))) 
                            item_price = 0; 
                    }
                }                
                Item_Drop();                
                drag_item = false;          
            }
        }*/        
        draw_set_halign(false);
        draw_set_valign(false);            
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HEALTH BAR

if instance_exists(obj_Hero)
{
    draw_set_alpha(1);    
    with obj_Enemy
    {        
        if (check_within_player_range(x,y,48,48))
        {
            if alarm[10] &gt; -1 and Not_Boss()
            {
                draw_sprite(spr_HPBar_B,0,x,y-sprite_get_height(sprite_index)/2-2);
                if mega
                    draw_healthbar(x-14, y-sprite_get_height(sprite_index)/2-4, x+13, y-sprite_get_height(sprite_index)/2-1, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_PURPLE, 0, 0, 0)
                else if superior
                    draw_healthbar(x-14, y-sprite_get_height(sprite_index)/2-4, x+13, y-sprite_get_height(sprite_index)/2-1, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_ORANGE, 0, 0, 0)
                else if elite
                    draw_healthbar(x-14, y-sprite_get_height(sprite_index)/2-4, x+13, y-sprite_get_height(sprite_index)/2-1, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_BLUE, 0, 0, 0)
                else
                    draw_healthbar(x-14, y-sprite_get_height(sprite_index)/2-4, x+13, y-sprite_get_height(sprite_index)/2-1, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_GREEN, 0, 0, 0)
            }
            else if (alarm[10] &gt; -1 and Boss() &amp;&amp; (instance_exists(BOSS5) || instance_exists(BOSS6)))
            {
                draw_healthbar(x-14, y-sprite_get_height(sprite_index)/2-4, x+13, y-sprite_get_height(sprite_index)/2-1, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_GREEN, 0, 0, 0)
            }
        }
    }
    
    with obj_Hero
    {
        if global.hpbar
        {
            draw_sprite(spr_HPBar_B,0,x,y-sprite_get_height(sprite_index)/2-2);
            draw_healthbar(x-14, y-sprite_get_height(sprite_index)/2-4, x+13, y-sprite_get_height(sprite_index)/2-1, (hp/hpmax[char])*100, make_color_rgb(31,29,31), DS_RED, DS_GREEN, 0, 0, 0)
        }
    }
    if (!instance_exists(BOSS5) &amp;&amp; !instance_exists(BOSS6))
    {
        with BOSS1
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            draw_set_alpha(0.3);
            draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
            draw_set_halign(fa_left);        
            draw_text(view_xview+12,view_yview+24,"SKELETON KING");
            draw_set_halign(false);
        }
        with BOSS2
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            draw_set_alpha(0.3);
            draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
            draw_set_halign(fa_left);        
            draw_text(view_xview+12,view_yview+24,"GIGANTUM SLIME");
            draw_set_halign(false);
        }
        with BOSS3
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            draw_set_alpha(0.3);
            draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
            draw_set_halign(fa_left);        
            draw_text(view_xview+12,view_yview+24,"LADY LAINE");
            draw_set_halign(false);
        }    
        with BOSS4
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            draw_set_alpha(0.3);
            draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
            draw_set_halign(fa_left);        
            draw_text(view_xview+12,view_yview+24,"SOUL GUARDIAN");
            draw_set_halign(false);
        }
    }
    with BOSS5
    {
        draw_set_halign(false);
        draw_set_valign(false);  
        draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
        draw_set_color(c_white);
        draw_set_alpha(1);
        draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
        draw_set_alpha(0.3);
        draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
        draw_set_halign(fa_center);
        draw_set_alpha(1);
        draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
        draw_set_halign(fa_left);        
        draw_text(view_xview+12,view_yview+24,"THE JUDGEMENT");
        draw_set_halign(false);
    }
    if (!instance_exists(BOSS5) &amp;&amp; instance_exists(BOSS6))
    {
        with BOSS6
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            draw_set_alpha(0.3);
            draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
            draw_set_halign(fa_left);        
            draw_text(view_xview+12,view_yview+24,"THE JUDGMENT II");
            draw_set_halign(false);
        }    
    }
    if (!instance_exists(BOSS5) &amp;&amp; !instance_exists(BOSS6))
    {
        with SBOSS1
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            draw_set_alpha(0.3);
            draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
            draw_set_halign(fa_left);        
            if (killed_dark_merlin)
            {
                draw_text(view_xview+12,view_yview+24,"GHOST OF MERLIN");
            }
            else
            {
                draw_text(view_xview+12,view_yview+24,"MERLIN");
            }
            draw_set_halign(false);
        }
    }
    if (!instance_exists(BOSS5) &amp;&amp; !instance_exists(BOSS6))
    {
        with SBOSS2
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            draw_set_alpha(0.3);
            draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, (hp/maxhp)*100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));        
            draw_set_halign(fa_left);        
            draw_text(view_xview+12,view_yview+24,"FAE BUG");
            draw_set_halign(false);
        }         
    }
    
    if (!instance_exists(BOSS5) &amp;&amp; !instance_exists(BOSS6))
    {
        with SBOSS1_STORY
        {
            draw_set_halign(false);
            draw_set_valign(false);  
            draw_sprite(spr_HUD_New,1,view_xview,view_yview);              
            draw_set_color(c_white);
            draw_set_alpha(1);
            var hp_perc,shield_perc;
            hp_perc = 100*maxhp/(maxhp+shield_amount);
            shield_perc = 100*(shield_amount)/(maxhp+shield_amount);
            var hp_val = (hp/maxhp)*hp_perc;
            var hp_bar_width = 308;
            draw_healthbar(view_xview+6, view_yview+15, view_xview+314, view_yview+21, hp_val, make_color_rgb(31,29,31), DS_RED, DS_RED, 0, 0, 0)
            if (shield_amount&gt;0)
            {
                draw_healthbar(view_xview+6+hp_val*0.01*hp_bar_width, view_yview+15, view_xview+314, view_yview+21, 100, make_color_rgb(31,29,31), DS_BLUE, DS_BLUE, 0, 0, 0)
            }
            draw_set_alpha(0.3);
            if (shield_amount&gt;0)
            {
                draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, 100, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            }
            else
            {
                draw_healthbar(view_xview+6, view_yview+18, view_xview+314, view_yview+21, hp_val, make_color_rgb(31,29,31), c_black, c_black, 0, 0, 0)        
            }
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            if (shield_amount&gt;0)
            {
                draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp))+"+"+string(shield_amount));
            }
            else
            {
                draw_text(view_xview+320/2,view_yview+15,string(floor(hp))+"/"+string(floor(maxhp)));
            }
            draw_set_halign(fa_left);        
            draw_text(view_xview+12,view_yview+24,"DARK MERLIN");
            draw_set_halign(false);
        }         
    }
    
    with obj_Redeemer
    {
    
        draw_set_halign(fa_center);
        draw_set_color(c_red);
        draw_set_alpha(ralpha);
        draw_text(view_xview+320/2,view_yview+24,"THE REDEEMER HAS ARRIVED!!");
        draw_set_alpha(1);
        draw_set_halign(false);        
    }

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller Skill Up
var open_key=false,using_controller= global.pad[GAMEPAD_1];

    var rright=false,rleft=false,cont_add=false;
    if (global.pad[GAMEPAD_1]) {
        var pad = global.pad[GAMEPAD_1];
        if (pad!=-1)
        {
            open_key= gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,"skillup"));
            rright = gamepad_check_rpushed_right(pad);
            rleft = gamepad_check_rpushed_left(pad);
            cont_add= gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,"pick"));
        }
    }
   
    
    if (open_key)
    {
        global.controller_levelup_skill=!global.controller_levelup_skill;
    }
    if (global.controller_levelup_skill)
    {
        if (rright)
        {
            controller_levelup_index++;
        }
        else if (rleft)
        {
            controller_levelup_index--;
        }
        if (controller_levelup_index&gt;2)
        {
            controller_levelup_index-=3;
        }
        else if (controller_levelup_index&lt;0)
        {
            controller_levelup_index+=3;
        }
        with (obj_Hero)
        {
            draw_set_colour(c_black);
            draw_set_alpha(0.3);
            var centerX=view_xview[0]+160,centerY=view_yview[0]+120;
            draw_rectangle(centerX-130,centerY-80,centerX+130,centerY+80,false);
            draw_set_alpha(1);
            draw_set_colour(c_aqua);
            draw_set_font(font1);
            var title = "Skills";
            draw_text(centerX-string_width(title)*0.5,centerY-70,title);
            
            draw_set_colour(c_yellow);
            draw_rectangle(centerX-69+(50*other.controller_levelup_index),centerY-9,centerX-39+(50*other.controller_levelup_index),centerY+20,false);
            if char == 7 //NIGHTBLADE
            {
                if skmode == 1
                {
                    draw_sprite_ext(spr_Skill_A_New,char,centerX-70,centerY-10,2,2,0,c_white,1);
                    draw_sprite_ext(spr_Skill_B_New,char,centerX-20,centerY-10,2,2,0,c_white,1);
                    draw_sprite_ext(spr_Skill_C,char,centerX+30,centerY-10,2,2,0,c_white,1);          
                }else
                if skmode == 2
                {
                    draw_sprite_ext(spr_Skill_C,char,centerX-70,centerY-10,2,2,0,c_white,1);
                    draw_sprite_ext(spr_Skill_B_New,char,centerX-20,centerY-10,2,2,0,c_white,1);
                    draw_sprite_ext(spr_Skill_A_New,char,centerX+30,centerY-10,2,2,0,c_white,1);
                }
            }else
            {       
                draw_sprite_ext(spr_Skill_A_New,char,centerX-70,centerY-10,2,2,0,c_white,1);
                draw_sprite_ext(spr_Skill_B_New,char,centerX-20,centerY-10,2,2,0,c_white,1);
                draw_sprite_ext(spr_Skill_C,char,centerX+30,centerY-10,2,2,0,c_white,1);
            }
            
            var keyR,keyL;
            
            keyL= "["+Return_ContKey(ds_map_find_value(global.ckeys,'fskill'))+"]" or "LMB";
            keyR= "["+Return_ContKey(ds_map_find_value(global.ckeys,'askill'))+"]" or "RMB";
           
            draw_set_colour(c_white);
            draw_set_font(font0);
            draw_set_halign(fa_left);
            draw_set_valign(fa_bottom);
            //FIRST    
            switch (other.controller_levelup_index)
            {
                case 0:
                    ftext = "[c="+string(color[char])+"]"+sk_name[char]+"[/c]    [c="+string(DS_BLUE)+"]Tier "+string(ability_lvl[0])+"[/c] "+keyL+"#"+sk_desc[char];
                break;
                case 1:
                    if ( global.pad[GAMEPAD_1])
                    {
                        ftext = "[c="+string(color[char])+"]"+sk_nameB[char]+"[/c]    [c="+string(DS_BLUE)+"]Tier "+string(ability_lvl[1])+"[/c] ["+Return_ContKey(ds_map_find_value(global.ckeys,'sskill'))+"]#"+sk_descB[char];
                    }
                    else
                    {
                        ftext = "[c="+string(color[char])+"]"+sk_nameB[char]+"[/c]    [c="+string(DS_BLUE)+"]Tier "+string(ability_lvl[1])+"[/c] ["+Return_Key(ds_map_find_value(global.keys,'sskill'))+"]#"+sk_descB[char];
                    }
                break;
                case 2:
                    if ( global.pad[GAMEPAD_1])
                    {
                        ftext = "[c="+string(color[char])+"]"+sk_nameC[char]+"[/c]    [c="+string(DS_BLUE)+"]Tier "+string(ability_lvl[2])+"[/c] ["+Return_ContKey(ds_map_find_value(global.ckeys,'tskill'))+"]#"+sk_descC[char];
                    }
                    else
                    {
                        ftext = "[c="+string(color[char])+"]"+sk_nameC[char]+"[/c]    [c="+string(DS_BLUE)+"]Tier "+string(ability_lvl[2])+"[/c] ["+Return_Key(ds_map_find_value(global.keys,'tskill'))+"]#"+sk_descC[char];
                    }
                break;
            }
            draw_text_colortags(centerX-125+4,centerY+85-(string_height(ftext)),ftext);
            draw_set_valign(false);    
            draw_set_halign(false);
            if skill_pnt &gt; 0
            {
                var multiple="";
                if (skill_pnt&gt;1)
                {
                    multiple="s";
                }
                var btext = "("+string(skill_pnt)+" point"+multiple+" available)";
                draw_text(centerX-string_width(btext)*0.5,centerY-56,btext);
                draw_sprite_ext(spr_RankUp,0,centerX-70,centerY-10,2,2,0,c_white,1);
                draw_sprite_ext(spr_RankUp,0,centerX-20,centerY-10,2,2,0,c_white,1);
                draw_sprite_ext(spr_RankUp,0,centerX+30,centerY-10,2,2,0,c_white,1);
                if cont_add
                {
                    Play_Sound(snd_upskill,1,1,0,5000,true,false);
                    ability_lvl[other.controller_levelup_index] += 1;
                    skill_pnt -= 1
                    Refresh_Description() 
                    stat = true;                       
                    return false;
                }
                else
                {                
                    return true;
                }
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTRIBUTES HUD
if (stat) {
    global.stat_recently_closed=false;
}else {
    global.stat_recently_closed=true;
}

if (global.coop) then draw_set_alpha(0.5);

var player1 = instance_find(obj_Hero,0);
var player2 = instance_find(obj_Hero,1);


with ( player1 ) {
    var baseX=160,baseY=120;
    var extraOffset=30;
    var using_controller = global.pad[GAMEPAD_1];
    var hpbCoefficient = hpb/hpmax[char];
    var hpCoefficient = hp/hpmax[char];
    var expCoefficient = expcur/expmax;
    if other.stat == false &amp;&amp; global.inv == false
    {
        draw_set_font(font0);        
        draw_set_valign(fa_top);
        draw_set_alpha(1);    
        
        //NEW        
        draw_sprite(spr_HUD_New,0,view_xview,view_yview);
        draw_sprite(spr_Frame,char,view_xview+152,view_yview+207);
        draw_set_color(c_gray);
        draw_set_halign(fa_center)
                
        draw_text(view_xview+view_wview*0.5,view_yview+200,string(global.level));         
        
        var hp_perc,shield_perc;
        hp_perc = 100*hpmax[char]/(hpmax[char]+shield_amount);
        shield_perc = 100*(shield_amount)/(hpmax[char]+shield_amount);
        var hp_val = hpCoefficient*hp_perc;
        var hpb_val = hpbCoefficient*hp_perc;
        var hp_bar_width = 47;
        
        draw_healthbar(view_xview+102,view_yview+213,view_xview+149,view_yview+219,ceil(hp_val),c_black,DS_RED,DS_RED,1,false,false);
        draw_healthbar(view_xview+102,view_yview+213,view_xview+149,view_yview+219,ceil(hpb_val),c_black,DS_GREEN,DS_GREEN,1,false,false);
        //shield
        if (shield_amount&gt;0)
        {
            draw_healthbar(view_xview+102,view_yview+213,view_xview+149-hp_val*0.01*hp_bar_width,view_yview+219,100,c_black,DS_BLUE,DS_BLUE,1,false,false);
            draw_healthbar(view_xview+102,view_yview+213,view_xview+149-hpb_val*0.01*hp_bar_width,view_yview+219,100,c_black,DS_LBLUE,DS_LBLUE,1,false,false);
        }
        //end shield
        draw_healthbar(view_xview+168,view_yview+213,view_xview+215,view_yview+219,floor(expCoefficient*100),c_black,DS_PURPLE,DS_PURPLE,0,false,false);
        draw_set_alpha(0.2)
        if (shield_amount&gt;0)
        {
            draw_healthbar(view_xview+102,view_yview+216,view_xview+149,view_yview+219,100,c_black,c_black,c_black,1,false,false);
            draw_healthbar(view_xview+102,view_yview+216,view_xview+149,view_yview+219,100,c_black,c_black,c_black,1,false,false);
        }
        else
        {
            draw_healthbar(view_xview+102,view_yview+216,view_xview+149,view_yview+219,ceil(hpbCoefficient*100),c_black,c_black,c_black,1,false,false);
            draw_healthbar(view_xview+102,view_yview+216,view_xview+149,view_yview+219,ceil(hpCoefficient*100),c_black,c_black,c_black,1,false,false);
        }
        draw_healthbar(view_xview+168,view_yview+216,view_xview+215,view_yview+219,floor(expCoefficient*100),c_black,c_black,c_black,0,false,false);
        
        //health text        
        draw_set_halign(fa_center);
        draw_set_alpha(1);
        draw_set_color(c_white);
        if (shield_amount&gt;0)
        {
            draw_text(view_xview+125,view_yview+213,string(ceil(hp))+"/"+string(ceil(hpmax[char]))+"+"+string(shield_amount));
        }
        else
        {
            draw_text(view_xview+125,view_yview+213,string(ceil(hp))+"/"+string(ceil(hpmax[char])));
        }
        draw_text(view_xview+192,view_yview+213,string(ceil(expcur))+"/"+string(ceil(expmax)));        
        
        var sx = view_xview+106;
        var sy = view_yview+222;
        draw_set_font(other.numfont);
        if other.cont_alpha &gt; 0 other.cont_alpha -= 0.005 else other.cont_alpha = 0;
        Skill_Desc_Display();

        draw_sprite(spr_Act_Skill,0,sx+45,sy);
        
        if char == 7 //NIGHTBLADE
        {
            if skmode == 1
            {
                draw_sprite(spr_Skill_A_New,char,sx,sy);        
                draw_sprite(spr_Skill_B_New,char,sx+15,sy);     
                draw_sprite(spr_Skill_C,char,sx+30,sy);           
            }else
            if skmode == 2
            {
                draw_sprite(spr_Skill_C,char,sx,sy);        
                draw_sprite(spr_Skill_B_New,char,sx+15,sy);     
                draw_sprite(spr_Skill_A_New,char,sx+30,sy);           
            }
        }else
        {                
            draw_sprite(spr_Skill_A_New,char,sx,sy);        
            draw_sprite(spr_Skill_B_New,char,sx+15,sy);     
            draw_sprite(spr_Skill_C,char,sx+30,sy);   
        }

        //SKILL MARK               
        if (ability_lvl[1] &gt; 0 or ability_lvl[2] &gt; 0)
        {draw_sprite(spr_Skill_Arrow,0,sx+(15*skill_act),sy)}        
        draw_set_halign(fa_center);//6x12
        var indexA=0,indexB=0,indexC=0;
        var objA=ds_list_find_value(global.potion_objectA,0),objB=ds_list_find_value(global.potion_objectB,0),objC=ds_list_find_value(global.potion_objectC,0);
        switch (objA)
        {
            case obj_Potion_of_Rage:
                indexA=1;
            break;
            case obj_Potion_of_Penetration:
                indexA=2;
            break;
            case obj_Potion_of_Risk:
                indexA=3;
            break;
        }
        switch (objB)
        {
            case obj_Potion_of_Rage:
                indexB=1;
            break;
            case obj_Potion_of_Penetration:
                indexB=2;
            break;
            case obj_Potion_of_Risk:
                indexB=3;
            break;
        }
        switch (objC)
        {
            case obj_Potion_of_Rage:
                indexC=1;
            break;
            case obj_Potion_of_Penetration:
                indexC=2;
            break;
            case obj_Potion_of_Risk:
                indexC=3;
            break;
        }
        if ds_list_size(global.item_act)&gt;0 draw_sprite_part(ds_list_find_value(global.item_act,0),0,6,6,12,12,sx+45+2,sy+2);
        if ds_list_size(global.potionA)&gt;0 
        {
            draw_sprite_part(ds_list_find_value(global.potionA,0),indexA,6,6,12,12,sx+60+2,sy+2);
            draw_text_outlined(sx+60+10,sy+1,"x"+string(ds_list_size(global.potionA)),c_black,c_white);
        }
        if ds_list_size(global.potionB)&gt;0 
        {
            draw_sprite_part(ds_list_find_value(global.potionB,0),indexB,6,6,12,12,sx+75+2,sy+2);
            draw_text_outlined(sx+75+10,sy+1,"x"+string(ds_list_size(global.potionB)),c_black,c_white);
        }
        if ds_list_size(global.potionC)&gt;0 
        {
            draw_sprite_part(ds_list_find_value(global.potionC,0),indexC,6,6,12,12,sx+90+2,sy+2);
            draw_text_outlined(sx+90+10,sy+1,"x"+string(ds_list_size(global.potionC)),c_black,c_white);
        }
        
        draw_set_alpha(0.6)
        draw_set_color(c_blue)
        if (alarm[0]&gt;0)
        {
            draw_rectangle_cd(sx+2,sy+2,sx+16-2,sy+16-2,        (alarm[0]/cooldown[char] - (buff_cd[0]*0.01)*cooldown[char])) ;
        }
        if (alarm[1]&gt;0)
        {
            draw_rectangle_cd(sx+15+2,sy+2,sx+15+16-2,sy+16-2,  (alarm[1]/cooldownB[char] - (buff_cd[1]*0.01)*cooldownB[char]));
        }
        if (alarm[5]&gt;0)
        {
            draw_rectangle_cd(sx+30+2,sy+2,sx+30+16-2,sy+16-2,  (alarm[5]/cooldownC[char] - (buff_cd[2]*0.01)*cooldownC[char]));
        }
        if (alarm[3]&gt;0)
        {
            draw_rectangle_cd(sx+45+2,sy+2,sx+45+16-2,sy+16-2,  alarm[3]*0.0000015432);
        }
        if ability_lvl[1] &lt; 1 or Can_CastB()
        {
            draw_set_alpha(0.8);
            draw_set_color(c_black);
            draw_rectangle(sx+15+2,sy+2,sx+15+15-2,sy+15-2,false);   
        }
        if ability_lvl[2] &lt; 1 or Can_CastC()
        {
            draw_set_alpha(0.8);
            draw_set_color(c_black);
            draw_rectangle(sx+30+2,sy+2,sx+30+15-2,sy+15-2,false);
        }        
        draw_set_alpha(1)    
        if (alarm[0] != -1) draw_text_outlined(sx+8,sy+4,ceil((alarm[0]*0.0166667)),c_black,c_white);
        if (alarm[1] != -1) draw_text_outlined(sx+8+15,sy+4,ceil((alarm[1]*0.0166667)),c_black,c_white);
        if (alarm[5] != -1) draw_text_outlined(sx+8+30,sy+4,ceil((alarm[5]*0.0166667)),c_black,c_white);
        else
        {
            if char == 6
            {
                draw_text_outlined(sx+8+30+4,sy+4+4,((summon+ability_lvl[2])-instance_number(obj_Ally)),c_black,c_white);
            }        
        }
        if (alarm[3] != -1) draw_text_outlined(sx+8+45,sy+4,ceil((alarm[3]*0.0166667)),c_black,c_white);

        draw_set_halign(fa_left);
        draw_set_color(merge_colour(c_yellow,c_orange,0.3));
        //Was moved from below to spare extra draw_set_colour
        draw_text(view_xview+129,view_yview+204,string(golden_key));
        if global.coin_col &gt; 0
            draw_text(view_xview+4,view_yview+view_hview-16,"$ "+string(floor(coin))+" +$"+string(floor(global.coin_col)));
        else        
            draw_text(view_xview+4,view_yview+view_hview-16,"$ "+string(floor(coin)));
        draw_set_color(c_gray);            
        draw_text(view_xview+110,view_yview+204,string(silver_key));
        //draw_set_color(merge_colour(c_yellow,c_orange,0.3));
        //Moved draw_golden upwards
        
        draw_set_halign(fa_right);
        //draw_set_color(c_gray) It is already gray
        draw_text(view_xview+view_wview-8,view_yview+view_hview-24,string(global.mark)+"/"+string(instance_number(obj_Mark)));
        //END NEW
        
        
        draw_set_halign(fa_left);
        /*draw_sprite(spr_Frame,char,view_xview+10,view_yview+16);
        draw_sprite(spr_HPBar,0,view_xview+10+sprite_get_width(spr_Frame)+2,view_yview+16);        
        
        draw_sprite_stretched(spr_HPFillB,0,view_xview+11+sprite_get_width(spr_Frame)+2,view_yview+15,ceil((hpb/hpmax[char])*48),11);
        draw_sprite_stretched(spr_HPFill,0,view_xview+11+sprite_get_width(spr_Frame)+2,view_yview+15,ceil((hp/hpmax[char])*48),11);
        draw_sprite_stretched(spr_XPFill,0,view_xview+11+sprite_get_width(spr_Frame)+2,view_yview+15+9,floor((expcur/expmax)*48),6);
    
        draw_set_color(merge_colour(c_purple,c_white,0.4));
        if global.exp_ctr &gt; 0
            draw_text(view_xview+(sprite_get_width(spr_HPBar)/2)+26,view_yview+15+9,"+"+string(floor(global.exp_col))+" exp");
                
        draw_set_color(merge_colour(c_yellow,c_orange,0.3));
        if global.coin_col &gt; 0
            draw_text(view_xview+11,view_yview+32,"$"+string(floor(coin))+" +$"+string(floor(global.coin_col)));
        else        
            draw_text(view_xview+11,view_yview+32,"$"+string(floor(coin)));
            
        //keys
        draw_sprite(spr_Key_UI,0,view_xview+11,view_yview+48);
        draw_sprite(spr_Key_UI,1,view_xview+11,view_yview+58);
        //mark
        draw_sprite(spr_Mark_UI,0,view_xview+9,view_yview+68);
        draw_set_color(c_gray);
        draw_text(view_xview+24,view_yview+48,string(silver_key));
        draw_text(view_xview+24,view_yview+58,string(golden_key));        
        draw_text(view_xview+24,view_yview+70,string(global.mark)+"/"+string(instance_number(obj_Mark)));
        
        draw_set_color(c_black);
        draw_set_alpha(0.2);
        draw_text(view_xview+20+sprite_get_width(spr_Frame)+2,view_yview+17+1,string(ceil(hp))+"/"+string(ceil(hpmax[char])));       
        draw_set_alpha(1);
        draw_set_color(c_white);
        draw_text(view_xview+20+sprite_get_width(spr_Frame)+2,view_yview+17,string(ceil(hp))+"/"+string(ceil(hpmax[char])));       
        //draw_text(view_xview+20+sprite_get_width(spr_Frame)+2,view_yview+17*2,string(ceil(expcur))+"/"+string(ceil(expmax)));

        draw_set_color(c_gray);
        draw_text(view_xview+12,view_yview+8,"LEVEL "+string(global.level)); 
        draw_set_color(c_yellow); 
        if (floor(alarm[2]/100)) &gt; -1 
        {
            //draw_text(view_xview+64,view_yview+15,string_upper(status));
            draw_sprite_stretched(spr_Status_Fill,0,view_xview,view_yview,1,(alarm[2]/status_cd)*240);
            //draw_healthbar(view_xview+64,view_yview+15,view_xview+64+16,view_yview+15+4,(alarm[2]/status_cd)*100,c_black,merge_colour(c_yellow,c_orange,0.3),merge_colour(c_yellow,c_orange,0.3),0,true,true)
        }
        */        
      
        
        
        
        //ABILITY ADD BUTTON
        if skill_pnt &gt; 0
        {
            if mouse_x &gt; sx &amp;&amp; mouse_x &lt; sx+16 &amp;&amp; mouse_y &gt; sy &amp;&amp; mouse_y &lt; sy+16
                draw_sprite(spr_RankUp,0,sx,sy-1); 
            else
                draw_sprite(spr_RankUp,0,sx,sy); 
            
            if mouse_x &gt; sx+15 &amp;&amp; mouse_x &lt; sx+15+16 &amp;&amp; mouse_y &gt; sy &amp;&amp; mouse_y &lt; sy+16
                draw_sprite(spr_RankUp,0,sx+15,sy-1); 
            else
                draw_sprite(spr_RankUp,0,sx+15,sy); 
            
            if mouse_x &gt; sx+30 &amp;&amp; mouse_x &lt; sx+30+16 &amp;&amp; mouse_y &gt; sy &amp;&amp; mouse_y &lt; sy+16
                draw_sprite(spr_RankUp,0,sx+30,sy-1); 
            else
                draw_sprite(spr_RankUp,0,sx+30,sy);
            
            //draw_set_halign(false); Not needed- override by below
            //draw_set_valign(false); Not needed- override by below
        }        
        
        draw_set_font(font0);
        //draw_set_halign(false); Not needed- override by below    
        //draw_set_valign(false); Not needed- override by below
        
        draw_set_alpha(1);
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        //draw_sprite(spr_Dungeon_Name_Back,0,view_xview+view_wview,view_yview+view_hview-8);
        if stat_pnt &gt; 0
        {
            draw_set_color(c_yellow)        
            /*if (gamepad_detected || joystick_detected)
            {
                var _key = "["+Return_ContKey(ds_map_find_value(global.ckeys,'stat'))+"]";
            }
            else
            {
                var _key = "["+Return_Key(ds_map_find_value(global.keys,'stat'))+"]";
            }*/
            
            var _key = "["+ max( Return_Key(ds_map_find_value(global.keys,'stat')), Return_ContKey(ds_map_find_value(global.ckeys,'stat')) ) +"]";
            draw_text(view_xview+view_wview-8,view_yview+view_hview-8,"Press "+_key);
        }else
        {
            draw_set_color(c_gray)
            draw_text(view_xview+view_wview-8,view_yview+view_hview-8,string(global.dungeon_name)+" "+string(global.boss_rm));
        }
        draw_set_halign(false);
        draw_set_valign(false);    
        draw_set_color(c_gray)

    }
    //STATS
    draw_set_halign(fa_center);        
    draw_set_color(c_black);
    
    //draw_set_alpha(other.statx/1.5);
    //draw_rectangle(view_xview+64,view_yview+8,view_xview+320-64,view_yview+240-8,false);
    draw_set_alpha(other.statx*0.5);
    draw_rectangle(view_xview+0,view_yview+0,view_xview+320,view_yview+240,false);
    
    draw_set_alpha(other.statx);
    //draw_set_color(c_white); Not used below before c_gray
    
    draw_sprite(spr_Stats_Tab,0,view_xview+view_wview/2,view_yview+view_hview/2);
    draw_sprite(spr_Frame,char,view_xview+view_wview/2-8,view_yview+view_hview/2-48);
    draw_set_color(c_gray);
    //draw_set_halign(fa_center); halign is not changed
    draw_text(extraOffset+view_xview+view_wview/2,view_yview+view_hview/2-12,global.level);
    draw_set_halign(false);    
    draw_sprite_stretched(spr_HPFillB,0,extraOffset+view_xview+view_wview/2-12,view_yview+view_hview/2-4,ceil(hpbCoefficient*37),7);
    draw_sprite_stretched(spr_HPFill,0,extraOffset+view_xview+view_wview/2-12,view_yview+view_hview/2-4,ceil(hpCoefficient*37),7);    
    draw_sprite_stretched(spr_XPFill,0,extraOffset+view_xview+view_wview/2-12,view_yview+view_hview/2+2,floor(expCoefficient*37),7);    
    
    if(floor(dam_bon[char]+buff_dam)&gt;0) var atk_text = string(floor(atk_dam[char]))+"+"+string(floor(dam_bon[char]+buff_dam))   else var atk_text = string(floor(atk_dam[char]))  
    if(floor(def_bon[char]+buff_def)&gt;0) var def_text = string(floor(defense[char]))+"+"+string(floor(def_bon[char]+buff_def))   else var def_text = string(floor(defense[char]))
    if(floor(mag_bon[char])&gt;0)          var mag_text = string(floor(mag_dam[char]))+"+"+string(floor(mag_bon[char]))            else var mag_text = string(floor(mag_dam[char]))  
    if(floor(mr_bon[char])&gt;0)           var res_text = string(floor(mresist[char]))+"+"+string(floor(mr_bon[char]))             else var res_text = string(floor(mresist[char]))
    
    var extra_speed="";
    if (Item_In_List(spr_Shoes_of_Haste))
    {
        extra_speed="*2";
    }
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12,atk_text);  
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+6,def_text);
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+12,mag_text);  
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+18,res_text);    
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+24,string(min((wlk_spd[char]),3))+extra_speed);
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+30,string(min(floor(accuracy[char]+acc_bon[char]),100))+"%");    
    
    //RANK
    draw_set_halign(fa_center);
    var sx = -2;var sxx = -2;
    repeat(5){draw_sprite(spr_Star,1,extraOffset+view_xview+view_wview/2+(sxx*8),(view_yview+view_hview/2)+38+16);sxx += 1;}        
    repeat(rank[char]){draw_sprite(spr_Star,0,extraOffset+view_xview+view_wview/2+(sx*8),(view_yview+view_hview/2)+38+16);sx += 1;}                     
    
    if stat_pnt &gt; 0 draw_text(view_xview+baseX,view_yview+baseY+64,"POINTS '"+string(stat_pnt)+"'");
    if ( global.pad[GAMEPAD_1])
    {
        var s_key = "["+Return_ContKey(ds_map_find_value(global.ckeys,'stat'))+"]";
    }
    else
    {
        var s_key = "["+Return_Key(ds_map_find_value(global.keys,'stat'))+"]";
    }
    draw_text(view_xview+baseX,view_yview+baseY+74,"PRESS '"+s_key+"' TO CLOSE");    
    draw_set_halign(false);
    draw_set_valign(false);         

    if stat_pnt &gt; 0
    {    
        var centerx=160;
        var centery=120;
        posx[0] = view_xview+centerx+19+extraOffset;
        posy[0] = view_yview+centery+11;
        
        posx[1] = view_xview+centerx+19+extraOffset;
        posy[1] = view_yview+centery+17;
        
        posx[2] = view_xview+centerx+19+extraOffset;
        posy[2] = view_yview+centery+23;
        
        posx[3] = view_xview+centerx+19+extraOffset;
        posy[3] = view_yview+centery+29;
        
        posx[4] = view_xview+centerx+19+extraOffset;
        posy[4] = view_yview+centery+35;
        
        posx[5] = view_xview+centerx+19+extraOffset;
        posy[5] = view_yview+centery+41;  
        
        var rup=false,rdown=false;
        /*if (gamepad_detected)
        {
            var pad = gamepad_get_index(0);
            if (pad!=-1)
            {
                rup = gamepad_check_rpushed_up(pad);
                rdown = gamepad_check_rpushed_down(pad);
            }
        } else if (joystick_detected)
        {
            rup = joystick_check_rstick_pushed_up(0);
            rdown = joystick_check_rstick_pushed_down(0);
        }*/
        rup = gamepad_axis_value(0, gp_axisrv) &lt; 0;
        rdown =  gamepad_axis_value(0, gp_axisrv) &gt; 0;
        if (rup)
        {
            other.controller_stat_index--;
        }
        else if (rdown)
        {
            other.controller_stat_index++;
        }
        
        if (other.controller_stat_index&lt;0)
        {
            other.controller_stat_index=0;
        }
        else if (other.controller_stat_index&gt;5)
        {
            other.controller_stat_index=5;
        }


        
        if (mouse_x &gt; posx[0] &amp;&amp; mouse_x &lt; posx[0]+9 &amp;&amp; mouse_y &gt; posy[0]+1 &amp;&amp; mouse_y &lt; posy[0]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==0)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[0],posy[0]-1);
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[0]-12,posy[0]+2,posx[0],posy[0]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[0],posy[0]); 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (mouse_x &gt; posx[1] &amp;&amp; mouse_x &lt; posx[1]+9 &amp;&amp; mouse_y &gt; posy[1]+1 &amp;&amp; mouse_y &lt; posy[1]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==1)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[1],posy[1]-1); 
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[1]-12,posy[1]+2,posx[1],posy[1]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[1],posy[1]);
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (mouse_x &gt; posx[2] &amp;&amp; mouse_x &lt; posx[2]+9 &amp;&amp; mouse_y &gt; posy[2]+1 &amp;&amp; mouse_y &lt; posy[2]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==2)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[2],posy[2]-1);
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[2]-12,posy[2]+2,posx[2],posy[2]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[2],posy[2]);
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (mouse_x &gt; posx[3] &amp;&amp; mouse_x &lt; posx[3]+9 &amp;&amp; mouse_y &gt; posy[3]+1 &amp;&amp; mouse_y &lt; posy[3]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==3)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[3],posy[3]-1); 
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[3]-12,posy[3]+2,posx[3],posy[3]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[3],posy[3]); 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (wlk_spd[char]+buff_spd) &lt;= 2
        {
            if (mouse_x &gt; posx[4] &amp;&amp; mouse_x &lt; posx[4]+9 &amp;&amp; mouse_y &gt; posy[4]+1 &amp;&amp; mouse_y &lt; posy[4]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==4)
            {
                draw_sprite(spr_Add_Stats_IconB,0,posx[4],posy[4]-1); 
                draw_set_blend_mode(bm_add);
                draw_rectangle_colour(posx[4]-12,posy[4]+2,posx[4],posy[4]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
                draw_set_blend_mode(bm_normal);            
            }
            else
                draw_sprite(spr_Add_Stats_IconB,0,posx[4],posy[4]);       
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (floor(accuracy[char]+acc_bon[char])) &lt; 100
        {
            if (mouse_x &gt; posx[5] &amp;&amp; mouse_x &lt; posx[5]+9 &amp;&amp; mouse_y &gt; posy[5]+1 &amp;&amp; mouse_y &lt; posy[5]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==5)
            {
                draw_sprite(spr_Add_Stats_IconB,0,posx[5],posy[5]-1); 
                draw_set_blend_mode(bm_add);
                draw_rectangle_colour(posx[5]-12,posy[5]+2,posx[5],posy[5]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
                draw_set_blend_mode(bm_normal);
            }
            else
                draw_sprite(spr_Add_Stats_IconB,0,posx[5],posy[5]);      
        }
        draw_set_halign(false);
        draw_set_valign(false);                
    }
    //SKILL TREE
    /*draw_sprite(spr_Skill_A_New,char,view_xview+view_wview/2+34,view_yview+view_hview/2+7-25);
    draw_sprite(spr_Skill_B_New,char,view_xview+view_wview/2+34+16,view_yview+view_hview/2+7-25);
    draw_sprite(spr_Skill_C,char,view_xview+view_wview/2+34+32,view_yview+view_hview/2+7-25);    
    
    draw_sprite(spr_Skill_A_New,char,view_xview+view_wview/2+34,view_yview+view_hview/2+7);
    draw_sprite(spr_Skill_B_New,char,view_xview+view_wview/2+34+16,view_yview+view_hview/2+7);
    draw_sprite(spr_Skill_C,char,view_xview+view_wview/2+34+32,view_yview+view_hview/2+7);
    
    draw_sprite(spr_Skill_A_New,char,view_xview+view_wview/2+34,view_yview+view_hview/2+7+25);
    draw_sprite(spr_Skill_B_New,char,view_xview+view_wview/2+34+16,view_yview+view_hview/2+7+25);
    draw_sprite(spr_Skill_C,char,view_xview+view_wview/2+34+32,view_yview+view_hview/2+7+25); */


    //STATUSES
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+63,string(hp_regen));
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+72,string(life_steal)+"%");       
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+81,string(poison_chance)+"%");
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+90,string(shock_chance)+"%");
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+99,string(burn_chance)+"%");    
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+108,string(slow_chance)+"%");    
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+117,string(stun_chance)+"%");
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+126,string((crit_chance))+"%");
    
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+63 &amp;&amp; mouse_y &lt; (view_yview+42+63)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"HP Regen")
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+72 &amp;&amp; mouse_y &lt; (view_yview+42+72)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Lifesteal")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+81 &amp;&amp; mouse_y &lt; (view_yview+42+81)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Poison Chance")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+90 &amp;&amp; mouse_y &lt; (view_yview+42+90)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Shock Chance")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+99 &amp;&amp; mouse_y &lt; (view_yview+42+99)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Burn Chance")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+108 &amp;&amp; mouse_y &lt; (view_yview+42+108)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Slow Chance");
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+117 &amp;&amp; mouse_y &lt; (view_yview+42+117)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Stun Chance")       
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+126 &amp;&amp; mouse_y &lt; (view_yview+42+126)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Critical Chance")
}


//////////////////
//////////////////
//////////////////
/////////////////
if (instance_exists(player2) &amp;&amp; global.coop) {
with player2
{
    var baseX=160,baseY=120;
    var extraOffset=30;
    var using_controller = global.pad[GAMEPAD_1];
    var hpbCoefficient = hpb/hpmax[char];
    var hpCoefficient = hp/hpmax[char];
    var expCoefficient = expcur/expmax;
    if other.stat == false &amp;&amp; global.inv == false {
        draw_set_font(font0);        
        draw_set_valign(fa_top);
        draw_set_alpha(1);    
        
        //NEW        
        draw_sprite(spr_HUD_New,0,view_xview,view_yview-195);
        draw_sprite(spr_Frame,char,view_xview+152,view_yview+12); //207
        draw_set_color(c_gray);
        draw_set_halign(fa_center)
                
        draw_text(view_xview+view_wview*0.5,view_yview+4,string(global.level));         
        
        var hp_perc,shield_perc;
        hp_perc = 100*hpmax[char]/(hpmax[char]+shield_amount);
        shield_perc = 100*(shield_amount)/(hpmax[char]+shield_amount);
        var hp_val = hpCoefficient*hp_perc;
        var hpb_val = hpbCoefficient*hp_perc;
        var hp_bar_width = 47;
        
        //draw_healthbar(view_xview+102,view_yview+213,view_xview+149,view_yview+219,ceil(hp_val),c_black,DS_RED,DS_RED,1,false,false);
        draw_healthbar(view_xview+102,view_yview+18,view_xview+149,view_yview+24,ceil(hp_val),c_black,DS_RED,DS_RED,1,false,false);
        draw_healthbar(view_xview+102,view_yview+18,view_xview+149,view_yview+24,ceil(hpb_val),c_black,DS_GREEN,DS_GREEN,1,false,false);
        //shield
        if (shield_amount&gt;0)
        {
            draw_healthbar(view_xview+102,view_yview+18,view_xview+149-hp_val*0.01*hp_bar_width,view_yview+24,100,c_black,DS_BLUE,DS_BLUE,1,false,false);
            draw_healthbar(view_xview+102,view_yview+18,view_xview+149-hpb_val*0.01*hp_bar_width,view_yview+24,100,c_black,DS_LBLUE,DS_LBLUE,1,false,false);
        }
        //end shield
        draw_healthbar(view_xview+168,view_yview+18,view_xview+215,view_yview+24,floor(expCoefficient*100),c_black,DS_PURPLE,DS_PURPLE,0,false,false);
        draw_set_alpha(0.2)
        if (shield_amount&gt;0)
        {
            draw_healthbar(view_xview+102,view_yview+21,view_xview+149,view_yview+24,100,c_black,c_black,c_black,1,false,false);
            draw_healthbar(view_xview+102,view_yview+21,view_xview+149,view_yview+24,100,c_black,c_black,c_black,1,false,false);
        }
        else
        {
            draw_healthbar(view_xview+102,view_yview+21,view_xview+149,view_yview+24,ceil(hpbCoefficient*100),c_black,c_black,c_black,1,false,false);
            draw_healthbar(view_xview+102,view_yview+21,view_xview+149,view_yview+24,ceil(hpCoefficient*100),c_black,c_black,c_black,1,false,false);
        }
        draw_healthbar(view_xview+168,view_yview+21,view_xview+215,view_yview+24,floor(expCoefficient*100),c_black,c_black,c_black,0,false,false);
        
        //health text        
        draw_set_halign(fa_center);
        draw_set_alpha(1);
        draw_set_color(c_white);
        if (shield_amount&gt;0)
        {
            draw_text(view_xview+125,view_yview+18,string(ceil(hp))+"/"+string(ceil(hpmax[char]))+"+"+string(shield_amount));
        }
        else
        {
            draw_text(view_xview+125,view_yview+18,string(ceil(hp))+"/"+string(ceil(hpmax[char])));
        }
        //draw_text(view_xview+192,view_yview+213,string(ceil(expcur))+"/"+string(ceil(expmax))); 
        draw_text(view_xview+192,view_yview+18,string(ceil(expcur))+"/"+string(ceil(expmax)));               
        
        var sx = view_xview+106;
        //var sy = view_yview+222;
        var sy = view_yview+27;
        draw_set_font(other.numfont);
        if other.cont_alpha &gt; 0 other.cont_alpha -= 0.005 else other.cont_alpha = 0;
        Skill_Desc_Display();

        draw_sprite(spr_Act_Skill,0,sx+45,sy);
        
        if char == 7 //NIGHTBLADE
        {
            if skmode == 1
            {
                draw_sprite(spr_Skill_A_New,char,sx,sy);        
                draw_sprite(spr_Skill_B_New,char,sx+15,sy);     
                draw_sprite(spr_Skill_C,char,sx+30,sy);           
            }else
            if skmode == 2
            {
                draw_sprite(spr_Skill_C,char,sx,sy);        
                draw_sprite(spr_Skill_B_New,char,sx+15,sy);     
                draw_sprite(spr_Skill_A_New,char,sx+30,sy);           
            }
        }else
        {                
            draw_sprite(spr_Skill_A_New,char,sx,sy);        
            draw_sprite(spr_Skill_B_New,char,sx+15,sy);     
            draw_sprite(spr_Skill_C,char,sx+30,sy);   
        }

        //SKILL MARK               
        if (ability_lvl[1] &gt; 0 or ability_lvl[2] &gt; 0)
        {draw_sprite(spr_Skill_Arrow,0,sx+(15*skill_act),sy)}        
        draw_set_halign(fa_center);//6x12
        var indexA=0,indexB=0,indexC=0;
        var objA=ds_list_find_value(global.potion_objectA,0),objB=ds_list_find_value(global.potion_objectB,0),objC=ds_list_find_value(global.potion_objectC,0);
        switch (objA)
        {
            case obj_Potion_of_Rage:
                indexA=1;
            break;
            case obj_Potion_of_Penetration:
                indexA=2;
            break;
            case obj_Potion_of_Risk:
                indexA=3;
            break;
        }
        switch (objB)
        {
            case obj_Potion_of_Rage:
                indexB=1;
            break;
            case obj_Potion_of_Penetration:
                indexB=2;
            break;
            case obj_Potion_of_Risk:
                indexB=3;
            break;
        }
        switch (objC)
        {
            case obj_Potion_of_Rage:
                indexC=1;
            break;
            case obj_Potion_of_Penetration:
                indexC=2;
            break;
            case obj_Potion_of_Risk:
                indexC=3;
            break;
        }
        if ds_list_size(global.item_act)&gt;0 draw_sprite_part(ds_list_find_value(global.item_act,0),0,6,6,12,12,sx+45+2,sy+2);
        if ds_list_size(global.potionA)&gt;0 
        {
            draw_sprite_part(ds_list_find_value(global.potionA,0),indexA,6,6,12,12,sx+60+2,sy+2);
            draw_text_outlined(sx+60+10,sy+1,"x"+string(ds_list_size(global.potionA)),c_black,c_white);
        }
        if ds_list_size(global.potionB)&gt;0 
        {
            draw_sprite_part(ds_list_find_value(global.potionB,0),indexB,6,6,12,12,sx+75+2,sy+2);
            draw_text_outlined(sx+75+10,sy+1,"x"+string(ds_list_size(global.potionB)),c_black,c_white);
        }
        if ds_list_size(global.potionC)&gt;0 
        {
            draw_sprite_part(ds_list_find_value(global.potionC,0),indexC,6,6,12,12,sx+90+2,sy+2);
            draw_text_outlined(sx+90+10,sy+1,"x"+string(ds_list_size(global.potionC)),c_black,c_white);
        }
        
        draw_set_alpha(0.6)
        draw_set_color(c_blue)
        if (alarm[0]&gt;0)
        {
            draw_rectangle_cd(sx+2,sy+2,sx+16-2,sy+16-2,        (alarm[0]/cooldown[char] - (buff_cd[0]*0.01)*cooldown[char])) ;
        }
        if (alarm[1]&gt;0)
        {
            draw_rectangle_cd(sx+15+2,sy+2,sx+15+16-2,sy+16-2,  (alarm[1]/cooldownB[char] - (buff_cd[1]*0.01)*cooldownB[char]));
        }
        if (alarm[5]&gt;0)
        {
            draw_rectangle_cd(sx+30+2,sy+2,sx+30+16-2,sy+16-2,  (alarm[5]/cooldownC[char] - (buff_cd[2]*0.01)*cooldownC[char]));
        }
        if (alarm[3]&gt;0)
        {
            draw_rectangle_cd(sx+45+2,sy+2,sx+45+16-2,sy+16-2,  alarm[3]*0.0000015432);
        }
        if ability_lvl[1] &lt; 1 or Can_CastB()
        {
            draw_set_alpha(0.8);
            draw_set_color(c_black);
            draw_rectangle(sx+15+2,sy+2,sx+15+15-2,sy+15-2,false);   
        }
        if ability_lvl[2] &lt; 1 or Can_CastC()
        {
            draw_set_alpha(0.8);
            draw_set_color(c_black);
            draw_rectangle(sx+30+2,sy+2,sx+30+15-2,sy+15-2,false);
        }        
        draw_set_alpha(1)    
        if (alarm[0] != -1) draw_text_outlined(sx+8,sy+4,ceil((alarm[0]*0.0166667)),c_black,c_white);
        if (alarm[1] != -1) draw_text_outlined(sx+8+15,sy+4,ceil((alarm[1]*0.0166667)),c_black,c_white);
        if (alarm[5] != -1) draw_text_outlined(sx+8+30,sy+4,ceil((alarm[5]*0.0166667)),c_black,c_white);
        else
        {
            if char == 6
            {
                draw_text_outlined(sx+8+30+4,sy+4+4,((summon+ability_lvl[2])-instance_number(obj_Ally)),c_black,c_white);
            }        
        }
        if (alarm[3] != -1) draw_text_outlined(sx+8+45,sy+4,ceil((alarm[3]*0.0166667)),c_black,c_white);

        draw_set_halign(fa_left);
        draw_set_color(merge_colour(c_yellow,c_orange,0.3));
        //Was moved from below to spare extra draw_set_colour
        draw_text(view_xview+129,view_yview+8,string(golden_key));
        if global.coin_col &gt; 0
            draw_text(view_xview+4,view_yview+8,"$ "+string(floor(coin))+" +$"+string(floor(global.coin_col)));
        else        
            //draw_text(view_xview+4,view_yview+view_hview-16,"$ "+string(floor(coin)));
            draw_text(view_xview+4,view_yview+view_hview+8,"$ "+string(floor(coin)));
        draw_set_color(c_gray);            
        //draw_text(view_xview+110,view_yview+204,string(silver_key));
         draw_text(view_xview+110,view_yview+8,string(silver_key));
        //draw_set_color(merge_colour(c_yellow,c_orange,0.3));
        //Moved draw_golden upwards
        
        draw_set_halign(fa_right);
        //draw_set_color(c_gray) It is already gray
        draw_text(view_xview+view_wview-8,view_yview+view_hview-24,string(global.mark)+"/"+string(instance_number(obj_Mark)));
        //END NEW
        
        
        draw_set_halign(fa_left);
        /*draw_sprite(spr_Frame,char,view_xview+10,view_yview+16);
        draw_sprite(spr_HPBar,0,view_xview+10+sprite_get_width(spr_Frame)+2,view_yview+16);        
        
        draw_sprite_stretched(spr_HPFillB,0,view_xview+11+sprite_get_width(spr_Frame)+2,view_yview+15,ceil((hpb/hpmax[char])*48),11);
        draw_sprite_stretched(spr_HPFill,0,view_xview+11+sprite_get_width(spr_Frame)+2,view_yview+15,ceil((hp/hpmax[char])*48),11);
        draw_sprite_stretched(spr_XPFill,0,view_xview+11+sprite_get_width(spr_Frame)+2,view_yview+15+9,floor((expcur/expmax)*48),6);
    
        draw_set_color(merge_colour(c_purple,c_white,0.4));
        if global.exp_ctr &gt; 0
            draw_text(view_xview+(sprite_get_width(spr_HPBar)/2)+26,view_yview+15+9,"+"+string(floor(global.exp_col))+" exp");
                
        draw_set_color(merge_colour(c_yellow,c_orange,0.3));
        if global.coin_col &gt; 0
            draw_text(view_xview+11,view_yview+32,"$"+string(floor(coin))+" +$"+string(floor(global.coin_col)));
        else        
            draw_text(view_xview+11,view_yview+32,"$"+string(floor(coin)));
            
        //keys
        draw_sprite(spr_Key_UI,0,view_xview+11,view_yview+48);
        draw_sprite(spr_Key_UI,1,view_xview+11,view_yview+58);
        //mark
        draw_sprite(spr_Mark_UI,0,view_xview+9,view_yview+68);
        draw_set_color(c_gray);
        draw_text(view_xview+24,view_yview+48,string(silver_key));
        draw_text(view_xview+24,view_yview+58,string(golden_key));        
        draw_text(view_xview+24,view_yview+70,string(global.mark)+"/"+string(instance_number(obj_Mark)));
        
        draw_set_color(c_black);
        draw_set_alpha(0.2);
        draw_text(view_xview+20+sprite_get_width(spr_Frame)+2,view_yview+17+1,string(ceil(hp))+"/"+string(ceil(hpmax[char])));       
        draw_set_alpha(1);
        draw_set_color(c_white);
        draw_text(view_xview+20+sprite_get_width(spr_Frame)+2,view_yview+17,string(ceil(hp))+"/"+string(ceil(hpmax[char])));       
        //draw_text(view_xview+20+sprite_get_width(spr_Frame)+2,view_yview+17*2,string(ceil(expcur))+"/"+string(ceil(expmax)));

        draw_set_color(c_gray);
        draw_text(view_xview+12,view_yview+8,"LEVEL "+string(global.level)); 
        draw_set_color(c_yellow); 
        if (floor(alarm[2]/100)) &gt; -1 
        {
            //draw_text(view_xview+64,view_yview+15,string_upper(status));
            draw_sprite_stretched(spr_Status_Fill,0,view_xview,view_yview,1,(alarm[2]/status_cd)*240);
            //draw_healthbar(view_xview+64,view_yview+15,view_xview+64+16,view_yview+15+4,(alarm[2]/status_cd)*100,c_black,merge_colour(c_yellow,c_orange,0.3),merge_colour(c_yellow,c_orange,0.3),0,true,true)
        }
        */        
      
        
        
        
        //ABILITY ADD BUTTON
        if skill_pnt &gt; 0
        {
            if mouse_x &gt; sx &amp;&amp; mouse_x &lt; sx+16 &amp;&amp; mouse_y &gt; sy &amp;&amp; mouse_y &lt; sy+16
                draw_sprite(spr_RankUp,0,sx,sy-1); 
            else
                draw_sprite(spr_RankUp,0,sx,sy); 
            
            if mouse_x &gt; sx+15 &amp;&amp; mouse_x &lt; sx+15+16 &amp;&amp; mouse_y &gt; sy &amp;&amp; mouse_y &lt; sy+16
                draw_sprite(spr_RankUp,0,sx+15,sy-1); 
            else
                draw_sprite(spr_RankUp,0,sx+15,sy); 
            
            if mouse_x &gt; sx+30 &amp;&amp; mouse_x &lt; sx+30+16 &amp;&amp; mouse_y &gt; sy &amp;&amp; mouse_y &lt; sy+16
                draw_sprite(spr_RankUp,0,sx+30,sy-1); 
            else
                draw_sprite(spr_RankUp,0,sx+30,sy);
            
            //draw_set_halign(false); Not needed- override by below
            //draw_set_valign(false); Not needed- override by below
        }        
        
        draw_set_font(font0);
        //draw_set_halign(false); Not needed- override by below    
        //draw_set_valign(false); Not needed- override by below
        
        draw_set_alpha(1);
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        //draw_sprite(spr_Dungeon_Name_Back,0,view_xview+view_wview,view_yview+view_hview-8);
        if stat_pnt &gt; 0
        {
            draw_set_color(c_yellow)        
            /*if (gamepad_detected || joystick_detected)
            {
                var _key = "["+Return_ContKey(ds_map_find_value(global.ckeys,'stat'))+"]";
            }
            else
            {
                var _key = "["+Return_Key(ds_map_find_value(global.keys,'stat'))+"]";
            }*/
            
            var _key = "["+ max( Return_Key(ds_map_find_value(global.keys,'stat')), Return_ContKey(ds_map_find_value(global.ckeys,'stat')) ) +"]";
            draw_text(view_xview+view_wview-8,view_yview+view_hview-8,"Press "+_key);
        }else
        {
            draw_set_color(c_gray)
            draw_text(view_xview+view_wview-8,view_yview+view_hview-8,string(global.dungeon_name)+" "+string(global.boss_rm));
        }
        draw_set_halign(false);
        draw_set_valign(false);    
        draw_set_color(c_gray)

    }
    //STATS
    draw_set_halign(fa_center);        
    draw_set_color(c_black);
    
    //draw_set_alpha(other.statx/1.5);
    //draw_rectangle(view_xview+64,view_yview+8,view_xview+320-64,view_yview+240-8,false);
    draw_set_alpha(other.statx*0.5);
    draw_rectangle(view_xview+0,view_yview+0,view_xview+320,view_yview+240,false);
    
    draw_set_alpha(other.statx);
    //draw_set_color(c_white); Not used below before c_gray
    
    draw_sprite(spr_Stats_Tab,0,view_xview+view_wview/2,view_yview+view_hview/2);
    draw_sprite(spr_Frame,char,view_xview+view_wview/2-8,view_yview+view_hview/2-48);
    draw_set_color(c_gray);
    //draw_set_halign(fa_center); halign is not changed
    draw_text(extraOffset+view_xview+view_wview/2,view_yview+view_hview/2-12,global.level);
    draw_set_halign(false);    
    draw_sprite_stretched(spr_HPFillB,0,extraOffset+view_xview+view_wview/2-12,view_yview+view_hview/2-4,ceil(hpbCoefficient*37),7);
    draw_sprite_stretched(spr_HPFill,0,extraOffset+view_xview+view_wview/2-12,view_yview+view_hview/2-4,ceil(hpCoefficient*37),7);    
    draw_sprite_stretched(spr_XPFill,0,extraOffset+view_xview+view_wview/2-12,view_yview+view_hview/2+2,floor(expCoefficient*37),7);    
    
    if(floor(dam_bon[char]+buff_dam)&gt;0) var atk_text = string(floor(atk_dam[char]))+"+"+string(floor(dam_bon[char]+buff_dam))   else var atk_text = string(floor(atk_dam[char]))  
    if(floor(def_bon[char]+buff_def)&gt;0) var def_text = string(floor(defense[char]))+"+"+string(floor(def_bon[char]+buff_def))   else var def_text = string(floor(defense[char]))
    if(floor(mag_bon[char])&gt;0)          var mag_text = string(floor(mag_dam[char]))+"+"+string(floor(mag_bon[char]))            else var mag_text = string(floor(mag_dam[char]))  
    if(floor(mr_bon[char])&gt;0)           var res_text = string(floor(mresist[char]))+"+"+string(floor(mr_bon[char]))             else var res_text = string(floor(mresist[char]))
    
    var extra_speed="";
    if (Item_In_List(spr_Shoes_of_Haste))
    {
        extra_speed="*2";
    }
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12,atk_text);  
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+6,def_text);
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+12,mag_text);  
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+18,res_text);    
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+24,string(min((wlk_spd[char]),3))+extra_speed);
    draw_text(view_xview+baseX+extraOffset-4,view_yview+baseY+12+30,string(min(floor(accuracy[char]+acc_bon[char]),100))+"%");    
    
    //RANK
    draw_set_halign(fa_center);
    var sx = -2;var sxx = -2;
    repeat(5){draw_sprite(spr_Star,1,extraOffset+view_xview+view_wview/2+(sxx*8),(view_yview+view_hview/2)+38+16);sxx += 1;}        
    repeat(rank[char]){draw_sprite(spr_Star,0,extraOffset+view_xview+view_wview/2+(sx*8),(view_yview+view_hview/2)+38+16);sx += 1;}                     
    
    if stat_pnt &gt; 0 draw_text(view_xview+baseX,view_yview+baseY+64,"POINTS '"+string(stat_pnt)+"'");
   
        var s_key = "["+Return_ContKey(ds_map_find_value(global.ckeys,'stat'))+"]" or "["+Return_Key(ds_map_find_value(global.keys,'stat'))+"]";

    
    draw_text(view_xview+baseX,view_yview+baseY+74,"PRESS '"+s_key+"' TO CLOSE");    
    draw_set_halign(false);
    draw_set_valign(false);         

    if stat_pnt &gt; 0
    {    
        var centerx=160;
        var centery=120;
        posx[0] = view_xview+centerx+19+extraOffset;
        posy[0] = view_yview+centery+11;
        
        posx[1] = view_xview+centerx+19+extraOffset;
        posy[1] = view_yview+centery+17;
        
        posx[2] = view_xview+centerx+19+extraOffset;
        posy[2] = view_yview+centery+23;
        
        posx[3] = view_xview+centerx+19+extraOffset;
        posy[3] = view_yview+centery+29;
        
        posx[4] = view_xview+centerx+19+extraOffset;
        posy[4] = view_yview+centery+35;
        
        posx[5] = view_xview+centerx+19+extraOffset;
        posy[5] = view_yview+centery+41;  
        
        var rup=false,rdown=false;
        /*if (gamepad_detected)
        {
            var pad = gamepad_get_index(0);
            if (pad!=-1)
            {
                rup = gamepad_check_rpushed_up(pad);
                rdown = gamepad_check_rpushed_down(pad);
            }
        } else if (joystick_detected)
        {
            rup = joystick_check_rstick_pushed_up(0);
            rdown = joystick_check_rstick_pushed_down(0);
        }*/
        rup = gamepad_axis_value(device, gp_axisrv) &lt; 0;
        rdown =  gamepad_axis_value(device, gp_axisrv) &gt; 0;
        if (rup)
        {
            other.controller_stat_index--;
        }
        else if (rdown)
        {
            other.controller_stat_index++;
        }
        
        if (other.controller_stat_index&lt;0)
        {
            other.controller_stat_index=0;
        }
        else if (other.controller_stat_index&gt;5)
        {
            other.controller_stat_index=5;
        }


        
        if (mouse_x &gt; posx[0] &amp;&amp; mouse_x &lt; posx[0]+9 &amp;&amp; mouse_y &gt; posy[0]+1 &amp;&amp; mouse_y &lt; posy[0]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==0)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[0],posy[0]-1);
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[0]-12,posy[0]+2,posx[0],posy[0]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[0],posy[0]); 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (mouse_x &gt; posx[1] &amp;&amp; mouse_x &lt; posx[1]+9 &amp;&amp; mouse_y &gt; posy[1]+1 &amp;&amp; mouse_y &lt; posy[1]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==1)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[1],posy[1]-1); 
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[1]-12,posy[1]+2,posx[1],posy[1]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[1],posy[1]);
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (mouse_x &gt; posx[2] &amp;&amp; mouse_x &lt; posx[2]+9 &amp;&amp; mouse_y &gt; posy[2]+1 &amp;&amp; mouse_y &lt; posy[2]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==2)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[2],posy[2]-1);
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[2]-12,posy[2]+2,posx[2],posy[2]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[2],posy[2]);
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (mouse_x &gt; posx[3] &amp;&amp; mouse_x &lt; posx[3]+9 &amp;&amp; mouse_y &gt; posy[3]+1 &amp;&amp; mouse_y &lt; posy[3]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==3)
        {
            draw_sprite(spr_Add_Stats_IconB,0,posx[3],posy[3]-1); 
            draw_set_blend_mode(bm_add);
            draw_rectangle_colour(posx[3]-12,posy[3]+2,posx[3],posy[3]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
            draw_set_blend_mode(bm_normal);            
        }
        else
            draw_sprite(spr_Add_Stats_IconB,0,posx[3],posy[3]); 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (wlk_spd[char]+buff_spd) &lt;= 2
        {
            if (mouse_x &gt; posx[4] &amp;&amp; mouse_x &lt; posx[4]+9 &amp;&amp; mouse_y &gt; posy[4]+1 &amp;&amp; mouse_y &lt; posy[4]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==4)
            {
                draw_sprite(spr_Add_Stats_IconB,0,posx[4],posy[4]-1); 
                draw_set_blend_mode(bm_add);
                draw_rectangle_colour(posx[4]-12,posy[4]+2,posx[4],posy[4]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
                draw_set_blend_mode(bm_normal);            
            }
            else
                draw_sprite(spr_Add_Stats_IconB,0,posx[4],posy[4]);       
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (floor(accuracy[char]+acc_bon[char])) &lt; 100
        {
            if (mouse_x &gt; posx[5] &amp;&amp; mouse_x &lt; posx[5]+9 &amp;&amp; mouse_y &gt; posy[5]+1 &amp;&amp; mouse_y &lt; posy[5]+9-1 &amp;&amp; !using_controller) || (using_controller &amp;&amp; other.controller_stat_index==5)
            {
                draw_sprite(spr_Add_Stats_IconB,0,posx[5],posy[5]-1); 
                draw_set_blend_mode(bm_add);
                draw_rectangle_colour(posx[5]-12,posy[5]+2,posx[5],posy[5]+6,c_black,DS_YELLOW,DS_YELLOW,c_black,false);
                draw_set_blend_mode(bm_normal);
            }
            else
                draw_sprite(spr_Add_Stats_IconB,0,posx[5],posy[5]);      
        }
        draw_set_halign(false);
        draw_set_valign(false);                
    }
    //SKILL TREE
    /*draw_sprite(spr_Skill_A_New,char,view_xview+view_wview/2+34,view_yview+view_hview/2+7-25);
    draw_sprite(spr_Skill_B_New,char,view_xview+view_wview/2+34+16,view_yview+view_hview/2+7-25);
    draw_sprite(spr_Skill_C,char,view_xview+view_wview/2+34+32,view_yview+view_hview/2+7-25);    
    
    draw_sprite(spr_Skill_A_New,char,view_xview+view_wview/2+34,view_yview+view_hview/2+7);
    draw_sprite(spr_Skill_B_New,char,view_xview+view_wview/2+34+16,view_yview+view_hview/2+7);
    draw_sprite(spr_Skill_C,char,view_xview+view_wview/2+34+32,view_yview+view_hview/2+7);
    
    draw_sprite(spr_Skill_A_New,char,view_xview+view_wview/2+34,view_yview+view_hview/2+7+25);
    draw_sprite(spr_Skill_B_New,char,view_xview+view_wview/2+34+16,view_yview+view_hview/2+7+25);
    draw_sprite(spr_Skill_C,char,view_xview+view_wview/2+34+32,view_yview+view_hview/2+7+25); */


    //STATUSES
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+63,string(hp_regen));
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+72,string(life_steal)+"%");       
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+81,string(poison_chance)+"%");
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+90,string(shock_chance)+"%");
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+99,string(burn_chance)+"%");    
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+108,string(slow_chance)+"%");    
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+117,string(stun_chance)+"%");
    draw_text(view_xview+baseX+extraOffset-64+8,view_yview+42+126,string((crit_chance))+"%");
    
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+63 &amp;&amp; mouse_y &lt; (view_yview+42+63)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"HP Regen")
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+72 &amp;&amp; mouse_y &lt; (view_yview+42+72)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Lifesteal")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+81 &amp;&amp; mouse_y &lt; (view_yview+42+81)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Poison Chance")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+90 &amp;&amp; mouse_y &lt; (view_yview+42+90)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Shock Chance")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+99 &amp;&amp; mouse_y &lt; (view_yview+42+99)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Burn Chance")     
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+108 &amp;&amp; mouse_y &lt; (view_yview+42+108)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Slow Chance");
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+117 &amp;&amp; mouse_y &lt; (view_yview+42+117)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Stun Chance")       
    if (mouse_x &gt; view_xview+baseX+extraOffset-64+8 &amp;&amp; mouse_x &lt; (view_xview+baseX-64+extraOffset+24)) &amp;&amp; (mouse_y &gt; view_yview+42+126 &amp;&amp; mouse_y &lt; (view_yview+42+126)+8) then draw_text(view_xview+baseX-64+extraOffset+8-32,view_yview+42+63-16,"Critical Chance")
}

}

if (global.coop) then draw_set_alpha(1);

//////////////////////////////////////////
///Obj Hero Vars Ends Here

if (lname_alpha&gt;0)
{
    draw_set_alpha(lname_alpha);
    if global.dungeon_name == ENVIRO1 then draw_sprite(spr_Levels,0,view_xview+view_wview/2,view_yview+view_hview/2-64)
    else if global.dungeon_name == ENVIRO2 then draw_sprite(spr_Levels,1,view_xview+view_wview/2,view_yview+view_hview/2-64)
    else if global.dungeon_name == ENVIRO3 then draw_sprite(spr_Levels,2,view_xview+view_wview/2,view_yview+view_hview/2-64)
    else if global.dungeon_name == ENVIRO4 then draw_sprite(spr_Levels,3,view_xview+view_wview/2,view_yview+view_hview/2-64)
    else if global.dungeon_name == ENVIRO5 then draw_sprite(spr_Levels,6,view_xview+view_wview/2,view_yview+view_hview/2-64)
    else if global.dungeon_name == SECRET1 then draw_sprite(spr_Levels,4,view_xview+view_wview/2,view_yview+view_hview/2-64)
    else if global.dungeon_name == SECRET2 then draw_sprite(spr_Levels,5,view_xview+view_wview/2,view_yview+view_hview/2-64)
    else draw_sprite(spr_Levels,0,view_xview+view_wview/2,view_yview+view_hview/2)
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crosshair
if !(instance_exists(obj_Hero)) then exit;
var easingAmount = .5;
var xDistance = mouse_x - cursorx;
var yDistance = mouse_y - cursory;
var distance = sqrt(xDistance * xDistance + yDistance * yDistance);
if (distance &gt; 1) {
    cursorx += xDistance * easingAmount;
    cursory += yDistance * easingAmount;
} else {
   cursorx = mouse_x;
   cursory = mouse_y;
}
if  ( distance_between(obj_Hero.x,obj_Hero.y,cursorx,cursory) &lt; 10 ) then exit;
//draw_sprite(spr_Mouse_Cursor,0, cursorx,cursory);
if (cursorx &lt; view_xview+6) {
    draw_sprite(spr_Mouse_Cursor,0,view_xview+6,cursory); 
} else if (cursorx &gt; view_xview+view_wview-6) {
    draw_sprite(spr_Mouse_Cursor,0,view_xview+view_wview-6,cursory);
} else {
    draw_sprite(spr_Mouse_Cursor,0, cursorx,cursory);
} 

if !global.coop then exit;
//Second Player
var player = instance_find(obj_Hero,1);
if instance_exists(player) {
    with (player) { 
    
        var dir =  point_direction(0, 0, gamepad_axis_value(0,gp_axisrh), gamepad_axis_value(0,gp_axisrv)); 
        var xx = lengthdir_x(abs(gamepad_axis_value(0,gp_axisrh)),dir);
        var yy = lengthdir_y(abs(gamepad_axis_value(0,gp_axisrv)), dir);
        if (xx !=0 or yy !=0 ) &amp;&amp; ( !distance_between(obj_Hero.x,obj_Hero.y,x+(xx*50),y+(yy*50)) &lt; 10 ) {
            draw_sprite_ext(spr_Mouse_Cursor,0,x+(xx*50),y+(yy*50),1,1,45,c_maroon,1);
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
