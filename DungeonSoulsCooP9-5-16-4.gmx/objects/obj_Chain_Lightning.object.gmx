<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws lightning between two instances or positions.
source=-1;
target=-1;
sourcex=-1;
sourcey=-1;
targetx=-1;
targety=-1;
animation_speed=0.1;
continuous=false;
animation_progress=0;
max_points=20;
inv_max_points=1/max_points;
thunderx[max_points]=0;
thundery[max_points]=0;
thunderrandx[max_points]=0;
thunderrandy[max_points]=0;
wait_timer=1;
sliding_window = 5;
min_range=-1;
max_range=-1;
alarm[0]=1;
col1=c_white;
col2=c_white;
exec_ob = -1; //Object that will execute its code at the end.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xdiff=targetx-sourcex;
var ydiff=targety-sourcey;
var line_angle = arctan2(ydiff,xdiff);
var dist = distance_between(sourcex,sourcey,targetx,targety);
angle = degtorad(point_direction(sourcex,sourcey,targetx,targety));

var increment= dist/max_points;
var xx,yy;
var random_offset;
var index=0;
for (var i=0;i&lt;=dist;i+=increment)
{
    if (i==0 || i==dist)
    {
        thunderrandx[index]=0;
        thunderrandy[index]=0;
    }
    else
    {
        thunderrandx[index]=(1-(xdiff/dist))*choose(irandom_range(-max_range,-min_range),
        irandom_range(min_range,max_range));
    thunderrandy[index]=(1-(ydiff/dist))*choose(irandom_range(-max_range,-min_range),
        irandom_range(min_range,max_range));
    }
    
    xx=thunderrandx[index]+sourcex+i*cos(angle);
    yy=thunderrandy[index]+sourcey-i*sin(angle);
    thunderx[index]=xx;
    thundery[index]=yy;
    index++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (source!=-1)
{
    if (instance_exists(source))
    {
        sourcex=source.x;
        sourcey=source.y;
    }
}
if (target!=-1)
{
    if (instance_exists(target))
    {
        targetx=target.x;
        targety=target.y;
    }
}

if (animation_progress&lt;1)
{
    animation_progress+=animation_speed;
}
else
{
    if (exec_ob!=-1)
    {
        if (instance_exists(exec_ob))
        {
            exec_ob.can_execute=true;
        }
    }
    instance_destroy();
}

var xdiff=targetx-sourcex;
var ydiff=targety-sourcey;
var dist = distance_between(sourcex,sourcey,targetx,targety);
angle = degtorad(point_direction(sourcex,sourcey,targetx,targety));

xdiff=abs(xdiff);
ydiff=abs(ydiff);

var increment= dist*inv_max_points;
var xx,yy;
var random_offset;
var index=0;
if (dist&gt;0)
{
    for (var i=0;i&lt;=dist;i+=increment)
    {
        if (index!=0 &amp;&amp; index&lt;max_points-1)
        {
            thunderrandx[index]=thunderrandx[index+1];
            thunderrandy[index]=thunderrandy[index+1];
        }
        xx=thunderrandx[index]+sourcex+i*cos(angle);
        yy=thunderrandy[index]+sourcey-i*sin(angle);
        thunderx[index]=xx;
        thundery[index]=yy;
        index++;
    }
    thunderrandx[max_points-1]=(1-(xdiff/dist))*choose(irandom_range(-max_range,-min_range),
        irandom_range(min_range,max_range));
    thunderrandy[max_points-1]=(1-(ydiff/dist))*choose(irandom_range(-max_range,-min_range),
        irandom_range(min_range,max_range));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_primitive_begin(pr_trianglestrip);
if (continuous)
{
    for (var i=0;i&lt;=max_points;i++)
    {
        draw_vertex_colour(thunderx[i],thundery[i],col1,1);
        draw_vertex_colour(thunderx[i],thundery[i]+4,col2,1);
    }
}
else
{
    var cap = max_points-sliding_window;
    var val = cap*animation_progress;
    for (var i=val;i&lt;=val+sliding_window;i++)
    {
        draw_vertex_colour(thunderx[i],thundery[i],col1,1);
        draw_vertex_colour(thunderx[i],thundery[i]+4,col2,1);
    }
}
draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
