<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
This object is responsible for dealing with everything that requires cinematic effects.
An example would be cutscenes.
*/
globalvar isCinematic,cinematic_x,cinematic_y,cutscene_target,cutscene_message,cutscene_duration,cutscene_sound
,cutscene_mindex,cutscene_mdisplay_index;
//cutscene_mindex = message index for the cutscene message queue;
//cutscene_mdisplay_index = message index for the cutscene being displayed;

last_message=-1;
last_sound=-1;

isCinematic=false;
cinematic_x=0;
cinematic_y=0;
cutscene_target=-1;
cutscene_message[0]="";
cutscene_duration[0]=0;
cutscene_sound[0]=-1;
cutscene_mindex=0;
cutscene_timer=0;

//Game events
//Unpersisted variables
globalvar just_killed_owl,fought_normal_merlin;
just_killed_owl=false;
fought_normal_merlin=false;

//Persisted variables
globalvar died_slime_boss,died_soul_guardian,died_judgement,killed_owl,owl_killer,killer_date,
owl_nice_value,killed_dark_merlin,visited_forbidden_chambers,dark_merlin_deaths;
ini_open("DGSC.ds");
died_slime_boss=ini_read_real(CUTSCENE_SYSTEM,DEATH_TO_BOSS_SLIME,0);
died_soul_guardian=ini_read_real(CUTSCENE_SYSTEM,DEATH_TO_SOUL_GUARDIAN,0);
died_judgement=ini_read_real(CUTSCENE_SYSTEM,DEATH_TO_JUDGEMENT,0);
killed_owl = ini_read_real(CUTSCENE_SYSTEM,KILLED_OWL,0);
owl_killer = ini_read_real(CUTSCENE_SYSTEM,OWL_KILLER,-1);
killer_date = ini_read_real(CUTSCENE_SYSTEM,KILLER_DATE,-1);
owl_nice_value = ini_read_real(CUTSCENE_SYSTEM,OWL_NICE_VALUE,0);
killed_dark_merlin = ini_read_real(CUTSCENE_SYSTEM,KILLED_DARK_MERLIN,0);
visited_forbidden_chambers = ini_read_real(CUTSCENE_SYSTEM,VISITED_FORBIDDEN_CHAMBERS,false);
dark_merlin_deaths = ini_read_real(CUTSCENE_SYSTEM,DARK_MERLIN_DEATHS,0);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room==Game)
{
    if (is_cinematic_displayed())
    {
        if (cutscene_timer&gt;0)
        {
            cutscene_timer--;
            var pick;
            
            pick = max ( gamepad_button_check_pressed(global.pad[GAMEPAD_1],ds_map_find_value(global.ckeys,'pick')) , keyboard_check_pressed(ds_map_find_value(global.keys,'pick')));
          
            if (pick) {
                cutscene_timer=0;
                if (last_message!=-1) {
                    with (last_message) {
                     instance_destroy();
                    }
                    last_message=-1;
                }
                if (last_sound!=-1) {
                    audio_stop_sound(last_sound);
                }
            }
        }
        else if (cutscene_timer&lt;=-16)
        {
            var pick;
            pick = max ( gamepad_button_check_pressed(global.pad[GAMEPAD_1],ds_map_find_value(global.ckeys,'pick')) ,  keyboard_check_pressed(ds_map_find_value(global.keys,'pick')) );
                
            if (pick) {
                cutscene_timer=0;
                if (last_message!=-1)
                {
                    with (last_message)
                    {
                        instance_destroy();
                    }
                    last_message=-1;
                }
                if (last_sound!=-1)
                {
                    audio_stop_sound(last_sound);
                }
            }
        }
        else
        {
            if (cutscene_mindex&gt;0)
            {
                var cx,cy;
                cx = getCinematicX();
                cy = getCinematicY();
                if (cutscene_target!=-1)
                {
                    if (instance_exists(cutscene_target))
                    {
                        cx=cutscene_target.x;
                        cy=cutscene_target.y;
                    }
                }
                if (cutscene_message[0]!="")
                {
                    last_message=display_ingame_message(cx,cy,cutscene_message[0],cutscene_duration[0],false,-1);
                }
                else
                {
                    last_message="";
                }
                cutscene_timer=cutscene_duration[0]*room_speed;;
                if (cutscene_sound[0]!=-1)
                {
                    Play_Sound(cutscene_sound[0],1,1.5,1,5000,true,false);
                    last_sound=cutscene_sound[0];
                }
                for (var _i=0;_i&lt;cutscene_mindex-1;_i++)
                {
                    cutscene_message[_i]=cutscene_message[_i+1];
                    cutscene_duration[_i]=cutscene_duration[_i+1];
                    cutscene_sound[_i]=cutscene_sound[_i+1];
                }
                cutscene_mindex--;
            }
            else
            {
                set_cutscene_displayed(false);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
