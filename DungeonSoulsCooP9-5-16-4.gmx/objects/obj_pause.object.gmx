<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set pause
surf_pause = -1;
alpha = .5;
//Fix view position
//instance_create(x,y,obj_camera);
pause_background = background_create_from_surface(application_surface,0,0,surface_get_width(application_surface),surface_get_height(application_surface),0,0);
//Initialize Options
option = 0;
maxOption = 0;
menu_index = MENU_MAIN;
//Wait for option
alarm[0] = room_speed*0.4;
alarm[1] = room_speed *0.25;

//Menu stuff
text[4] = "Exit to desktop";
text[3] = "Main Menu";
text[2] = "Quick Restart";
text[1] = "Settings";
text[0] = "Resume";
up = true;
scale = 1;
scr_init_menu_shared_text();

//Option selection
xxx = view_xview + view_wview*.8;

//Options text
for ( var i = 10; i &gt;= 0; i--) {
    yyyy[i] = view_yview + view_wview*.3 +(20*i) 
}

xxxx = view_xview + view_wview/4;

//Volume Position
vol_x = view_xview+view_wview*.72;
vol_y = view_yview+view_hview*.57;

///Menu background fx
myy = 0;
malpha = 1;
n = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surface_free(surf_pause); 
surface_free(surf_pause); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop vibration
gamepad_set_vibration(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Volume wait
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sheck surface
surface_set_target(surf_pause);
draw_enable_alphablend(false);
draw_clear_alpha(c_black, 0);
if (surface_exists(application_surface)){
   draw_surface(application_surface,view_xview,view_yview);
}
draw_enable_alphablend(true);
surface_reset_target();
instance_deactivate_all(true);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can select
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options Fix

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait for option
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the surface
/*display_set_gui_size(view_wview,view_hview);
///Pause menu
if(surface_exists(surf_pause)){
    draw_enable_alphablend(false);
    draw_surface(surf_pause,view_xview,view_yview);
    draw_background(pause_background,view_xview,view_yview);
    draw_enable_alphablend(true);
} else {
    surf_pause = surface_create(view_wview, view_hview);
    alarm[3] = 1;
}

//Draw semitransparent square
var c_last = draw_get_color();
draw_set_color(c_black);
draw_set_alpha(0.6);
draw_rectangle(view_xview-view_wview,view_yview-view_hview,view_xview+view_wview*2,view_yview+view_hview*2,false);
draw_set_alpha(1);
draw_set_color(c_last);

//scr_menu_options(true);

///Pause Sprites
draw_set_alpha(1);
draw_set_color(c_black);
//draw_rectangle(0,0,320,240,false);
//draw_background(global.pause_background,0,0); OLD
var baseX = 120
if global.difficulty == EASY draw_sprite(spr_Difficulty_Icon,0,baseX,240/2-64);
else if global.difficulty == NORMAL draw_sprite(spr_Difficulty_Icon,1,baseX,240/2-64);
else if global.difficulty == HARD draw_sprite(spr_Difficulty_Icon,2,baseX,240/2-64);        
    
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_sprite(spr_Attribute,1,baseX,72);
    
draw_set_font(font0);
draw_set_color(merge_colour(c_blue,c_aqua,0.5));
draw_set_alpha(.4);
draw_set_alpha(1);

scr_pause_menu();
/*
display_set_gui_size(320, 180);
if(surface_exists(surf_pause)){
    draw_enable_alphablend(false);
    //draw_surface(surf_pause,view_xview,view_yview);
    draw_surface(surf_pause,0,0);
    //draw_background(pause_background,view_xview,view_yview);
    draw_background(pause_background,0,0);
    draw_enable_alphablend(true);
} else {
    surf_pause = surface_create(view_wview, view_hview);
    alarm[3] = 1;
}

//Draw semitransparent square
var c_last = draw_get_color();
draw_set_color(c_black);
draw_set_alpha(0.6);
//draw_rectangle(view_xview-view_wview,view_yview-view_hview,view_xview+view_wview*2,view_yview+view_hview*2,false);
draw_rectangle(0-display_get_gui_width(),0-display_get_gui_height(),0+display_get_gui_width(),0+display_get_gui_height(),false);
draw_set_alpha(1);
draw_set_color(c_last);

///Pause Sprites
draw_set_alpha(1);
draw_set_color(c_black);
//draw_rectangle(0,0,320,240,false);
//draw_background(global.pause_background,0,0);
var baseX = 120
if global.difficulty == EASY draw_sprite(spr_Difficulty_Icon,0,baseX,240/2-64);
else if global.difficulty == NORMAL draw_sprite(spr_Difficulty_Icon,1,baseX,240/2-64);
else if global.difficulty == HARD draw_sprite(spr_Difficulty_Icon,2,baseX,240/2-64);        
    
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_sprite(spr_Attribute,1,baseX,72);
    
draw_set_font(font0);
draw_set_color(merge_colour(c_blue,c_aqua,0.5));
draw_set_alpha(0.4);

//Option Logic
scr_menu_options(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause menu
if(surface_exists(surf_pause)){
    draw_enable_alphablend(false);
    draw_surface(surf_pause,view_xview,view_yview);
    draw_background(pause_background,view_xview,view_yview);
    draw_enable_alphablend(true);
} else {
    surf_pause = surface_create(view_wview, view_hview);
    alarm[3] = 1;
}

//Draw semitransparent square
var c_last = draw_get_color();
draw_set_color(c_black);
draw_set_alpha(0.6);
draw_rectangle(view_xview-view_wview,view_yview-view_hview,view_xview+view_wview*2,view_yview+view_hview*2,false);
draw_set_alpha(1);
draw_set_color(c_last);

//scr_menu_options(true);
scr_pause_menu();
///Pause Sprites
draw_set_alpha(1);
draw_set_color(c_black);
//draw_rectangle(0,0,320,240,false);
//draw_background(global.pause_background,0,0);
var baseX = view_xview + 160;
var baseY = view_yview + 25;
if global.difficulty == EASY draw_sprite(spr_Difficulty_Icon,0,baseX,baseY);
else if global.difficulty == NORMAL draw_sprite(spr_Difficulty_Icon,1,baseX,baseY);
else if global.difficulty == HARD draw_sprite(spr_Difficulty_Icon,2,baseX,baseY);        
    
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_sprite(spr_Attribute,1,baseX,view_yview+42);
    
draw_set_font(font0);
draw_set_color(merge_colour(c_blue,c_aqua,0.5));
draw_set_alpha(0.4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
