<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Vars
animation_timer=5*room_speed;
radius=16;
number_souls = 4;
soul_radius=192;
trail_amount=16;
flash_alpha=0;
var offsetAngle=360/number_souls;
for (var i=0;i&lt;number_souls;i++) {
    soul_angle[i]=offsetAngle*i;
    for (var j=0;j&lt;trail_amount;j++) {
        soul_angle_last[i,j]=0;
    }
}
Play_Sound(snd_arcane_forge_crafting,1,.5,0,5000,true,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (animation_timer&gt;0) {
    if (instance_exists(obj_Menu))
    {
        if (obj_Menu.menu_index == MENU_FORGE) //ARCANE FORGE INDEX
        {
            obj_Menu.arcane_forge_base_radius-=0.1;
        }   
    }
    if (radius&lt;64)
    {
        radius+=0.25;
    }
    else
    {
        if (flash_alpha&lt;1)
        {
            flash_alpha+=0.01;
        }
    }
    for (var i=0;i&lt;number_souls;i++)
    {
        for (var j=0;j&lt;trail_amount-1;j++)
        {
            soul_angle_last[i,j]=soul_angle_last[i,j+1];
        }
        soul_angle_last[i,j]=soul_angle[i];
        soul_angle[i]-=2;
    }
    if (soul_radius&gt;16)
    {
        soul_radius-=0.9;
    }
    animation_timer--;
}
else
{
    if (instance_exists(obj_Menu))
    {
        if (obj_Menu.menu_index == MENU_FORGE) //ARCANE FORGE INDEX
        {
            with (obj_Menu)
            {
                arcane_forge_base_radius=128;
                forge_item(global.recipe[selected_recipe]);
                display_message(view_wview[0]/2,view_hview[0]/2,"Item crafted!",3,true);
            }
        }   
    }
    Play_Sound(snd_arcane_forge_crafting_end,1,.5,0,5000,true,false);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(bm_add);
draw_set_colour(c_aqua);
var angle;
for (var i=0;i&lt;number_souls;i++)
{
    for (var j=0;j&lt;trail_amount;j++)
    {
        angle = degtorad(soul_angle_last[i,j]);
        draw_set_alpha(j*0.5/trail_amount);
        draw_circle(x+soul_radius*cos(angle),y-soul_radius*sin(angle),((j+1)/trail_amount)*5,false);
    }
    draw_set_alpha(1);
    angle = degtorad(soul_angle[i]);
    draw_circle(x+soul_radius*cos(angle),y-soul_radius*sin(angle),5,false);
}
draw_set_alpha(radius/64);
draw_set_colour(c_white);
draw_circle(x,y,irandom_range(-2,2)+radius*0.5,false);
draw_circle(x,y,irandom_range(-1,1)+radius*0.9,false);
draw_circle(x,y,(irandom_range(-3,3)*floor(radius/64))+radius,false);
if (radius&gt;=64)
{
    for (var i=0;i&lt;2;i++)
    {
        angle = degtorad(irandom(360));
        draw_primitive_begin(pr_trianglefan);
        draw_vertex(x,y);
        draw_vertex(x+300*cos(angle-0.05),y-300*sin(angle-0.05));
        draw_vertex(x+300*cos(angle+0.05),y-300*sin(angle+0.05));
        draw_primitive_end();
    }
}
draw_set_alpha(flash_alpha);
draw_rectangle(-1920,-1920,1920,1920,false);
draw_set_blend_mode(bm_normal);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
