<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Hit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shader &amp; Silhouette Colour
event_inherited();
/*shader = shd_damage_mask_red;
silhouetteColour =  c_red;
//Shadow
spr_shadow = spr_enemy_shadow;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Pick Ups
event_inherited();
if (scr_chance(.25)){
  // instance_create(x+random_range(-4, 4), y+ random_range(-4, 4),choose(obj_hp_pickup, obj_ammo_pickup));
}
//instance_create(x+random_range(-2, 2), y+ random_range(-2, 2), obj_exp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show HealthBar
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flash
/*
switch (shader) {
       case shd_damage_mask_red:
       shader = shd_damage_mask_black;
       break;
       
       case shd_damage_mask_black:
       shader = shd_damage_mask_red;
       break;
}

/*
if (shader == shd_damage_mask_red) {
   shader = shd_damage_mask_black;
} else {
  shader = shd_damage_mask_red;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite index
event_inherited();

//Health Bar
if (temphp != hp) {
   temphp -= 0.05;
}


//
/*
//Direction
if (hspeed != 0) {
   image_xscale = sign(hspeed);
}


switch (speed) {
       case 0:
       if (sprite_index != spr_hurt) {
          sprite_index = spr_idle;
       } 
       break;
   
       default:
       if (sprite_index != spr_hurt) {
          sprite_index = spr_walk;
       }
       break;
}

//Damage stop
if (sprite_index = spr_hurt) { 
   //exit;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Hit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bounce
move_bounce_solid(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop hurt animation
if (sprite_index == spr_hurt) {
   sprite_index = spr_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Health Bar

if (flash) {
    if (alarm[9] &lt;= 0) {
       alarm[9] = room_speed*.1;
    }
    //shader_set(shader);
} 
event_inherited();
if (flash) {
   //shader_reset();
}

if (alarm[10] &gt; 0) {
    draw_sprite_ext(spr_enemy_bar, 0, x-6, y+10, maxhp/2,1,image_angle,image_blend,image_alpha);
    var xoffset = 3;
    for (var i=0; i&lt;hp; i++) { 
        draw_sprite(spr_enemy_hp,0,x-4+(xoffset*i),y+12);
    }          
    
}
/*Old Temp Bar
if (alarm[10] &gt; 0) {
   draw_set_alpha(0.8);
   draw_rectangle_colour(x-6, y+10, x-6+(temphp/maxhp)*12, y+12, make_colour_rgb(191,185,185), make_colour_rgb(191,185,185), make_colour_rgb(191,185,185), make_colour_rgb(191,185,185), false);
   draw_rectangle_colour(x-6, y+10, x-6+(hp/maxhp)*12, y+12, make_colour_rgb(123,28,28), make_colour_rgb(123,28,28), make_colour_rgb(123,28,28), make_colour_rgb(123,28,28), false);
   draw_sprite(spr_enemy_bar, 0, x-6, y+10);
   draw_set_alpha(1);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
