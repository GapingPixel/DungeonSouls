<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.pause = false;
global.pause_background = noone;
pause_menu = 0;
n=0;
menu_page = 0;
menu_yy = 0;
kbScale = 1;
cntScale = 1;
cont_act = "keyboard";
cont_change = false;
change[0] = false;
change[1] = false;
change[2] = false;
change[3] = false;
change[4] = false;
change[5] = false;
change[6] = false;
change[7] = false;
change[8] = false;
change[9] = false;
change[10] = false;
change[11]=false;
change[12]=false;
change[13]=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///KEY

//SCALE
if n &gt; 99999 then n = 0 else n += 1;
if cont_act == "keyboard"
    kbScale = 1+(cos(n*0.1)*.1);
else
    kbScale = 1;

if cont_act == "controller"
    cntScale = 1+(cos(n*0.1)*.1);
else
    cntScale = 1;

if global.pause == true
{
    
    var key_up,key_right,key_left,key_down,key_pick;
    key_up=false;
    key_down=false;
    key_left=false;
    key_right=false;
    key_pick = false;
    if (gamepad_detected)
    {
        var pad;
        pad = gamepad_get_index(0);
        if (pad!=-1)
        {
            key_up=gamepad_check_lpushed_up(pad);
            key_down=gamepad_check_lpushed_down(pad);
            key_left=gamepad_axis_value(pad,gp_axislh)&lt;-gamepad_axis_deadzone;
            key_right=gamepad_axis_value(pad,gp_axislh)&gt;gamepad_axis_deadzone;
            key_pick = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'pick'));
        }
    }
    else if (joystick_detected)
    {
        key_up=joystick_check_stick_pushed_up(0);
        key_down=joystick_check_stick_pushed_down(0);
        key_left=joystick_check_stick_left(0);
        key_right=joystick_check_stick_right(0);
        key_pick = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'pick'))];
    }
    
    {
        key_up=key_up||keyboard_check_pressed(ds_map_find_value(global.keys,'up'));
        key_down=key_down||keyboard_check_pressed(ds_map_find_value(global.keys,'down'));
        key_left=key_left||keyboard_check(ds_map_find_value(global.keys,'left'));
        key_right=key_right||keyboard_check(ds_map_find_value(global.keys,'right'));
        key_pick = key_pick||keyboard_check_pressed(ds_map_find_value(global.keys,'pick'));  
    }
    switch(menu_page)
    {
        case 0:
            if key_up
            {
                if menu_yy &gt; 0
                    menu_yy -= 1
                else
                    menu_yy = 4
            }
            if key_down
            {
                if menu_yy &lt; 4
                    menu_yy += 1
                else
                    menu_yy = 0
            }
            if key_pick        
            {
                switch(menu_yy)
                {
                    case 0:
                        global.pause = false; 
                        audio_resume_all();   
                        instance_activate_all();
                        break;
                    /*case 1:
                        quick_saved = true;
                        ini_open("DGSC.ds");
                        ini_write_real(GENERAL_SECTION,QUICK_SAVED_KEY,quick_saved);
                        ini_close();
                        quicksave("qsv.dt");
                        game_end();
                    break;*/
                    case 1:
                        menu_page = 6;
                        menu_yy=1;
                        break;
                    case 2:
                        menu_page = 1;
                        menu_yy = 0;
                        break;
                    case 3:
                        enabled_gamepad=!enabled_gamepad;
                    break;
                    case 4:
                        menu_page=7;
                        menu_yy=1; 
                        break;
                    default:
                        break;             
                        
                } 
            }
            break;
        case 1:
            if key_up
            {
                if menu_yy &gt; 0
                    menu_yy -= 1
                else
                    menu_yy = 4 
            }
            if key_down
            {
                if menu_yy &lt; 4
                    menu_yy += 1
                else
                    menu_yy = 0
            }
            if key_pick        
            {
                switch(menu_yy)
                {
                    case 0:
                        menu_page = 2
                        menu_yy = 0;
                        break;
                    case 1:
                        menu_page = 3
                        menu_yy = 0;
                        break;
                    case 2:
                        menu_page = 4
                        menu_yy = 0;
                        break;
                    case 3:
                        menu_page = 5
                        menu_yy = 0;   
                        break;
                    case 4:
                        menu_page -= 1
                        menu_yy = 0;
                        break;                    
                    default:
                        break;             
                        
                } 
            }        
            break;
        case 2:
            var extra;
            if menu_yy == -1
            {
                if key_left and cont_act != "keyboard"
                    cont_act = "keyboard";
                else if key_right and cont_act != "controller"
                    cont_act = "controller";
            }        
            if (cont_act=="keyboard")
            {
                extra=0;
            }
            else
            {
                extra=3;
            }
            if key_up and No_Key_Change()
            {
                if menu_yy &gt; -1
                    menu_yy -= 1
                else
                    menu_yy = 11 +extra
            }
            if key_down and No_Key_Change()
            {
                if menu_yy &lt; 11+extra
                    menu_yy += 1
                else
                    menu_yy = -1
            }
            if key_pick and cont_change=false
            {
                switch(menu_yy)
                {
                    case 0:            
                        if No_Key_Change() &amp;&amp; cont_act!="controller"  { change[0] = true; cont_change = true; }
                        break;
                    case 1:
                        if No_Key_Change() &amp;&amp; cont_act!="controller" { change[1] = true; cont_change = true; }
                        break;
                    case 2:
                        if No_Key_Change()  &amp;&amp; cont_act!="controller" { change[2] = true; cont_change = true; }
                        break;
                    case 3:            
                        if No_Key_Change()  &amp;&amp; cont_act!="controller" { change[3] = true; cont_change = true; }
                        break;
                    case 4:                
                        if No_Key_Change()  { change[4] = true; cont_change = true; }
                        break;
                    case 5:
                        if No_Key_Change()  { change[5] = true; cont_change = true; }
                        break;
                    case 6:
                        if No_Key_Change()  { change[6] = true; cont_change = true; }
                        break;
                    case 7:
                        if No_Key_Change()  { change[7] = true; cont_change = true; }
                        break;
                    case 8:
                        if No_Key_Change()  { change[8] = true; cont_change = true; }
                        break;                                                 
                    case 9:
                        if No_Key_Change()  { change[9] = true; cont_change = true; }
                        break;
                    case 10:
                        if No_Key_Change()  { change[10] = true; cont_change = true; }
                        break;
                    case 11:   
                        if (extra==0)
                        {
                            Save_Settings();
                            menu_yy = 0;             
                            menu_part = 1;
                            menu_page=0;
                        }
                        else
                        {
                            if No_Key_Change()  { change[11] = true; cont_change = true; }
                        }
                        break;
                    case 12:
                        if (extra!=0)
                        {
                            if No_Key_Change()  { change[12] = true; cont_change = true; }
                        }
                        break;
                    case 13:
                        if (extra!=0)
                        {
                            if No_Key_Change()  { change[13] = true; cont_change = true; }
                        }
                        break;
                    case 14:
                        if (extra!=0)
                        {
                            Save_Settings();
                            menu_yy = 0;             
                            menu_part = 1;
                            menu_page=0;
                        }
                        break;
                    default:
                        break;                
                }                       
            }else
            if keyboard_check_pressed(vk_anykey)
            { 
                if cont_act == "keyboard"
                {    
                    switch(menu_yy)
                    {
                        case 0:         
                            if change[0] == true
                            {                    
                                ds_map_replace(global.keys,'up',Return_VKey());                
                                change[0] = false;
                                cont_change = false;
                            }
                            break;
                        case 1:
                            if change[1] == true
                            {
                                ds_map_replace(global.keys,'down',Return_VKey());                
                                change[1] = false;
                                cont_change = false;
                            }                    
                            break;
                        case 2:
                            if change[2] == true
                            {
                                ds_map_replace(global.keys,'left',Return_VKey());                
                                change[2] = false;
                                cont_change = false;
                            }
                            break;
                        case 3:            
                            if change[3] == true
                            {
                                ds_map_replace(global.keys,'right',Return_VKey());                
                                change[3] = false;
                                cont_change = false;
                            }
                            break;
                        case 4:                
                            if change[4] == true
                            {
                                ds_map_replace(global.keys,'potion',Return_VKey());                
                                change[4] = false;
                                cont_change = false;
                            }
                            break;
                        case 5:
                            if change[5] == true
                            {
                                ds_map_replace(global.keys,'pick',Return_VKey());                
                                change[5] = false;
                                cont_change = false;
                            }
                            break;  
                        case 6:
                            if change[6] == true
                            {
                                ds_map_replace(global.keys,'stat',Return_VKey());                
                                change[6] = false;
                                cont_change = false;
                            }
                        case 7:
                            if change[7] == true
                            {
                                ds_map_replace(global.keys,'map',Return_VKey());                
                                change[7] = false;
                                cont_change = false;
                            }                
                            break; 
                        case 8:
                            if change[8] == true
                            {
                                ds_map_replace(global.keys,'inv',Return_VKey());                
                                change[8] = false;
                                cont_change = false;
                            } 
                        case 9:
                            if change[9] == true
                            {
                                ds_map_replace(global.keys,'sskill',Return_VKey());                
                                change[9] = false;
                                cont_change = false;
                            }
                        case 10:
                            if change[10] == true
                            {
                                ds_map_replace(global.keys,'tskill',Return_VKey());                
                                change[10] = false;
                                cont_change = false;
                            }                                               
                            break;
                    }
                }
            }
            else
            {
                var jany = joystick_anykey(0);
                if (gamepad_anykey() || jany!=-1) and cont_change == true
                {
                    var ggkey = Return_CKey();
                    var change_key=(ggkey!=gp_padd &amp;&amp; ggkey!=gp_padl &amp;&amp; ggkey!=gp_padr &amp;&amp; ggkey!=gp_axislh &amp;&amp; ggkey!=gp_axisrv &amp;&amp; ggkey!=gp_axisrh &amp;&amp; ggkey!=gp_axislv &amp;&amp; ggkey!=gp_stickr
                    &amp;&amp; ggkey!=gp_stickl) 
                    &amp;&amp; (jany!=JOYSTICK_RSTICK_PUSHED_UP &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_LEFT &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_RIGHT &amp;&amp; jany!=JOYSTICK_RSTICK_PUSHED_DOWN &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_LEFT &amp;&amp;
                    jany!=JOYSTICK_LSTICK_PUSHED_UP &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_DOWN &amp;&amp; jany!=JOYSTICK_LSTICK_PUSHED_RIGHT &amp;&amp;
                    jany!=JOYSTICK_DPAD_RIGHT &amp;&amp;
                    jany!=JOYSTICK_DPAD_LEFT &amp;&amp;
                    jany!=JOYSTICK_DPAD_DOWN);
                    
                    if (menu_yy!=4)
                    {
                        change_key = change_key &amp;&amp; (jany!=JOYSTICK_DPAD_UP &amp;&amp; ggkey!=gp_padu);
                    }
                    
                    if (!change_key)
                    {
                        if (gamepad_detected)
                        {
                            display_message(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-32,"Key '"+Return_ContKey(ggkey)+"' is system-reserved",1,true);
                        }
                        else if (joystick_detected)
                        {
                            display_message(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]-32,"Key '"+Return_ContKey(jany)+"' is system-reserved",1,true);
                        }
                    }
                    
                    if cont_act == "controller" &amp;&amp; change_key
                    {
                        switch(menu_yy)
                        {
                            case 0:         
                                if change[0] == true
                                {                    
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'up',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'up',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }
                                    change[0] = false;
                                    cont_change = false;
                                }
                                break;
                            case 1:
                                if change[1] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'down',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'down',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }               
                                    change[1] = false;
                                    cont_change = false;
                                }                    
                                break;
                            case 2:
                                if change[2] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'left',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'left',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }               
                                    change[2] = false;
                                    cont_change = false;
                                }
                                break;
                            case 3:            
                                if change[3] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'right',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'right',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }
                                    change[3] = false;
                                    cont_change = false;
                                }
                                break;
                            case 4:                
                                if change[4] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'potion',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'potion',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }             
                                    change[4] = false;
                                    cont_change = false;
                                }
                                break;
                            case 5:
                                if change[5] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'pick',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'pick',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }              
                                    change[5] = false;
                                    cont_change = false;
                                }
                                break;  
                            case 6:
                                if change[6] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'stat',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'stat',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }                
                                    change[6] = false;
                                    cont_change = false;
                                }
                            case 7:
                                if change[7] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'map',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'map',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }
                                    change[7] = false;
                                    cont_change = false;
                                }                
                                break; 
                            case 8:
                                if change[8] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'inv',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'inv',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }               
                                    change[8] = false;
                                    cont_change = false;
                                } 
                            case 9:
                                if change[9] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'sskill',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'sskill',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }           
                                    change[9] = false;
                                    cont_change = false;
                                }
                            case 10:
                                if change[10] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'tskill',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'tskill',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }
                                    change[10] = false;
                                    cont_change = false;
                                }                                               
                                break;     
                            case 11:
                                if change[11] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'fskill',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'fskill',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }
                                    change[11] = false;
                                    cont_change = false;
                                }                                               
                                break;            
                            case 12:
                                if change[12] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'askill',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'askill',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }
                                    change[12] = false;
                                    cont_change = false;
                                }                                               
                                break;          
                            case 13:
                                if change[13] == true
                                {
                                    if (jany==-1)
                                    {
                                        ds_map_replace(global.ckeys,'skillup',Return_CKey());
                                    }
                                    else
                                    {
                                        ds_map_replace(global.ckeys,'skillup',textcode_to_gamepad(translate_joystick_key(jany)));
                                    }
                                    change[13] = false;
                                    cont_change = false;
                                }                                               
                                break;                          
                        }        
                    }
                }
            }
            break;     
        case 3:
            /*if gainf &gt; (global.msc_vol/100)*1
                gainf =(global.msc_vol/100)*1
            if gaint &gt; (global.msc_vol/100)*1
                gaint = (global.msc_vol/100)*1*/
            //
            if key_up 
            {
                if menu_yy &gt; 0
                    menu_yy -= 1
                else
                    menu_yy = 3
            }else
            if key_down 
            {
                if menu_yy &lt; 3
                    menu_yy += 1;
                else
                    menu_yy = 0
            }               
            if key_right or keyboard_check(ds_map_find_value(global.keys,'right')) 
            {
                //Play_Sound(snd_choose,1,.5,0,5000,true,false);    
                switch(menu_yy)
                {
                    case 0:             //MUSIC        
                        if global.msc_vol &lt; 100 and global.mute = false
                            global.msc_vol += 1
                        break;  
                    case 1:             //SOUND 
                        if global.sfx_vol &lt; 100 and global.mute = false
                            global.sfx_vol += 1                           
                        break;               
                     default:
                        break;
                }
            }
            if key_pick 
            {
                switch(menu_yy)
                {
                    case 2:                
                        if global.mute == true
                        {
                            global.mute = false
                            global.msc_vol = 100;
                            global.sfx_vol = 100;
                        }
                        else if global.mute == false
                        {
                            global.mute = true;
                            global.msc_vol = 0;
                            global.sfx_vol = 0;
                        }
                        break;                    
                    case 3:
                        //BACK
                        Save_Settings();
                        menu_page = 1;        
                        menu_yy = 0;             
                        break;
                    default:
                        break;       
                }               
            }
            if key_left or keyboard_check(ds_map_find_value(global.keys,'left')) 
            {
                //Play_Sound(snd_choose,1,.5,0,5000,true,false);    
                switch(menu_yy)
                {
                    case 0:             //MUSIC        
                        if global.msc_vol &gt; 0 and global.mute = false
                            global.msc_vol -= 1
                        break;  
                    case 1:             //SOUND 
                        if global.sfx_vol &gt; 0 and global.mute = false
                            global.sfx_vol -= 1                           
                        break;
                    default:
                        break;
                }
            }
            break;
        case 4:
            if key_up 
            {
                if menu_yy &gt; 0
                    menu_yy -= 1
                else
                    menu_yy = 9
            }else
            if key_down 
            {
                if menu_yy &lt; 9
                    menu_yy += 1;
                else
                    menu_yy = 0;
            }
            if key_pick 
            {
                Play_Sound(snd_choose,1,.5,0,5000,true,false);    
                switch(menu_yy)
                {
                    case 0:
                        window_set_size(640,480);
                        view_wport = 640;
                        view_hport = 480;
                        //surface_resize(application_surface,320,240);                
                        global.screen_size = 0;
                        break;
                    case 1:
                        window_set_size(800,600);
                        view_wport = 800;
                        view_hport = 600; 
                        //surface_resize(application_surface,320,240);           
                        global.screen_size = 1;
                        break;
                    case 2:
                        window_set_size(1024,768);  
                        view_wport = 1024;
                        view_hport = 768;                            
                        global.screen_size = 2;
                        break;
                    case 3:   
                        window_set_size(1280,720);
                        view_wport = 1280;
                        view_hport = 720;                  
                        global.screen_size = 3;
                        break;
                    case 4:   
                        window_set_size(1360,768);
                        view_wport = 1360;
                        view_hport = 768;                                           
                        global.screen_size = 4;
                        break;
                    case 5:
                        window_set_size(1366,768);
                        view_wport = 1366;
                        view_hport = 768;                              
                        global.screen_size = 5;
                        break;
                    case 6:
                        window_set_size(1920,1080);
                        view_wport = 1920;
                        view_hport = 1080;                              
                        global.screen_size = 6;
                        break;  
                    case 7:
                        window_set_size(2560,1440);
                        view_wport = 2560;
                        view_hport = 1440;                              
                        global.screen_size = 7;
                        break;                              
                    case 8:
                        if global.full_screen == true
                        {
                            window_set_fullscreen(false);
                            global.full_screen = false;
                        }
                        else
                        if global.full_screen == false
                        {
                            window_set_fullscreen(true);
                            global.full_screen = true;
                        }                
                        break;                
                    case 9:
                        Save_Settings();
                        menu_yy = 0;
                        menu_page = 1;
                        break;             
                    default:
                        break;                
                }
            } 
            break;
        case 5:
            if key_up 
            {
                if menu_yy &gt; 0
                    menu_yy -= 1
                else
                    menu_yy = 9;
            }else
            if key_down 
            {
                if menu_yy &lt; 9
                    menu_yy += 1;
                else
                    menu_yy = 0
            }          
            if key_pick 
            {
                switch(menu_yy)
                {
                    case 0:
                        if global.screen_shake == true
                            global.screen_shake = false;
                        else if global.screen_shake == false
                            global.screen_shake = true; 
                            
                        break;
                    case 1:
                        if global.flash == true
                            global.flash = false;
                        else if global.flash == false
                            global.flash = true;
                            
                        break;
                    case 2:
                        if global.autocast == true
                            global.autocast = false;
                        else if global.autocast == false
                            global.autocast = true;                    
                        break;                
                    case 3:
                        if global.autopick == true
                            global.autopick = false;
                        else if global.autopick == false
                            global.autopick = true;                    
                        break;   
                    case 4:
                        if global.glow == true
                            global.glow = false;
                        else if global.glow == false
                            global.glow = true;                    
                        break;
                    case 5:
                        if global.hpbar == true
                            global.hpbar = false;
                        else if global.hpbar == false
                            global.hpbar = true;                    
                        break;
                    case 6:
                        if global.mapback == true
                            global.mapback = false;
                        else if global.mapback == false
                            global.mapback = true;                    
                        break;
                    case 7:
                        global.smooth_camera=!global.smooth_camera;
                    break;
                    case 8:
                        global.vertical_sync=!global.vertical_sync;
                        display_reset(display_aa,global.vertical_sync);
                        change_resolution(global.screen_size);
                    break;
                    case 9:
                        Save_Settings();
                        menu_yy =0;
                        menu_page = 1;
                        break;             
                    default:
                        break;                           
                }
            }        
            break; 
        case 6:
            if key_up 
            {
                if menu_yy &gt; 0
                    menu_yy -= 1
                else
                    menu_yy = 1;
            }
            else if key_down 
            {
                if menu_yy &lt; 1
                    menu_yy += 1;
                else
                    menu_yy = 0
            }          
            if key_pick 
            {
                switch (menu_yy)
                {
                    case 0:
                        Quick_Restart();
                    break;
                    case 1:
                        menu_page=0;
                        menu_yy=0;
                    break;
                }
            }
            break; 
        case 7:
            if key_up 
            {
                if menu_yy &gt; 0
                    menu_yy -= 1
                else
                    menu_yy = 1;
            }
            else if key_down 
            {
                if menu_yy &lt; 1
                    menu_yy += 1;
                else
                    menu_yy = 0
            }          
            if key_pick 
            {
                switch (menu_yy)
                {
                    case 0:
                        global.pause = false;
                        global.dungeon = 0;
                        global.boss_rm = 0;
                        global.loop=1;
                        global.dungeon_name = ENVIRO4;  
                        Change_Level("Normal"); 
                        if (audio_is_playing(snd_skeleton_king))
                        {
                            audio_stop_sound(snd_skeleton_king);
                        } 
                        instance_activate_all();
                        instance_create(x,y,obj_FadeOut);
                        //game_restart();
                        room_goto(Menu);
                    break;
                    case 1:
                        menu_page=0;
                        menu_yy=0;
                    break;
                }
            }
            break;     
        default:
            break;
    }
}
//joystick_button_pressed[0,0]=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_FadeOut)
{
    var key_pressed;
    if (gamepad_detected)
    {
        var pad;
        pad = gamepad_get_index(0);
        if (pad!=-1)
        {
            key_pressed = gamepad_button_check_pressed(pad,gp_start);
        }
    }
    else if (joystick_detected)
    {
        key_pressed=joystick_button_pressed[0,9];
    }
    else
    {
        key_pressed=keyboard_check_pressed(vk_escape);
    }
    
    if key_pressed and room == Game
    {
        if global.pause = false
        {        
            global.pause = true; 
            audio_pause_all();          
            instance_deactivate_all(true);
            instance_activate_object(obj_Record);
            instance_activate_object(obj_gamepad_controller);
        }
        /*else if global.pause = true
        {
            global.pause = false; 
            audio_resume_all();   
            instance_activate_all();
        }*/
    }
    //RESTART
    /*if  keyboard_check_pressed(ord("R")) and global.pause == true
    {
        Quick_Restart();    
    }
    //MENU
    if keyboard_check_pressed(ord("Q")) and global.pause == true
    {
        global.pause = false;
        global.dungeon = 0;
        global.boss_rm = 0;
        global.dungeon_name = ENVIRO4;  
        Change_Level();      
        instance_activate_all();
        instance_create(x,y,obj_FadeOut);
        room_goto(Menu);
    } */
}  



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu_page=0;
menu_yy=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wview,view_hview);
var baseX,baseY;
baseX=160;
baseY=96;
if global.pause
{
    //instance_create(0,0,obj_pause_helper);
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_rectangle(0,0,320,240,false);
    //draw_background(global.pause_background,0,0);
    if global.difficulty == EASY draw_sprite(spr_Difficulty_Icon,0,baseX,240/2-64);
    else if global.difficulty == NORMAL draw_sprite(spr_Difficulty_Icon,1,baseX,240/2-64);
    else if global.difficulty == HARD draw_sprite(spr_Difficulty_Icon,2,baseX,240/2-64);        
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_sprite(spr_Attribute,1,baseX,72);
    
    draw_set_font(font0);
    draw_set_color(merge_colour(c_blue,c_aqua,0.5));
    draw_set_alpha(0.4);
    switch (menu_page)
    {
        case 5:
            draw_rectangle(baseX-64,baseY-4+(menu_yy*8),baseX+64,baseY+3+(menu_yy*8),false)
        break;
        case 6:
        case 7:
            draw_rectangle(baseX-32,baseY+20+(menu_yy*8),baseX+32,baseY+27+(menu_yy*8),false)
        break;
        default:
            draw_rectangle(baseX-32,baseY-4+(menu_yy*8),baseX+32,baseY+3+(menu_yy*8),false)
        break;
    }
    draw_set_alpha(1);    
    
    draw_set_halign(fa_center);
    
    draw_set_color(c_white);
    
    switch(menu_page)
    {
        case 0:        
            draw_text(baseX,baseY,      "Return")
            //draw_text(baseX,baseY+8,    "Quick Save");
            draw_text(baseX,baseY+8,    "Quick Restart")    
            draw_text(baseX,baseY+16,   "Options")
            var t;
            if (enabled_gamepad)
            {
                t="Disable Gamepad";
            }
            else
            {
                t="Enable Gamepad";
            }
            draw_text(baseX,baseY+24,   t)
            draw_text(baseX,baseY+32,   "Main Menu")
            break;
        case 1:
            draw_text(baseX,baseY,     "Controls");
            draw_text(baseX,baseY+8,   "Music");
            draw_text(baseX,baseY+16,  "Resolution");
            draw_text(baseX,baseY+24,  "Gameplay");    
            draw_text(baseX,baseY+32,  "Back");
            break;
        case 2:
            //draw_set_alpha(0.4);
            //draw_rectangle(baseX-32,240/2+48-4+(menu_yy*8)+(menu_yy/2),baseX+32,240/2+48+3+(menu_yy*8)+(menu_yy/2),false)
            //draw_set_alpha(1);
            
            draw_sprite_ext(spr_KbOpt,(cont_act == "keyboard"),baseX-64,80,kbScale,kbScale,0,image_blend,1);
            draw_sprite_ext(spr_CntOpt,(cont_act == "controller"),baseX+64,80,cntScale,cntScale,0,image_blend,1);
            
            var col,extra;
            col = c_white;
            extra=0;
            if (cont_act!="keyboard")
            {
                col=c_red;
            }
            draw_set_color(col);
            
            draw_set_color(col);
            draw_set_halign(fa_right);
            draw_text(baseX-4,baseY,"Key Up - ");
            draw_text(baseX-4,baseY+8,"Key Down - ");
            draw_text(baseX-4,baseY+16,"Key Left - ");
            draw_text(baseX-4,baseY+24,"Key Right - ");
            draw_set_color(c_white);
            draw_text(baseX-4,baseY+32,"Use Item - ");
            draw_text(baseX-4,baseY+40,"Pick up/Select - ");
            draw_text(baseX-4,baseY+48,"Stats Menu - ");
            draw_text(baseX-4,baseY+56,"Open Map - ");
            draw_text(baseX-4,baseY+64,"Open Inventory - ");
            draw_text(baseX-4,baseY+72,"Second Ability - ");
            draw_text(baseX-4,baseY+80,"Third Ability - ");    
            if cont_act == "keyboard"
            {
                var DEVICE = "KEYBOARD &gt;";
                if change[0] == true var kUP = "Press any key..." else var kUP = Return_Key(ds_map_find_value(global.keys,'up'));
                if change[1] == true var kDOWN = "Press any key..." else var kDOWN = Return_Key(ds_map_find_value(global.keys,'down'));
                if change[2] == true var kLEFT = "Press any key..." else var kLEFT = Return_Key(ds_map_find_value(global.keys,'left'));
                if change[3] == true var kRIGHT = "Press any key..." else var kRIGHT = Return_Key(ds_map_find_value(global.keys,'right'));
                if change[4] == true var kITEM = "Press any key..." else var kITEM = Return_Key(ds_map_find_value(global.keys,'potion'));
                if change[5] == true var kPICK = "Press any key..." else var kPICK = Return_Key(ds_map_find_value(global.keys,'pick'));
                if change[6] == true var kSTAT = "Press any key..." else var kSTAT = Return_Key(ds_map_find_value(global.keys,'stat'));    
                if change[7] == true var kMAP = "Press any key..." else var kMAP = Return_Key(ds_map_find_value(global.keys,'map'));
                if change[8] == true var kINV = "Press any key..." else var kINV = Return_Key(ds_map_find_value(global.keys,'inv'));
                if change[9] == true var kSSKILL = "Press any key..." else var kSSKILL = Return_Key(ds_map_find_value(global.keys,'sskill'));
                if change[10] == true var kTSKILL = "Press any key..." else var kTSKILL = Return_Key(ds_map_find_value(global.keys,'tskill'));
            }else
            {
                draw_text(baseX-4,baseY+88,"First Ability - ");
                draw_text(baseX-4,baseY+96,"Cast Ability - ");
                draw_text(baseX-4,baseY+104,"Skill Hub - ");
                extra=24;
                var DEVICE = "&lt; CONTROLLER";    
                if change[0] == true var kUP = "Press any key..." else var kUP = Return_ContKey(ds_map_find_value(global.ckeys,'up'));
                if change[1] == true var kDOWN = "Press any key..." else var kDOWN = Return_ContKey(ds_map_find_value(global.ckeys,'down'));
                if change[2] == true var kLEFT = "Press any key..." else var kLEFT = Return_ContKey(ds_map_find_value(global.ckeys,'left'));
                if change[3] == true var kRIGHT = "Press any key..." else var kRIGHT = Return_ContKey(ds_map_find_value(global.ckeys,'right'));
                if change[4] == true var kITEM = "Press any key..." else var kITEM = Return_ContKey(ds_map_find_value(global.ckeys,'potion'));
                if change[5] == true var kPICK = "Press any key..." else var kPICK = Return_ContKey(ds_map_find_value(global.ckeys,'pick'));
                if change[6] == true var kSTAT = "Press any key..." else var kSTAT = Return_ContKey(ds_map_find_value(global.ckeys,'stat'));    
                if change[7] == true var kMAP = "Press any key..." else var kMAP = Return_ContKey(ds_map_find_value(global.ckeys,'map'));
                if change[8] == true var kINV = "Press any key..." else var kINV = Return_ContKey(ds_map_find_value(global.ckeys,'inv'));
                if change[9] == true var kSSKILL = "Press any key..." else var kSSKILL = Return_ContKey(ds_map_find_value(global.ckeys,'sskill'));
                if change[10] == true var kTSKILL = "Press any key..." else var kTSKILL = Return_ContKey(ds_map_find_value(global.ckeys,'tskill'));    
                if change[11] == true var kFSKILL = "Press any key..." else var kFSKILL = Return_ContKey(ds_map_find_value(global.ckeys,'fskill'));
                if change[12] == true var kASKILL = "Press any key..." else var kASKILL = Return_ContKey(ds_map_find_value(global.ckeys,'askill'));
                if change[13] == true var kSKILLUP = "Press any key..." else var kSKILLUP = Return_ContKey(ds_map_find_value(global.ckeys,'skillup'));
            }
            draw_set_halign(fa_center);
            draw_text(baseX,88,DEVICE);
            draw_set_halign(fa_left);
            if (cont_act=="controller")
            {
                draw_set_color(c_red);
            }
            draw_text(baseX+8,baseY,kUP);
            draw_text(baseX+8,baseY+8,kDOWN);
            draw_text(baseX+8,baseY+16,kLEFT);
            draw_text(baseX+8,baseY+24,kRIGHT);
            if (cont_act=="controller")
            {
                draw_set_color(c_white);
            }
            draw_text(baseX+8,baseY+32,kITEM);
            draw_text(baseX+8,baseY+40,kPICK);
            draw_text(baseX+8,baseY+48,kSTAT);
            draw_text(baseX+8,baseY+56,kMAP);
            draw_text(baseX+8,baseY+64,kINV);
            draw_text(baseX+8,baseY+72,kSSKILL);
            draw_text(baseX+8,baseY+80,kTSKILL);
            if (extra!=0)
            {
                draw_text(baseX+8,baseY+88,kFSKILL);
                draw_text(baseX+8,baseY+96,kASKILL);
                draw_text(baseX+8,baseY+104,kSKILLUP);
            }
            draw_set_halign(fa_center)
            draw_text(baseX,baseY+88+extra,"Back"); 
                   
            /*draw_set_halign(fa_right);
            draw_text(baseX-2,baseY,"Key Up - ");
            draw_text(baseX-2,baseY+8,"Key Down - ");
            draw_text(baseX-2,baseY+16,"Key Left - ");
            draw_text(baseX-2,baseY+24,"Key Right - ");
            draw_text(baseX-2,baseY+32,"Use Item - ");
            draw_text(baseX-2,baseY+40,"Pick up/Select - ");
            draw_text(baseX-2,baseY+48,"Stats Menu - ");
            draw_text(baseX-2,baseY+56,"Open Map - ");
            draw_text(baseX-2,baseY+64,"Open Inventory - ");
            draw_text(baseX-2,baseY+72,"Second Ability - ");
            draw_text(baseX-2,baseY+80,"Third Ability - ");
            draw_set_halign(fa_left);        
            if change[0] == true draw_text(baseX+4,baseY,"Press any key...");      else draw_text(baseX+8,baseY,Return_Key(ds_map_find_value(global.keys,'up')));
            if change[1] == true draw_text(baseX+4,baseY+8,"Press any key...");    else draw_text(baseX+8,baseY+8,Return_Key(ds_map_find_value(global.keys,'down')));
            if change[2] == true draw_text(baseX+4,baseY+16,"Press any key...");   else draw_text(baseX+8,baseY+16,Return_Key(ds_map_find_value(global.keys,'left')));        
            if change[3] == true draw_text(baseX+4,baseY+24,"Press any key...");   else draw_text(baseX+8,baseY+24,Return_Key(ds_map_find_value(global.keys,'right')));
            if change[4] == true draw_text(baseX+4,baseY+32,"Press any key...");   else draw_text(baseX+8,baseY+32,Return_Key(ds_map_find_value(global.keys,'potion')));
            if change[5] == true draw_text(baseX+4,baseY+40,"Press any key...");   else draw_text(baseX+8,baseY+40,Return_Key(ds_map_find_value(global.keys,'pick')));
            if change[6] == true draw_text(baseX+4,baseY+48,"Press any key...");   else draw_text(baseX+8,baseY+48,Return_Key(ds_map_find_value(global.keys,'stat')));    
            if change[7] == true draw_text(baseX+4,baseY+56,"Press any key...");   else draw_text(baseX+8,baseY+56,Return_Key(ds_map_find_value(global.keys,'map')));    
            if change[8] == true draw_text(baseX+4,baseY+64,"Press any key...");   else draw_text(baseX+8,baseY+64,Return_Key(ds_map_find_value(global.keys,'inv')));
            if change[9] == true draw_text(baseX+4,baseY+72,"Press any key...");   else draw_text(baseX+8,baseY+72,Return_Key(ds_map_find_value(global.keys,'sskill')));
            if change[10] == true draw_text(baseX+4,baseY+80,"Press any key...");  else draw_text(baseX+8,baseY+80,Return_Key(ds_map_find_value(global.keys,'tskill')));
            draw_set_halign(fa_center)
            draw_text(baseX,baseY+88,"Back");*/
            break; 
        case 3:
            draw_set_halign(fa_right)
            draw_text(baseX-4,baseY,"Music Volume:");
            draw_text(baseX-4,baseY+8,"Sound Volume:");
            draw_text(baseX-4,baseY+16,"Mute:");    
            draw_set_halign(fa_left);
            if global.mute draw_text(baseX+4,baseY+16,"No"); else draw_text(baseX+4,baseY+16,"Yes");
            //draw_sprite(spr_Volume_Bar,0,baseX+4,baseY-4);
            //draw_sprite(spr_Volume_Bar,0,baseX+4,baseY+8-4);    
            draw_sprite_stretched(spr_Volume_Fill,0,baseX+4+1,baseY-3,(global.msc_vol/100)*30,6)
            draw_sprite_stretched(spr_Volume_Fill,0,baseX+4+1,baseY+8-3,(global.sfx_vol/100)*30,6)    
            draw_text(baseX+48,baseY,string(global.msc_vol)+"%");
            draw_text(baseX+48,baseY+8,string(global.sfx_vol)+"%");        
            draw_set_halign(fa_center);    
            draw_text(baseX,baseY+24,"Back");
            draw_set_color(c_gray);
            if (gamepad_detected || joystick_detected)
            {
                draw_text(baseX,baseY+64,"["+Return_Key(ds_map_find_value(global.ckeys,'right')) +"] - Increase Volume");        
                draw_text(baseX,baseY+72,"["+Return_Key(ds_map_find_value(global.ckeys,'left')) +"] - Decrease Volume");  
            }
            else
            {
                draw_text(baseX,baseY+64,"["+Return_Key(ds_map_find_value(global.keys,'right')) +"] - Increase Volume");        
                draw_text(baseX,baseY+72,"["+Return_Key(ds_map_find_value(global.keys,'left')) +"] - Decrease Volume");
            }
            break;
        case 4:
            if global.screen_size = 0 then draw_set_color(c_white); else draw_set_color(c_gray);
            draw_text(baseX,baseY,"640x480");
            if global.screen_size = 1 then draw_set_color(c_white); else draw_set_color(c_gray); 
            draw_text(baseX,baseY+8,"800x600");
            if global.screen_size = 2 then draw_set_color(c_white); else draw_set_color(c_gray); 
            draw_text(baseX,baseY+16,"1024x768")
            if global.screen_size = 3 then draw_set_color(c_white); else draw_set_color(c_gray); 
            draw_text(baseX,baseY+24,"1280x720");
            if global.screen_size = 4 then draw_set_color(c_white); else draw_set_color(c_gray); 
            draw_text(baseX,baseY+32,"1360x768");
            if global.screen_size = 5 then draw_set_color(c_white); else draw_set_color(c_gray); 
            draw_text(baseX,baseY+40,"1366x768");
            if global.screen_size = 6 then draw_set_color(c_white); else draw_set_color(c_gray); 
            draw_text(baseX,baseY+48,"1920x1080"); 
            if global.screen_size = 7 then draw_set_color(c_white); else draw_set_color(c_gray); 
            draw_text(baseX,baseY+56,"2560x1440");          
            draw_set_color(c_white);
            if global.full_screen == true then draw_text(baseX,baseY+64,"Fullscreen: ON"); else draw_text(baseX,baseY+64,"Fullscreen: OFF");
            draw_text(baseX,baseY+72,"Back");
            break; 
        case 5:
            draw_set_color(c_white);
            draw_set_halign(fa_right)
            draw_text(baseX-4,baseY,"Screenshake: ");
            draw_text(baseX-4,baseY+8,"White/Red Flashes: "); 
            draw_text(baseX-4,baseY+16,"Skill Auto-cast: "); 
            draw_text(baseX-4,baseY+24,"Item Auto-pick: "); 
            draw_text(baseX-4,baseY+32,"Glow: "); 
            draw_text(baseX-4,baseY+40,"Display Hp Bar: "); 
            draw_text(baseX-4,baseY+48,"Map Frame: "); 
            draw_text(baseX-4,baseY+56,"Smooth Camera: "); 
            draw_text(baseX-4,baseY+64,"Vertical Sync: "); 
            draw_set_halign(fa_left);
            if global.screen_shake  draw_text(baseX+4,baseY,"Enabled"); else draw_text(baseX+4,baseY,"Disabled");    
            if global.flash         draw_text(baseX+4,baseY+8,"Enabled"); else draw_text(baseX+4,baseY+8,"Disabled");    
            if global.autocast      draw_text(baseX+4,baseY+16,"Enabled"); else draw_text(baseX+4,baseY+16,"Disabled");    
            if global.autopick      draw_text(baseX+4,baseY+24,"Enabled"); else draw_text(baseX+4,baseY+24,"Disabled");    
            if global.glow          draw_text(baseX+4,baseY+32,"Enabled"); else draw_text(baseX+4,baseY+32,"Disabled");    
            if global.hpbar         draw_text(baseX+4,baseY+40,"Enabled"); else draw_text(baseX+4,baseY+40,"Disabled");    
            if global.mapback       draw_text(baseX+4,baseY+48,"Enabled"); else draw_text(baseX+4,baseY+48,"Disabled");
            if global.smooth_camera draw_text(baseX+4,baseY+56,"Enabled"); else draw_text(baseX+4,baseY+56,"Disabled");
            if global.vertical_sync draw_text(baseX+4,baseY+64,"Enabled"); else draw_text(baseX+4,baseY+64,"Disabled");
            draw_set_halign(fa_center);    
            draw_text(baseX,baseY+72,"Back");        
            break;
        case 6:
            draw_set_color(c_white);
            draw_set_halign(fa_center);
            draw_text(baseX-4,baseY,"Are you sure you want#to quick-restart?");
            draw_text(baseX-4,baseY+24,"Yes");
            draw_text(baseX-4,baseY+32,"No");
            break;
        case 7:
            draw_set_color(c_white);
            draw_set_halign(fa_center);
            draw_text(baseX-4,baseY,"Are you sure you want# to return to the main menu?#(All progress will be lost!)");
            draw_text(baseX-4,baseY+24,"Yes");
            draw_text(baseX-4,baseY+32,"No");
            break;
        default:
            break;
    }
    
    draw_set_halign(false);
    draw_set_valign(false);    
    
    //draw_text(baseX-32,baseY+24,   "[???]      Options")     
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
