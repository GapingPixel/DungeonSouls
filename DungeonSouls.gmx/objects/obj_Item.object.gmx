<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Item_Mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Item_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>n=0;
yy=0;
can_get = false;
interval = 0.1*room_speed;
image_xscale = choose(-1,1);
friction = 0.4
motion_add(random(360),0.5+random(1))
Item_Init();
set_light_properties(spr_Light,0,0,.3,.3,0,c_yellow,image_alpha*0.25);
smoke_timer=0; //Amount of time before next smoke particle is emitted on a cursed item.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add Item
global.item_get += 1;

if ( item_color[item_num] == c_white ) {
    Add_Rank_Point(7);
} else if ( item_color[item_num]  == c_lime ) {
    Add_Rank_Point(8);
} else {
    Add_Rank_Point(9);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///can_get = true;
/*if collision_circle(x,y,8,obj_Hero,false,false) &gt; 0
    alarm[0] = interval
else*/
can_get = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hero interaction
n+=0.5;
depth =-y;

if (!is_cinematic_displayed())
{
    with obj_Hero
    {
        var condition_met = global.pad[GAMEPAD_1];
        if (!condition_met)
        {
            condition_met=!global.controller_levelup_skill &amp;&amp; global.stat_recently_closed
        }
        if (condition_met)
        {
            if collision_circle(other.x,other.y,8,obj_Hero,false,false) &gt; 0
            {
                with other
                {
                    //CONTROLS
                    /*if (gamepad_detected)
                    {
                        var pad;
                        pad = gamepad_get_index(0);
                        if (pad!=-1) //Unnecessary check, since if a gamepad has been connected, they should be in slot 0. Nevertheless, let's keep things safe.
                        {
                            var cont_pick = gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,'pick'));
                        }
                    }
                    else if (joystick_detected)
                    {
                        var cont_pick = joystick_button_pressed[0,gamepad_to_joystick(ds_map_find_value(global.ckeys,'pick'))];
                    }
                    else
                    {
                        var cont_pick = keyboard_check_pressed(ds_map_find_value(global.keys,'pick'));
                    } */
                    var pad = 0;
                    cont_pick = max ( gamepad_button_check_pressed(0,ds_map_find_value(global.ckeys,'pick')),keyboard_check_pressed(ds_map_find_value(global.keys,'pick')) );
                    //CONTROLS  
                    var extra_slots = Item_Value(spr_Potion_Pouch);
                    if (extra_slots&lt;0 || extra_slots==undefined)
                    {
                        extra_slots=0;
                    }
                    var max_potion_stacks=1+extra_slots;
                    if global.autopick
                    {        
                        if can_get
                        {                
                            if item_price &lt;=0 //and keyboard_check_pressed(ds_map_find_value(global.keys,'pick'))
                            {
                                if !(item_type[item_num] == "consumable" and ds_list_size(global.potionA) &gt; max_potion_stacks and ds_list_size(global.potionB) &gt; max_potion_stacks and ds_list_size(global.potionC) &gt; max_potion_stacks)
                                {
                                    if (Item_Get())
                                    {
                                        instance_create(x,y,obj_Item_Get);
                                    }
                                }
                            }
                            else if item_price &gt; 0 and other.coin &gt;= item_price and cont_pick
                            {
                                if !(item_type[item_num] == "consumable" and ds_list_size(global.potionA) &gt; max_potion_stacks and ds_list_size(global.potionB) &gt; max_potion_stacks and ds_list_size(global.potionC) &gt; max_potion_stacks)
                                {                    
                                    Play_Sound(snd_cash_register,1,0.8,0,5000,true,false)
                                    Item_Get();
                                    other.coin -= item_price;
                                    instance_create(x,y,obj_Item_Get)     
                                
                                    var kill_items=false;
                                
                                    with obj_Merchant
                                    {
                                        item_count--;
                                        if (item_count&lt;=0)
                                        {
                                            kill_items=true;
                                            //Smoke(10,2,360,depth-1,0.1,c_gray,4);
                                            scr_part_smoke(10,360,random(4),1.9,depth-1,3,c_gray,0,1);
                                            instance_destroy();
                                        }
                                    }
                                    with obj_Item
                                    {
                                        if (kill_items)
                                        {
                                            if item_price &gt; 0
                                                instance_destroy();
                                        } 
                                    }
                                }
                            }
                        }else
                        {
                            if alarm[0] == -1
                                alarm[0] = interval;
                        }
                    }
                    else
                    {   /*var player1 = instance_find(obj_Hero,0);
                        var player2 = instance_find(obj_Hero,1);*/

                        if item_price &lt;=0 and cont_pick
                        {
                            if !(item_type[item_num] == "consumable" and ds_list_size(global.potionA) &gt; max_potion_stacks and ds_list_size(global.potionB) &gt; max_potion_stacks and ds_list_size(global.potionC) &gt; max_potion_stacks)
                            {                    
                                if (Item_Get())
                                {
                                    instance_create(x,y,obj_Item_Get)
                                }
                            }
                        }
                        else if item_price &gt; 0 and other.coin &gt;= item_price and cont_pick
                        {
                            if !(item_type[item_num] == "consumable" and ds_list_size(global.potionA) &gt; max_potion_stacks and ds_list_size(global.potionB) &gt; max_potion_stacks and ds_list_size(global.potionC) &gt; max_potion_stacks)
                            {                    
                                Play_Sound(snd_cash_register,1,0.8,0,5000,true,false)
                                Item_Get();
                                other.coin -= item_price;
                                instance_create(x,y,obj_Item_Get)     
                            
                                var kill_items=false;
                                
                                with obj_Merchant
                                {
                                    item_count--;
                                    if (item_count&lt;=0)
                                    {
                                        kill_items=true;
                                        //Smoke(10,2,360,depth-1,0.1,c_gray,4);
                                        scr_part_smoke(10,360,random(4),1.9,depth,3,c_gray,0,1);
                                        instance_destroy();
                                    }
                                }
                                with obj_Item
                                {
                                    if (kill_items)
                                    {
                                        if item_price &gt; 0
                                            instance_destroy();
                                    } 
                                }
                            }
                        }            
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if speed &lt; 4
motion_add(point_direction(other.x,other.y,x,y),2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Prop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if item_price &lt; 1
{
    if speed &lt; 4
        motion_add(point_direction(other.x,other.y,x,y),2)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Item">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if item_price &lt; 1
{
    if speed &lt; 4
        motion_add(point_direction(other.x,other.y,x,y),2)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_bounce_solid(true)
move_outside_solid(point_direction(other.x+8,other.y+8,x,y),2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (check_within_player_range(x,y,32,32))
{
    if (item_color[item_num]==c_purple)
    {
        if (smoke_timer==0)
        {
            var extra_depth=irandom_range(-1,1),s_alpha=1;
            if (extra_depth==-1)
            {
                s_alpha=0.3;
            }
            //Smoke_Alpha(2,1,360,depth+extra_depth,.2,c_purple,4,s_alpha);
            scr_part_smoke(2,irandom(360),random(5),.8,depth+extra_depth,4,c_purple,random(360),s_alpha);//Smoke Alpha replacement
            smoke_timer=room_speed*0.2;   
        }
        else
        {
            smoke_timer--;
            if (smoke_timer&lt;0)
            {
                smoke_timer=0;
            }
        }
    }
    draw_sprite_ext(sprite_index,image_index,x,y+sin(n*0.1)*1.4,image_xscale,image_yscale,0,c_white,image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
