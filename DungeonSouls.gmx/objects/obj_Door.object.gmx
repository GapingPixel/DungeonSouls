<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Portal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Portal_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hpmax = 999;
randomize();
coin = 0
expe = 0;
debris = 0;
potion_drop = 0;
name = "";
desc = "";
image_speed=0;
size = 5
shad = spr_Shadow16;

switch(global.dungeon_name)
{
    case ENVIRO1:
        if global.dungeon_type == 0
            spr_idle = spr_Portal
        else
            spr_idle = spr_PortalB
        break;
    case ENVIRO2:
        spr_idle = spr_Portal_Sewers
        break;
    case ENVIRO3:
        spr_idle = spr_Portal_Ice
        break;
    case ENVIRO4:
        spr_idle = spr_Portal_Cathedral
        break;
    case SECRET1:
        spr_idle = spr_Portal_Sewers
        break;        
    default:
        spr_idle = spr_Portal
        break;
}
spr_hurt = spr_Door_Hit;
spr_dead = spr_Door_Corpse;
hit_sound = snd_wood_hit;
hit_pitch = 0.6;
hittable = false;
enter = true;
mapvis = false;
n=0;
event_inherited();
set_light_properties(spr_Light,0,0,.8,.8,0,merge_colour(c_aqua,c_white,0.5),image_alpha/4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait
wait_me=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friction = .2;
depth = 96;
if sprite_index != spr_hurt
    sprite_index = spr_idle
if sprite_index = spr_hurt
{
    if image_index &gt; 2
        sprite_index = spr_idle
}
if n &lt; 360 then n += 1 else n = 0
if instance_exists(obj_Hero)
{
    if (check_within_player_range(x,y,32,32)) {
        var key_pick=false;
        
        if (!door_wait) {
           var pad;
           pad = global.pad[GAMEPAD_1];
         key_pick = max ( keyboard_check(ds_map_find_value(global.keys,"pick")) , gamepad_button_check_pressed(pad,ds_map_find_value(global.ckeys,"pick")) );
           
        }
        if (point_distance(obj_Hero.x,obj_Hero.y,x,y)&lt;32 &amp;&amp; image_index == 0 /*&amp;&amp; enter == true*/ &amp;&amp; key_pick /*&amp;&amp; !door_wait*/ ) {
            door_wait=true;
            obj_gamepad_controller.alarm[3]=0.1*room_speed;
            //TUTORIAL
            if global.tutorial {
                if ( global.tutorial_lvl == global.tutorial_lvl_max ) {
                    if instance_exists(obj_Hero) {
                        global.tutorial = false;
                        with obj_Hero
                            instance_destroy();
                    
                            
                    if (global.tutorial_lvl == 9) {
                       ///Steam Achievement
                       if ( global.steam_api) {
                          if (!steam_get_achievement("I am Now Ready")) then steam_set_achievement("I am Now Ready");
                          }
                       }
                    }
                }
            }else
            {    
                if audio_is_playing(snd_boss1)
                    audio_stop_sound(snd_boss1);    
                with obj_Hero{x=-64;y=-64;}
                //if global.dungeon mod 15 == 0 
                {
                    if global.loop &gt; global.highest_loop 
                    {  
                        global.highest_loop = global.loop
                    }
                    //global.loop += 1;
                }
                var level_type="Normal";
                if (global.dungeon_name==SECRET1_STORY)
                {
                    if (global.boss_rm!=3)
                    {
                        global.boss_rm++;
                    }
                }
                else if (global.dungeon_name=SECRET1)
                {
                    if (global.boss_rm+1==3)
                    {
                        if ((!just_killed_owl &amp;&amp; killed_owl &amp;&amp; !killed_dark_merlin) //We're about to go to the normal boss.
                        || (owl_nice_value&gt;=5 &amp;&amp; visited_forbidden_chambers))
                        {
                            Change_Level("Special");
                        }
                    }
                }
                if Boss() 
                {
                    Change_Level(level_type);
                }
                enter = false;
            }
            if !instance_exists(obj_FadeOut)
                instance_create(x,y,obj_FadeOut);         
            room_goto(Game);
        }
    }
}
if ( global.boss_rm != 3 ) {
    //NOT BOSS ROOM
    if (!instance_exists(obj_Lore_Block_Door))
    {
        if (global.mark != instance_number(obj_Mark))
            image_index = 1;
        else
            image_index = 0;
    }
    else
    {
        image_index=1;
    }
}else
{
    if (!instance_exists(obj_Lore_Block_Door))
    {
        if (instance_exists(obj_Enemy))
            image_index = 1;
        else
            image_index = 0;
    }
    else
    {
        image_index=1;
    }
}
if image_index == 0
{
    if random(6)&lt;1
    {
        with instance_create(x+choose(-random(16),random(16)),y+choose(-random(16),random(16)),obj_Portal_Part)
        {
            vspeed = -1-random(1)
        }        
    }
}
//if (global.mark != instance_number(obj_Mark) and global.boss_rm != 3) or (global.boss_rm == 3 and (instance_exists(BOSS1) or instance_exists(BOSS2) or instance_exists(BOSS3) or instance_exists(BOSS4)))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Self
event_inherited();
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
